
F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b948  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800bad0  0800bad0  0000cad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb4c  0800bb4c  0000d0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb4c  0800bb4c  0000cb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb54  0800bb54  0000d0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb54  0800bb54  0000cb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb58  0800bb58  0000cb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800bb5c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d0fc  2**0
                  CONTENTS
 10 .bss          00001e74  200000fc  200000fc  0000d0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f70  20001f70  0000d0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e64b  00000000  00000000  0000d12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e9e  00000000  00000000  0002b777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a80  00000000  00000000  00030618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001409  00000000  00000000  00032098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000286cb  00000000  00000000  000334a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023672  00000000  00000000  0005bb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dacbd  00000000  00000000  0007f1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159e9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006cb0  00000000  00000000  00159ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  00160b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bab8 	.word	0x0800bab8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800bab8 	.word	0x0800bab8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <ili9341_reset_ctrl_lines>:
 * ili9341_reset_ctrl_lines () - reset control lines, set them to input to allow auto-init
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_reset_ctrl_lines (void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

    GPIO_InitStructure.GPIO_Pin     =   GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                        GPIO_Pin_14 | GPIO_Pin_15;
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <ili9341_init_ctrl_lines>:
 * ili9341_init_ctrl_lines() - init control lines
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_init_ctrl_lines (void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
    // --------------------------------------------------------------------------------------------------------------------------------------
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource7, GPIO_AF_FSMC);
    */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <ili9341_init_fsmc>:
 * ili9341_init_fsmc () - init FSMC
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_init_fsmc (void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
    fsmc.FSMC_WriteTimingStruct         = &ftime;

    FSMC_NORSRAMInit(&fsmc);
    FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);
    */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <ili9341_soft_reset>:
 * ili9341_soft_reset () - software reset
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ili9341_soft_reset (void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
    ili9341_write_command (ILI9341_SOFT_RESET);
 80004e6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80004ea:	2201      	movs	r2, #1
 80004ec:	801a      	strh	r2, [r3, #0]
    HAL_Delay(10);
 80004ee:	200a      	movs	r0, #10
 80004f0:	f001 f8fa 	bl	80016e8 <HAL_Delay>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <ili9341_set_column_address>:
 * ili9341_set_column_address () - Set the column address
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ili9341_set_column_address (uint_fast16_t start_column_number, uint_fast16_t end_column_number)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
    ili9341_write_command (ILI9341_COLUMN_ADDRESS_SET);
 8000502:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000506:	222a      	movs	r2, #42	@ 0x2a
 8000508:	801a      	strh	r2, [r3, #0]
    ili9341_write_data (start_column_number >> 8);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	0a1a      	lsrs	r2, r3, #8
 800050e:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <ili9341_set_column_address+0x4c>)
 8000510:	b292      	uxth	r2, r2
 8000512:	801a      	strh	r2, [r3, #0]
    ili9341_write_data (start_column_number & 0xFF);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <ili9341_set_column_address+0x4c>)
 800051a:	b2d2      	uxtb	r2, r2
 800051c:	b292      	uxth	r2, r2
 800051e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data (end_column_number >> 8);
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	0a1a      	lsrs	r2, r3, #8
 8000524:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <ili9341_set_column_address+0x4c>)
 8000526:	b292      	uxth	r2, r2
 8000528:	801a      	strh	r2, [r3, #0]
    ili9341_write_data (end_column_number & 0xFF);
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	b29a      	uxth	r2, r3
 800052e:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <ili9341_set_column_address+0x4c>)
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	b292      	uxth	r2, r2
 8000534:	801a      	strh	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	60080000 	.word	0x60080000

08000548 <ili9341_set_page_address>:
 * ili9341_set_page_address () - Set the page address
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ili9341_set_page_address (uint_fast16_t start_page_row_number, uint_fast16_t end_page_row_number)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
    ili9341_write_command (ILI9341_PAGE_ADDRESS_SET);
 8000552:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000556:	222b      	movs	r2, #43	@ 0x2b
 8000558:	801a      	strh	r2, [r3, #0]
    ili9341_write_data (start_page_row_number >> 8);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	0a1a      	lsrs	r2, r3, #8
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <ili9341_set_page_address+0x4c>)
 8000560:	b292      	uxth	r2, r2
 8000562:	801a      	strh	r2, [r3, #0]
    ili9341_write_data (start_page_row_number & 0xFF);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <ili9341_set_page_address+0x4c>)
 800056a:	b2d2      	uxtb	r2, r2
 800056c:	b292      	uxth	r2, r2
 800056e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data (end_page_row_number >> 8);
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	0a1a      	lsrs	r2, r3, #8
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <ili9341_set_page_address+0x4c>)
 8000576:	b292      	uxth	r2, r2
 8000578:	801a      	strh	r2, [r3, #0]
    ili9341_write_data (end_page_row_number & 0xFF);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	b29a      	uxth	r2, r3
 800057e:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <ili9341_set_page_address+0x4c>)
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	b292      	uxth	r2, r2
 8000584:	801a      	strh	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	60080000 	.word	0x60080000

08000598 <ili9341_write_memory_start>:
 * to the ILI9341 starting at the location provided by set_column_address and set_page_address
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ili9341_write_memory_start (void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
    ili9341_write_command (ILI9341_MEMORY_WRITE);
 800059c:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80005a0:	222c      	movs	r2, #44	@ 0x2c
 80005a2:	801a      	strh	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <ili9341_powera>:
 * ili9341_powera ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_powera (void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_POWERA);
 80005b4:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80005b8:	22cb      	movs	r2, #203	@ 0xcb
 80005ba:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x39);
 80005bc:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <ili9341_powera+0x34>)
 80005be:	2239      	movs	r2, #57	@ 0x39
 80005c0:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x2C);
 80005c2:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <ili9341_powera+0x34>)
 80005c4:	222c      	movs	r2, #44	@ 0x2c
 80005c6:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <ili9341_powera+0x34>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x34);
 80005ce:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <ili9341_powera+0x34>)
 80005d0:	2234      	movs	r2, #52	@ 0x34
 80005d2:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x02);
 80005d4:	4b03      	ldr	r3, [pc, #12]	@ (80005e4 <ili9341_powera+0x34>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	801a      	strh	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	60080000 	.word	0x60080000

080005e8 <ili9341_powerb>:
 * ili9341_powerb ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_powerb (void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_POWERB);
 80005ec:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80005f0:	22cf      	movs	r2, #207	@ 0xcf
 80005f2:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <ili9341_powerb+0x28>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0xC1);
 80005fa:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <ili9341_powerb+0x28>)
 80005fc:	22c1      	movs	r2, #193	@ 0xc1
 80005fe:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x30);
 8000600:	4b03      	ldr	r3, [pc, #12]	@ (8000610 <ili9341_powerb+0x28>)
 8000602:	2230      	movs	r2, #48	@ 0x30
 8000604:	801a      	strh	r2, [r3, #0]
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	60080000 	.word	0x60080000

08000614 <ili9341_driver_timing_control_a>:
 * ili9341_driver_timing_control_a ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_driver_timing_control_a (void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_DRIVER_TIMING_CONTROL_A);
 8000618:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800061c:	22e8      	movs	r2, #232	@ 0xe8
 800061e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x85);
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <ili9341_driver_timing_control_a+0x28>)
 8000622:	2285      	movs	r2, #133	@ 0x85
 8000624:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <ili9341_driver_timing_control_a+0x28>)
 8000628:	2200      	movs	r2, #0
 800062a:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x78);
 800062c:	4b03      	ldr	r3, [pc, #12]	@ (800063c <ili9341_driver_timing_control_a+0x28>)
 800062e:	2278      	movs	r2, #120	@ 0x78
 8000630:	801a      	strh	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	60080000 	.word	0x60080000

08000640 <ili9341_driver_timing_control_b>:
 * ili9341_driver_timing_control_b ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_driver_timing_control_b (void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_DRIVER_TIMING_CONTROL_B);
 8000644:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000648:	22ea      	movs	r2, #234	@ 0xea
 800064a:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <ili9341_driver_timing_control_b+0x24>)
 800064e:	2200      	movs	r2, #0
 8000650:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 8000652:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <ili9341_driver_timing_control_b+0x24>)
 8000654:	2200      	movs	r2, #0
 8000656:	801a      	strh	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	60080000 	.word	0x60080000

08000668 <ili9341_power_on_sequence_control>:
 * ili9341_power_on_sequence_control ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_power_on_sequence_control (void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_POWER_ON_SEQUENCE_CONTROL);
 800066c:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000670:	22ed      	movs	r2, #237	@ 0xed
 8000672:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x64);
 8000674:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <ili9341_power_on_sequence_control+0x30>)
 8000676:	2264      	movs	r2, #100	@ 0x64
 8000678:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x03);
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <ili9341_power_on_sequence_control+0x30>)
 800067c:	2203      	movs	r2, #3
 800067e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x12);
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <ili9341_power_on_sequence_control+0x30>)
 8000682:	2212      	movs	r2, #18
 8000684:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x81);
 8000686:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <ili9341_power_on_sequence_control+0x30>)
 8000688:	2281      	movs	r2, #129	@ 0x81
 800068a:	801a      	strh	r2, [r3, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	60080000 	.word	0x60080000

0800069c <ili9341_pump_ration_control>:
 * ili9341_pump_ration_control ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_pump_ration_control (void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_PUMP_RATIO_CONTROL);
 80006a0:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80006a4:	22f7      	movs	r2, #247	@ 0xf7
 80006a6:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x20);
 80006a8:	4b03      	ldr	r3, [pc, #12]	@ (80006b8 <ili9341_pump_ration_control+0x1c>)
 80006aa:	2220      	movs	r2, #32
 80006ac:	801a      	strh	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	60080000 	.word	0x60080000

080006bc <ili9341_power_control_1>:
 * ili9341_power_control_1 ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_power_control_1 (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_POWER_CONTROL_1);
 80006c0:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80006c4:	22c0      	movs	r2, #192	@ 0xc0
 80006c6:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x23);
 80006c8:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <ili9341_power_control_1+0x1c>)
 80006ca:	2223      	movs	r2, #35	@ 0x23
 80006cc:	801a      	strh	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	60080000 	.word	0x60080000

080006dc <ili9341_power_control_2>:
 * ili9341_power_control_2 ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_power_control_2 (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_POWER_CONTROL_2);
 80006e0:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80006e4:	22c1      	movs	r2, #193	@ 0xc1
 80006e6:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x10);
 80006e8:	4b03      	ldr	r3, [pc, #12]	@ (80006f8 <ili9341_power_control_2+0x1c>)
 80006ea:	2210      	movs	r2, #16
 80006ec:	801a      	strh	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	60080000 	.word	0x60080000

080006fc <ili9341_vcom_control_1>:
 * ili9341_vcom_control_1 ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_vcom_control_1 (void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_VCOM_CONTROL_1);
 8000700:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000704:	22c5      	movs	r2, #197	@ 0xc5
 8000706:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x3E);
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <ili9341_vcom_control_1+0x24>)
 800070a:	223e      	movs	r2, #62	@ 0x3e
 800070c:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x28);
 800070e:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <ili9341_vcom_control_1+0x24>)
 8000710:	2228      	movs	r2, #40	@ 0x28
 8000712:	801a      	strh	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	60080000 	.word	0x60080000

08000724 <ili9341_vcom_control_2>:
 * ili9341_vcom_control_2 ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_vcom_control_2 (void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_VCOM_CONTROL_2);
 8000728:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800072c:	22c7      	movs	r2, #199	@ 0xc7
 800072e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x86);
 8000730:	4b03      	ldr	r3, [pc, #12]	@ (8000740 <ili9341_vcom_control_2+0x1c>)
 8000732:	2286      	movs	r2, #134	@ 0x86
 8000734:	801a      	strh	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	60080000 	.word	0x60080000

08000744 <ili9341_memory_access_control>:
#define ILI9341_MADCTL_FLIP_VERTICAL_ON         0x80
#define ILI9341_MADCTL_FLIP_VERTICAL_OFF        0x00

static void
ili9341_memory_access_control (void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
    uint8_t    madctl = 0x00;
 800074a:	2300      	movs	r3, #0
 800074c:	71fb      	strb	r3, [r7, #7]

    if (ili9341.flags & ILI9341_GLOBAL_FLAGS_RGB_ORDER)
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <ili9341_memory_access_control+0x80>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	2b00      	cmp	r3, #0
 8000758:	d103      	bne.n	8000762 <ili9341_memory_access_control+0x1e>
    {
        madctl |= ILI9341_MADCTL_ORDER_RGB;
    }
    else
    {
        madctl |= ILI9341_MADCTL_ORDER_BGR;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	71fb      	strb	r3, [r7, #7]
    }

    if (ili9341.flags & ILI9341_GLOBAL_FLAGS_ROW_COL_EXCHANGE)
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <ili9341_memory_access_control+0x80>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	2b00      	cmp	r3, #0
 800076c:	d003      	beq.n	8000776 <ili9341_memory_access_control+0x32>
    {
        madctl |= ILI9341_MADCTL_ROW_COL_EXCHANGE_ON;
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f043 0320 	orr.w	r3, r3, #32
 8000774:	71fb      	strb	r3, [r7, #7]
    else
    {
        madctl |= ILI9341_MADCTL_ROW_COL_EXCHANGE_OFF;
    }

    if (ili9341.flags & ILI9341_GLOBAL_FLAGS_FLIP_HORIZONTAL)
 8000776:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <ili9341_memory_access_control+0x80>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	2b00      	cmp	r3, #0
 8000780:	d103      	bne.n	800078a <ili9341_memory_access_control+0x46>
    {
        madctl |= ILI9341_MADCTL_FLIP_HORIZONTAL_OFF;                               // we use landscape as default
    }
    else
    {
        madctl |= ILI9341_MADCTL_FLIP_HORIZONTAL_ON;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000788:	71fb      	strb	r3, [r7, #7]
    }

    if (ili9341.flags & ILI9341_GLOBAL_FLAGS_FLIP_VERTICAL)
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <ili9341_memory_access_control+0x80>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	2b00      	cmp	r3, #0
 8000794:	d003      	beq.n	800079e <ili9341_memory_access_control+0x5a>
    {
        madctl |= ILI9341_MADCTL_FLIP_VERTICAL_ON;
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800079c:	71fb      	strb	r3, [r7, #7]
    else
    {
        madctl |= ILI9341_MADCTL_FLIP_VERTICAL_OFF;
    }

    ili9341_write_command(ILI9341_MEMORY_ACCESS_CONTROL);
 800079e:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80007a2:	2236      	movs	r2, #54	@ 0x36
 80007a4:	801a      	strh	r2, [r3, #0]
    ili9341_write_data (madctl);
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <ili9341_memory_access_control+0x84>)
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	b292      	uxth	r2, r2
 80007ac:	801a      	strh	r2, [r3, #0]
    ili9341_write_command(ILI9341_MEMORY_ACCESS_CONTROL);
 80007ae:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80007b2:	2236      	movs	r2, #54	@ 0x36
 80007b4:	801a      	strh	r2, [r3, #0]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000118 	.word	0x20000118
 80007c8:	60080000 	.word	0x60080000

080007cc <ili9341_colmod_pixel_format_set>:
 * ili9341_colmod_pixel_format_set ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_colmod_pixel_format_set (void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_COLMOD_PIXEL_FORMAT_SET);
 80007d0:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80007d4:	223a      	movs	r2, #58	@ 0x3a
 80007d6:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x55);                                                               // 16-bit interface & 16-bit format
 80007d8:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <ili9341_colmod_pixel_format_set+0x1c>)
 80007da:	2255      	movs	r2, #85	@ 0x55
 80007dc:	801a      	strh	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	60080000 	.word	0x60080000

080007ec <ili9341_frame_rate_control_in_normal_mode_full_colors>:
 * ili9341_frame_rate_control_in_normal_mode_full_colors ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_frame_rate_control_in_normal_mode_full_colors (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_FRAME_RATE_CONTROL_IN_NORMAL_MODE_FULL_COLORS);
 80007f0:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80007f4:	22b1      	movs	r2, #177	@ 0xb1
 80007f6:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <ili9341_frame_rate_control_in_normal_mode_full_colors+0x24>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x18);
 80007fe:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <ili9341_frame_rate_control_in_normal_mode_full_colors+0x24>)
 8000800:	2218      	movs	r2, #24
 8000802:	801a      	strh	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	60080000 	.word	0x60080000

08000814 <ili9341_display_function_control>:
 * ili9341_display_function_control ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_display_function_control (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_DISPLAY_FUNCTION_CONTROL);
 8000818:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800081c:	22b6      	movs	r2, #182	@ 0xb6
 800081e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x08);
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <ili9341_display_function_control+0x28>)
 8000822:	2208      	movs	r2, #8
 8000824:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x82);
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <ili9341_display_function_control+0x28>)
 8000828:	2282      	movs	r2, #130	@ 0x82
 800082a:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x27);
 800082c:	4b03      	ldr	r3, [pc, #12]	@ (800083c <ili9341_display_function_control+0x28>)
 800082e:	2227      	movs	r2, #39	@ 0x27
 8000830:	801a      	strh	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	60080000 	.word	0x60080000

08000840 <ili9341_enable_g3>:
 * ili9341_enable_g3 ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_enable_g3 (void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_ENABLE_G3);
 8000844:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000848:	22f2      	movs	r2, #242	@ 0xf2
 800084a:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 800084c:	4b03      	ldr	r3, [pc, #12]	@ (800085c <ili9341_enable_g3+0x1c>)
 800084e:	2200      	movs	r2, #0
 8000850:	801a      	strh	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	60080000 	.word	0x60080000

08000860 <ili9341_sleep_out>:
 * ili9341_sleep_out ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_sleep_out (void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_SLEEP_OUT);
 8000864:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000868:	2211      	movs	r2, #17
 800086a:	801a      	strh	r2, [r3, #0]
    HAL_Delay(10);
 800086c:	200a      	movs	r0, #10
 800086e:	f000 ff3b 	bl	80016e8 <HAL_Delay>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}

08000876 <ili9341_display_on>:
 * ili9341_display_on ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_display_on (void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_DISPLAY_ON);
 800087a:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800087e:	2229      	movs	r2, #41	@ 0x29
 8000880:	801a      	strh	r2, [r3, #0]
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <ili9341_init>:
 * ili9341_init ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ili9341_init (void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    ili9341.flags = 0;
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <ili9341_init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]

    ili9341_reset_ctrl_lines ();                                                            // control lines as input
 8000896:	f7ff fe0f 	bl	80004b8 <ili9341_reset_ctrl_lines>
    ili9341_init_ctrl_lines ();
 800089a:	f7ff fe14 	bl	80004c6 <ili9341_init_ctrl_lines>
    ili9341_init_fsmc ();
 800089e:	f7ff fe19 	bl	80004d4 <ili9341_init_fsmc>
    HAL_Delay(20);                                                                         // wait for display coming up
 80008a2:	2014      	movs	r0, #20
 80008a4:	f000 ff20 	bl	80016e8 <HAL_Delay>

    ili9341_soft_reset ();
 80008a8:	f7ff fe1b 	bl	80004e2 <ili9341_soft_reset>
    ili9341_powera ();
 80008ac:	f7ff fe80 	bl	80005b0 <ili9341_powera>
    ili9341_powerb ();
 80008b0:	f7ff fe9a 	bl	80005e8 <ili9341_powerb>
    ili9341_driver_timing_control_a ();
 80008b4:	f7ff feae 	bl	8000614 <ili9341_driver_timing_control_a>
    ili9341_driver_timing_control_b ();
 80008b8:	f7ff fec2 	bl	8000640 <ili9341_driver_timing_control_b>
    ili9341_power_on_sequence_control ();
 80008bc:	f7ff fed4 	bl	8000668 <ili9341_power_on_sequence_control>
    ili9341_pump_ration_control ();
 80008c0:	f7ff feec 	bl	800069c <ili9341_pump_ration_control>
    ili9341_power_control_1 ();
 80008c4:	f7ff fefa 	bl	80006bc <ili9341_power_control_1>
    ili9341_power_control_2 ();
 80008c8:	f7ff ff08 	bl	80006dc <ili9341_power_control_2>
    ili9341_vcom_control_1 ();
 80008cc:	f7ff ff16 	bl	80006fc <ili9341_vcom_control_1>
    ili9341_vcom_control_2 ();
 80008d0:	f7ff ff28 	bl	8000724 <ili9341_vcom_control_2>
    ili9341_memory_access_control ();
 80008d4:	f7ff ff36 	bl	8000744 <ili9341_memory_access_control>
    ili9341_colmod_pixel_format_set ();
 80008d8:	f7ff ff78 	bl	80007cc <ili9341_colmod_pixel_format_set>
    ili9341_frame_rate_control_in_normal_mode_full_colors ();
 80008dc:	f7ff ff86 	bl	80007ec <ili9341_frame_rate_control_in_normal_mode_full_colors>
    ili9341_display_function_control ();
 80008e0:	f7ff ff98 	bl	8000814 <ili9341_display_function_control>
    ili9341_enable_g3 ();
 80008e4:	f7ff ffac 	bl	8000840 <ili9341_enable_g3>
    ili9341_sleep_out ();
 80008e8:	f7ff ffba 	bl	8000860 <ili9341_sleep_out>
    ili9341_display_on ();
 80008ec:	f7ff ffc3 	bl	8000876 <ili9341_display_on>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000118 	.word	0x20000118

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f000 fe81 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f829 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f000 fa19 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 800090a:	f000 f9f7 	bl	8000cfc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800090e:	f00a fbb3 	bl	800b078 <MX_USB_DEVICE_Init>
  MX_FSMC_Init();
 8000912:	f000 fabd 	bl	8000e90 <MX_FSMC_Init>
  MX_RTC_Init();
 8000916:	f000 f89f 	bl	8000a58 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800091a:	f000 f937 	bl	8000b8c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800091e:	f000 f957 	bl	8000bd0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000922:	f000 f98b 	bl	8000c3c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000926:	f000 f9bf 	bl	8000ca8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800092a:	f008 fa05 	bl	8008d38 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 800092e:	f008 fbb9 	bl	80090a4 <MX_LIBJPEG_Init>
  MX_CRC_Init();
 8000932:	f000 f87d 	bl	8000a30 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  tft_init();
 8000936:	f000 fe35 	bl	80015a4 <tft_init>
  tft_fill_screen(0x0);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fe08 	bl	8001550 <tft_fill_screen>
  tft_fill_rectangle(20, 20, 40, 40, 0x5456);
 8000940:	f245 4356 	movw	r3, #21590	@ 0x5456
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2328      	movs	r3, #40	@ 0x28
 8000948:	2228      	movs	r2, #40	@ 0x28
 800094a:	2114      	movs	r1, #20
 800094c:	2014      	movs	r0, #20
 800094e:	f000 fdd1 	bl	80014f4 <tft_fill_rectangle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000952:	bf00      	nop
 8000954:	e7fd      	b.n	8000952 <main+0x5a>
	...

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	@ 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2230      	movs	r2, #48	@ 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f00b f87a 	bl	800ba60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b29      	ldr	r3, [pc, #164]	@ (8000a28 <SystemClock_Config+0xd0>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	4a28      	ldr	r2, [pc, #160]	@ (8000a28 <SystemClock_Config+0xd0>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	@ 0x40
 800098c:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <SystemClock_Config+0xd0>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <SystemClock_Config+0xd4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <SystemClock_Config+0xd4>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <SystemClock_Config+0xd4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009b4:	2309      	movs	r3, #9
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009be:	2301      	movs	r3, #1
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009cc:	2308      	movs	r3, #8
 80009ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009da:	2307      	movs	r3, #7
 80009dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fee4 	bl	80037b0 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009ee:	f000 faaf 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2302      	movs	r3, #2
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2105      	movs	r1, #5
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 f945 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a1c:	f000 fa98 	bl	8000f50 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3750      	adds	r7, #80	@ 0x50
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40007000 	.word	0x40007000

08000a30 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_CRC_Init+0x20>)
 8000a36:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <MX_CRC_Init+0x24>)
 8000a38:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_CRC_Init+0x20>)
 8000a3c:	f000 ff89 	bl	8001952 <HAL_CRC_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a46:	f000 fa83 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000011c 	.word	0x2000011c
 8000a54:	40023000 	.word	0x40023000

08000a58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b090      	sub	sp, #64	@ 0x40
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2228      	movs	r2, #40	@ 0x28
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f00a fff1 	bl	800ba60 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a7e:	4b41      	ldr	r3, [pc, #260]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000a80:	4a41      	ldr	r2, [pc, #260]	@ (8000b88 <MX_RTC_Init+0x130>)
 8000a82:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a84:	4b3f      	ldr	r3, [pc, #252]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000a8c:	227f      	movs	r2, #127	@ 0x7f
 8000a8e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a90:	4b3c      	ldr	r3, [pc, #240]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000a92:	22ff      	movs	r2, #255	@ 0xff
 8000a94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a96:	4b3b      	ldr	r3, [pc, #236]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a9c:	4b39      	ldr	r3, [pc, #228]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aa2:	4b38      	ldr	r3, [pc, #224]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aa8:	4836      	ldr	r0, [pc, #216]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000aaa:	f003 fbfb 	bl	80042a4 <HAL_RTC_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000ab4:	f000 fa4c 	bl	8000f50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ad2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	482a      	ldr	r0, [pc, #168]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000adc:	f003 fc65 	bl	80043aa <HAL_RTC_SetTime>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000ae6:	f000 fa33 	bl	8000f50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000af0:	2301      	movs	r3, #1
 8000af2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b06:	2201      	movs	r2, #1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481e      	ldr	r0, [pc, #120]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000b0c:	f003 fce7 	bl	80044de <HAL_RTC_SetDate>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000b16:	f000 fa1b 	bl	8000f50 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000b44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000b52:	f003 fd49 	bl	80045e8 <HAL_RTC_SetAlarm_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000b5c:	f000 f9f8 	bl	8000f50 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b66:	463b      	mov	r3, r7
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_RTC_Init+0x12c>)
 8000b6e:	f003 fd3b 	bl	80045e8 <HAL_RTC_SetAlarm_IT>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000b78:	f000 f9ea 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3740      	adds	r7, #64	@ 0x40
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000124 	.word	0x20000124
 8000b88:	40002800 	.word	0x40002800

08000b8c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b90:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <MX_SDIO_SD_Init+0x3c>)
 8000b92:	4a0e      	ldr	r2, [pc, #56]	@ (8000bcc <MX_SDIO_SD_Init+0x40>)
 8000b94:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_SDIO_SD_Init+0x3c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <MX_SDIO_SD_Init+0x3c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_SDIO_SD_Init+0x3c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <MX_SDIO_SD_Init+0x3c>)
 8000baa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bae:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <MX_SDIO_SD_Init+0x3c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000bb6:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <MX_SDIO_SD_Init+0x3c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000144 	.word	0x20000144
 8000bcc:	40012c00 	.word	0x40012c00

08000bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000bd6:	4a18      	ldr	r2, [pc, #96]	@ (8000c38 <MX_SPI1_Init+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_SPI1_Init+0x64>)
 8000c22:	f005 fb65 	bl	80062f0 <HAL_SPI_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c2c:	f000 f990 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000228 	.word	0x20000228
 8000c38:	40013000 	.word	0x40013000

08000c3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c42:	4a18      	ldr	r2, [pc, #96]	@ (8000ca4 <MX_SPI2_Init+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c86:	220a      	movs	r2, #10
 8000c88:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_SPI2_Init+0x64>)
 8000c8c:	f005 fb30 	bl	80062f0 <HAL_SPI_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8000c96:	f000 f95b 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000280 	.word	0x20000280
 8000ca4:	40003800 	.word	0x40003800

08000ca8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cac:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <MX_USART1_UART_Init+0x50>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000ce0:	f005 fbd7 	bl	8006492 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cea:	f000 f931 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200002d8 	.word	0x200002d8
 8000cf8:	40011000 	.word	0x40011000

08000cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_DMA_Init+0x3c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d38 <MX_DMA_Init+0x3c>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_DMA_Init+0x3c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	203b      	movs	r0, #59	@ 0x3b
 8000d24:	f000 fddf 	bl	80018e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d28:	203b      	movs	r0, #59	@ 0x3b
 8000d2a:	f000 fdf8 	bl	800191e <HAL_NVIC_EnableIRQ>

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	@ 0x30
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	4b4a      	ldr	r3, [pc, #296]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a49      	ldr	r2, [pc, #292]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b47      	ldr	r3, [pc, #284]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	61bb      	str	r3, [r7, #24]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	4b43      	ldr	r3, [pc, #268]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a42      	ldr	r2, [pc, #264]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b40      	ldr	r3, [pc, #256]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a3b      	ldr	r2, [pc, #236]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b39      	ldr	r3, [pc, #228]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b35      	ldr	r3, [pc, #212]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a34      	ldr	r2, [pc, #208]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b32      	ldr	r3, [pc, #200]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a2d      	ldr	r2, [pc, #180]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a26      	ldr	r2, [pc, #152]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <MX_GPIO_Init+0x144>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLASH_CS_Pin|NRF_CE_Pin|NRF_CS_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	21c1      	movs	r1, #193	@ 0xc1
 8000dfe:	4821      	ldr	r0, [pc, #132]	@ (8000e84 <MX_GPIO_Init+0x148>)
 8000e00:	f001 fa6c 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2102      	movs	r1, #2
 8000e08:	481e      	ldr	r0, [pc, #120]	@ (8000e84 <MX_GPIO_Init+0x148>)
 8000e0a:	f001 fa67 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000e0e:	2318      	movs	r3, #24
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4819      	ldr	r0, [pc, #100]	@ (8000e88 <MX_GPIO_Init+0x14c>)
 8000e22:	f001 f8bf 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 8000e26:	2320      	movs	r3, #32
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <MX_GPIO_Init+0x150>)
 8000e3c:	f001 f8b2 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin LCD_BL_Pin NRF_CE_Pin NRF_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_BL_Pin|NRF_CE_Pin|NRF_CS_Pin;
 8000e40:	23c3      	movs	r3, #195	@ 0xc3
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	480b      	ldr	r0, [pc, #44]	@ (8000e84 <MX_GPIO_Init+0x148>)
 8000e58:	f001 f8a4 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e62:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <MX_GPIO_Init+0x148>)
 8000e74:	f001 f896 	bl	8001fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	@ 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020400 	.word	0x40020400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40020800 	.word	0x40020800

08000e90 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ea8:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000eaa:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000eae:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000eb2:	4a26      	ldr	r2, [pc, #152]	@ (8000f4c <MX_FSMC_Init+0xbc>)
 8000eb4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000eb6:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000eca:	2210      	movs	r2, #16
 8000ecc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000ee8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eec:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000eee:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f10:	230f      	movs	r3, #15
 8000f12:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 13;
 8000f14:	230d      	movs	r3, #13
 8000f16:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f20:	2311      	movs	r3, #17
 8000f22:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <MX_FSMC_Init+0xb8>)
 8000f30:	f005 fa67 	bl	8006402 <HAL_SRAM_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000f3a:	f000 f809 	bl	8000f50 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000320 	.word	0x20000320
 8000f4c:	a0000104 	.word	0xa0000104

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <Error_Handler+0x8>

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <HAL_CRC_MspInit+0x3c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10d      	bne.n	8000fda <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <HAL_CRC_MspInit+0x40>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <HAL_CRC_MspInit+0x40>)
 8000fc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <HAL_CRC_MspInit+0x40>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023000 	.word	0x40023000
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a10      	ldr	r2, [pc, #64]	@ (800104c <HAL_RTC_MspInit+0x5c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d119      	bne.n	8001044 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001010:	2302      	movs	r3, #2
 8001012:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001018:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	4618      	mov	r0, r3
 8001020:	f003 f85e 	bl	80040e0 <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800102a:	f7ff ff91 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HAL_RTC_MspInit+0x60>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2029      	movs	r0, #41	@ 0x29
 800103a:	f000 fc54 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800103e:	2029      	movs	r0, #41	@ 0x29
 8001040:	f000 fc6d 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40002800 	.word	0x40002800
 8001050:	42470e3c 	.word	0x42470e3c

08001054 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a4d      	ldr	r2, [pc, #308]	@ (80011a8 <HAL_SD_MspInit+0x154>)
 8001072:	4293      	cmp	r3, r2
 8001074:	f040 8094 	bne.w	80011a0 <HAL_SD_MspInit+0x14c>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	4b4b      	ldr	r3, [pc, #300]	@ (80011ac <HAL_SD_MspInit+0x158>)
 800107e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001080:	4a4a      	ldr	r2, [pc, #296]	@ (80011ac <HAL_SD_MspInit+0x158>)
 8001082:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001086:	6453      	str	r3, [r2, #68]	@ 0x44
 8001088:	4b48      	ldr	r3, [pc, #288]	@ (80011ac <HAL_SD_MspInit+0x158>)
 800108a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	4b44      	ldr	r3, [pc, #272]	@ (80011ac <HAL_SD_MspInit+0x158>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	4a43      	ldr	r2, [pc, #268]	@ (80011ac <HAL_SD_MspInit+0x158>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a4:	4b41      	ldr	r3, [pc, #260]	@ (80011ac <HAL_SD_MspInit+0x158>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	4b3d      	ldr	r3, [pc, #244]	@ (80011ac <HAL_SD_MspInit+0x158>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b8:	4a3c      	ldr	r2, [pc, #240]	@ (80011ac <HAL_SD_MspInit+0x158>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c0:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <HAL_SD_MspInit+0x158>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010cc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80010d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80010de:	230c      	movs	r3, #12
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4831      	ldr	r0, [pc, #196]	@ (80011b0 <HAL_SD_MspInit+0x15c>)
 80010ea:	f000 ff5b 	bl	8001fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ee:	2304      	movs	r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80010fe:	230c      	movs	r3, #12
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	482a      	ldr	r0, [pc, #168]	@ (80011b4 <HAL_SD_MspInit+0x160>)
 800110a:	f000 ff4b 	bl	8001fa4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO Init */
    hdma_sdio.Instance = DMA2_Stream3;
 800110e:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 8001110:	4a2a      	ldr	r2, [pc, #168]	@ (80011bc <HAL_SD_MspInit+0x168>)
 8001112:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8001114:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 8001116:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800111a:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 800112a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800112e:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001130:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 8001132:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001136:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 800113a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800113e:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 8001142:	2220      	movs	r2, #32
 8001144:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 800114e:	2204      	movs	r2, #4
 8001150:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 8001154:	2203      	movs	r2, #3
 8001156:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 800115a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800115e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 8001162:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001166:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 8001168:	4813      	ldr	r0, [pc, #76]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 800116a:	f000 fc0f 	bl	800198c <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001174:	f7ff feec 	bl	8000f50 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 800117c:	641a      	str	r2, [r3, #64]	@ 0x40
 800117e:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 8001188:	63da      	str	r2, [r3, #60]	@ 0x3c
 800118a:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <HAL_SD_MspInit+0x164>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2031      	movs	r0, #49	@ 0x31
 8001196:	f000 fba6 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800119a:	2031      	movs	r0, #49	@ 0x31
 800119c:	f000 fbbf 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40012c00 	.word	0x40012c00
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	200001c8 	.word	0x200001c8
 80011bc:	40026458 	.word	0x40026458

080011c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a32      	ldr	r2, [pc, #200]	@ (80012a8 <HAL_SPI_MspInit+0xe8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d12c      	bne.n	800123c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a30      	ldr	r2, [pc, #192]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 80011ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b2e      	ldr	r3, [pc, #184]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	4b2a      	ldr	r3, [pc, #168]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a29      	ldr	r2, [pc, #164]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800121a:	2338      	movs	r3, #56	@ 0x38
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800122a:	2305      	movs	r3, #5
 800122c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	481e      	ldr	r0, [pc, #120]	@ (80012b0 <HAL_SPI_MspInit+0xf0>)
 8001236:	f000 feb5 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800123a:	e031      	b.n	80012a0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1c      	ldr	r2, [pc, #112]	@ (80012b4 <HAL_SPI_MspInit+0xf4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12c      	bne.n	80012a0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001254:	6413      	str	r3, [r2, #64]	@ 0x40
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_SPI_MspInit+0xec>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800127e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001290:	2305      	movs	r3, #5
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <HAL_SPI_MspInit+0xf0>)
 800129c:	f000 fe82 	bl	8001fa4 <HAL_GPIO_Init>
}
 80012a0:	bf00      	nop
 80012a2:	3730      	adds	r7, #48	@ 0x30
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40013000 	.word	0x40013000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40003800 	.word	0x40003800

080012b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	@ (800133c <HAL_UART_MspInit+0x84>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12c      	bne.n	8001334 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <HAL_UART_MspInit+0x88>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a17      	ldr	r2, [pc, #92]	@ (8001340 <HAL_UART_MspInit+0x88>)
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_UART_MspInit+0x88>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <HAL_UART_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a10      	ldr	r2, [pc, #64]	@ (8001340 <HAL_UART_MspInit+0x88>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <HAL_UART_MspInit+0x88>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001312:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001324:	2307      	movs	r3, #7
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <HAL_UART_MspInit+0x8c>)
 8001330:	f000 fe38 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40011000 	.word	0x40011000
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <HAL_FSMC_MspInit+0x88>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d131      	bne.n	80013c8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <HAL_FSMC_MspInit+0x88>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <HAL_FSMC_MspInit+0x8c>)
 8001370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001372:	4a18      	ldr	r2, [pc, #96]	@ (80013d4 <HAL_FSMC_MspInit+0x8c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6393      	str	r3, [r2, #56]	@ 0x38
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <HAL_FSMC_MspInit+0x8c>)
 800137c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001386:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800138a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001398:	230c      	movs	r3, #12
 800139a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <HAL_FSMC_MspInit+0x90>)
 80013a2:	f000 fdff 	bl	8001fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80013a6:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 80013aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013b8:	230c      	movs	r3, #12
 80013ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4806      	ldr	r0, [pc, #24]	@ (80013dc <HAL_FSMC_MspInit+0x94>)
 80013c2:	f000 fdef 	bl	8001fa4 <HAL_GPIO_Init>
 80013c6:	e000      	b.n	80013ca <HAL_FSMC_MspInit+0x82>
    return;
 80013c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000370 	.word	0x20000370
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40020c00 	.word	0x40020c00

080013e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013e8:	f7ff ffae 	bl	8001348 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <NMI_Handler+0x4>

080013fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <MemManage_Handler+0x4>

0800140c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <UsageFault_Handler+0x4>

0800141c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144a:	f000 f92d 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <RTC_Alarm_IRQHandler+0x10>)
 800145a:	f003 fa09 	bl	8004870 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000124 	.word	0x20000124

08001468 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <SDIO_IRQHandler+0x10>)
 800146e:	f003 ff1d 	bl	80052ac <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000144 	.word	0x20000144

0800147c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <DMA2_Stream3_IRQHandler+0x10>)
 8001482:	f000 fb53 	bl	8001b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200001c8 	.word	0x200001c8

08001490 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <OTG_FS_IRQHandler+0x10>)
 8001496:	f001 f87e 	bl	8002596 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000186c 	.word	0x2000186c

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <tft_set_area>:
 * tft_set_area ()  - set area
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
tft_set_area (uint_fast16_t x0, uint_fast16_t x1, uint_fast16_t y0, uint_fast16_t y1)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	603b      	str	r3, [r7, #0]
    ili9341_set_column_address (y0, y1);
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff f80d 	bl	80004f8 <ili9341_set_column_address>
    ili9341_set_page_address (x0, x1);
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f7ff f831 	bl	8000548 <ili9341_set_page_address>
    ili9341_write_memory_start ();
 80014e6:	f7ff f857 	bl	8000598 <ili9341_write_memory_start>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <tft_fill_rectangle>:
 * tft_fill_rectangle () - fill rectangle
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
tft_fill_rectangle (uint_fast16_t x0, uint_fast16_t y0, uint_fast16_t x1, uint_fast16_t y1, uint_fast16_t color565)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
    uint_fast16_t   n;
    uint_fast16_t   i;

    n = (x1 - x0 + 1) * (y1 - y0 + 1);
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	3301      	adds	r3, #1
 800150a:	6839      	ldr	r1, [r7, #0]
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	1a8a      	subs	r2, r1, r2
 8001510:	3201      	adds	r2, #1
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	613b      	str	r3, [r7, #16]

    tft_set_area (x0, x1, y0, y1);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff ffd2 	bl	80014c8 <tft_set_area>

    for (i = 0; i < n; i++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e006      	b.n	8001538 <tft_fill_rectangle+0x44>
    {
        tft_write_data (color565);
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <tft_fill_rectangle+0x58>)
 800152c:	6a3a      	ldr	r2, [r7, #32]
 800152e:	b292      	uxth	r2, r2
 8001530:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < n; i++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3f4      	bcc.n	800152a <tft_fill_rectangle+0x36>
    }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	60080000 	.word	0x60080000

08001550 <tft_fill_screen>:
 * tft_fill_screen () - clear total screen
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
tft_fill_screen (uint_fast16_t color565)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    unsigned int x, y;

    tft_set_area (0, TFT_WIDTH - 1 , 0, TFT_HEIGHT - 1);
 8001558:	23ef      	movs	r3, #239	@ 0xef
 800155a:	2200      	movs	r2, #0
 800155c:	f240 113f 	movw	r1, #319	@ 0x13f
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff ffb1 	bl	80014c8 <tft_set_area>

    for (x = 0; x < TFT_WIDTH; x++)
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e00f      	b.n	800158c <tft_fill_screen+0x3c>
    {
        for (y = 0; y < TFT_HEIGHT; y++)
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	e006      	b.n	8001580 <tft_fill_screen+0x30>
        {
            tft_write_data (color565);
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <tft_fill_screen+0x50>)
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	b292      	uxth	r2, r2
 8001578:	801a      	strh	r2, [r3, #0]
        for (y = 0; y < TFT_HEIGHT; y++)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3301      	adds	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2bef      	cmp	r3, #239	@ 0xef
 8001584:	d9f5      	bls.n	8001572 <tft_fill_screen+0x22>
    for (x = 0; x < TFT_WIDTH; x++)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3301      	adds	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001592:	d3eb      	bcc.n	800156c <tft_fill_screen+0x1c>
        }
    }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	60080000 	.word	0x60080000

080015a4 <tft_init>:
 * tft_init ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
tft_init (void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
    ili9341_init ();
 80015a8:	f7ff f970 	bl	800088c <ili9341_init>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015b4:	f7ff ff76 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b8:	480c      	ldr	r0, [pc, #48]	@ (80015ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ba:	490d      	ldr	r1, [pc, #52]	@ (80015f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d0:	4c0a      	ldr	r4, [pc, #40]	@ (80015fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015de:	f00a fa47 	bl	800ba70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e2:	f7ff f989 	bl	80008f8 <main>
  bx  lr    
 80015e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80015f4:	0800bb5c 	.word	0x0800bb5c
  ldr r2, =_sbss
 80015f8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80015fc:	20001f70 	.word	0x20001f70

08001600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC_IRQHandler>
	...

08001604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001608:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <HAL_Init+0x40>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <HAL_Init+0x40>)
 800161a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800161e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <HAL_Init+0x40>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f94f 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	200f      	movs	r0, #15
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fc90 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f967 	bl	800193a <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f92f 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000008 	.word	0x20000008
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000374 	.word	0x20000374

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	@ (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000374 	.word	0x20000374

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffee 	bl	80016d0 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffde 	bl	80016d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	@ (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	@ (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	@ (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	@ (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff29 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff3e 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff31 	bl	8001794 <__NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffa2 	bl	800188c <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e00e      	b.n	8001982 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	795b      	ldrb	r3, [r3, #5]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d105      	bne.n	800197a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff fb19 	bl	8000fac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff fe9a 	bl	80016d0 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e099      	b.n	8001adc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c8:	e00f      	b.n	80019ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ca:	f7ff fe81 	bl	80016d0 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d908      	bls.n	80019ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2220      	movs	r2, #32
 80019dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2203      	movs	r2, #3
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e078      	b.n	8001adc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e8      	bne.n	80019ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <HAL_DMA_Init+0x158>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d107      	bne.n	8001a54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f023 0307 	bic.w	r3, r3, #7
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d117      	bne.n	8001aae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00e      	beq.n	8001aae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fa0b 	bl	8001eac <DMA_CheckFifoParam>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2240      	movs	r2, #64	@ 0x40
 8001aa0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e016      	b.n	8001adc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f9c2 	bl	8001e40 <DMA_CalcBaseAndBitshift>
 8001abc:	4603      	mov	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac4:	223f      	movs	r2, #63	@ 0x3f
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	f010803f 	.word	0xf010803f

08001ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d004      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2280      	movs	r2, #128	@ 0x80
 8001b00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00c      	b.n	8001b20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2205      	movs	r2, #5
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0201 	bic.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b38:	4b8e      	ldr	r3, [pc, #568]	@ (8001d74 <HAL_DMA_IRQHandler+0x248>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a8e      	ldr	r2, [pc, #568]	@ (8001d78 <HAL_DMA_IRQHandler+0x24c>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b56:	2208      	movs	r2, #8
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01a      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0204 	bic.w	r2, r2, #4
 8001b7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b84:	2208      	movs	r2, #8
 8001b86:	409a      	lsls	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d012      	beq.n	8001bce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bba:	2201      	movs	r2, #1
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc6:	f043 0202 	orr.w	r2, r3, #2
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d012      	beq.n	8001c04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bfc:	f043 0204 	orr.w	r2, r3, #4
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	2210      	movs	r2, #16
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d043      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d03c      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c26:	2210      	movs	r2, #16
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d018      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d108      	bne.n	8001c5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d024      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
 8001c5a:	e01f      	b.n	8001c9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01b      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
 8001c6c:	e016      	b.n	8001c9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0208 	bic.w	r2, r2, #8
 8001c8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 808f 	beq.w	8001dcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8087 	beq.w	8001dcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d136      	bne.n	8001d44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0216 	bic.w	r2, r2, #22
 8001ce4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x1da>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0208 	bic.w	r2, r2, #8
 8001d14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1a:	223f      	movs	r2, #63	@ 0x3f
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d07e      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
        }
        return;
 8001d42:	e079      	b.n	8001e38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01d      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10d      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d031      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	4798      	blx	r3
 8001d70:	e02c      	b.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000
 8001d78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d023      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
 8001d8c:	e01e      	b.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10f      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0210 	bic.w	r2, r2, #16
 8001daa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d032      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d022      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2205      	movs	r2, #5
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d307      	bcc.n	8001e14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f2      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x2cc>
 8001e12:	e000      	b.n	8001e16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
 8001e36:	e000      	b.n	8001e3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e38:	bf00      	nop
    }
  }
}
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3b10      	subs	r3, #16
 8001e50:	4a14      	ldr	r2, [pc, #80]	@ (8001ea4 <DMA_CalcBaseAndBitshift+0x64>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ea8 <DMA_CalcBaseAndBitshift+0x68>)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d909      	bls.n	8001e82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	1d1a      	adds	r2, r3, #4
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e80:	e007      	b.n	8001e92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	aaaaaaab 	.word	0xaaaaaaab
 8001ea8:	0800bb30 	.word	0x0800bb30

08001eac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d11f      	bne.n	8001f06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d856      	bhi.n	8001f7a <DMA_CheckFifoParam+0xce>
 8001ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed4 <DMA_CheckFifoParam+0x28>)
 8001ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed2:	bf00      	nop
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001ef7 	.word	0x08001ef7
 8001edc:	08001ee5 	.word	0x08001ee5
 8001ee0:	08001f7b 	.word	0x08001f7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d046      	beq.n	8001f7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef4:	e043      	b.n	8001f7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001efe:	d140      	bne.n	8001f82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f04:	e03d      	b.n	8001f82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f0e:	d121      	bne.n	8001f54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d837      	bhi.n	8001f86 <DMA_CheckFifoParam+0xda>
 8001f16:	a201      	add	r2, pc, #4	@ (adr r2, 8001f1c <DMA_CheckFifoParam+0x70>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f33 	.word	0x08001f33
 8001f24:	08001f2d 	.word	0x08001f2d
 8001f28:	08001f45 	.word	0x08001f45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f30:	e030      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d025      	beq.n	8001f8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f42:	e022      	b.n	8001f8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f4c:	d11f      	bne.n	8001f8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f52:	e01c      	b.n	8001f8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d903      	bls.n	8001f62 <DMA_CheckFifoParam+0xb6>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d003      	beq.n	8001f68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f60:	e018      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
      break;
 8001f66:	e015      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
      break;
 8001f78:	e00b      	b.n	8001f92 <DMA_CheckFifoParam+0xe6>
      break;
 8001f7a:	bf00      	nop
 8001f7c:	e00a      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f7e:	bf00      	nop
 8001f80:	e008      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f82:	bf00      	nop
 8001f84:	e006      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f86:	bf00      	nop
 8001f88:	e004      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f8a:	bf00      	nop
 8001f8c:	e002      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f8e:	bf00      	nop
 8001f90:	e000      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f92:	bf00      	nop
    }
  } 
  
  return status; 
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	@ 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e16b      	b.n	8002298 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 815a 	bne.w	8002292 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d005      	beq.n	8001ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d130      	bne.n	8002058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 0201 	and.w	r2, r3, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b03      	cmp	r3, #3
 8002062:	d017      	beq.n	8002094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d123      	bne.n	80020e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80b4 	beq.w	8002292 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b60      	ldr	r3, [pc, #384]	@ (80022b0 <HAL_GPIO_Init+0x30c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	4a5f      	ldr	r2, [pc, #380]	@ (80022b0 <HAL_GPIO_Init+0x30c>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002138:	6453      	str	r3, [r2, #68]	@ 0x44
 800213a:	4b5d      	ldr	r3, [pc, #372]	@ (80022b0 <HAL_GPIO_Init+0x30c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002146:	4a5b      	ldr	r2, [pc, #364]	@ (80022b4 <HAL_GPIO_Init+0x310>)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a52      	ldr	r2, [pc, #328]	@ (80022b8 <HAL_GPIO_Init+0x314>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02b      	beq.n	80021ca <HAL_GPIO_Init+0x226>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a51      	ldr	r2, [pc, #324]	@ (80022bc <HAL_GPIO_Init+0x318>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d025      	beq.n	80021c6 <HAL_GPIO_Init+0x222>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a50      	ldr	r2, [pc, #320]	@ (80022c0 <HAL_GPIO_Init+0x31c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <HAL_GPIO_Init+0x21e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4f      	ldr	r2, [pc, #316]	@ (80022c4 <HAL_GPIO_Init+0x320>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x21a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4e      	ldr	r2, [pc, #312]	@ (80022c8 <HAL_GPIO_Init+0x324>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x216>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4d      	ldr	r2, [pc, #308]	@ (80022cc <HAL_GPIO_Init+0x328>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x212>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4c      	ldr	r2, [pc, #304]	@ (80022d0 <HAL_GPIO_Init+0x32c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x20e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4b      	ldr	r2, [pc, #300]	@ (80022d4 <HAL_GPIO_Init+0x330>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x20a>
 80021aa:	2307      	movs	r3, #7
 80021ac:	e00e      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021ae:	2308      	movs	r3, #8
 80021b0:	e00c      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e00a      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021b6:	2305      	movs	r3, #5
 80021b8:	e008      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021be:	2303      	movs	r3, #3
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021ca:	2300      	movs	r3, #0
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	f002 0203 	and.w	r2, r2, #3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4093      	lsls	r3, r2
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021dc:	4935      	ldr	r1, [pc, #212]	@ (80022b4 <HAL_GPIO_Init+0x310>)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b3b      	ldr	r3, [pc, #236]	@ (80022d8 <HAL_GPIO_Init+0x334>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a32      	ldr	r2, [pc, #200]	@ (80022d8 <HAL_GPIO_Init+0x334>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b30      	ldr	r3, [pc, #192]	@ (80022d8 <HAL_GPIO_Init+0x334>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a27      	ldr	r2, [pc, #156]	@ (80022d8 <HAL_GPIO_Init+0x334>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800223e:	4b26      	ldr	r3, [pc, #152]	@ (80022d8 <HAL_GPIO_Init+0x334>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002262:	4a1d      	ldr	r2, [pc, #116]	@ (80022d8 <HAL_GPIO_Init+0x334>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002268:	4b1b      	ldr	r3, [pc, #108]	@ (80022d8 <HAL_GPIO_Init+0x334>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800228c:	4a12      	ldr	r2, [pc, #72]	@ (80022d8 <HAL_GPIO_Init+0x334>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	f67f ae90 	bls.w	8001fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3724      	adds	r7, #36	@ 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021400 	.word	0x40021400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40021c00 	.word	0x40021c00
 80022d8:	40013c00 	.word	0x40013c00

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f8:	e003      	b.n	8002302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	041a      	lsls	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af02      	add	r7, sp, #8
 8002314:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e101      	b.n	8002524 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f009 f87c 	bl	800b438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2203      	movs	r2, #3
 8002344:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800234e:	d102      	bne.n	8002356 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f005 fac1 	bl	80078e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7c1a      	ldrb	r2, [r3, #16]
 8002368:	f88d 2000 	strb.w	r2, [sp]
 800236c:	3304      	adds	r3, #4
 800236e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002370:	f005 f9a0 	bl	80076b4 <USB_CoreInit>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0ce      	b.n	8002524 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f005 fab9 	bl	8007904 <USB_SetCurrentMode>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0bf      	b.n	8002524 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e04a      	b.n	8002440 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	3315      	adds	r3, #21
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	3314      	adds	r3, #20
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	b298      	uxth	r0, r3
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	332e      	adds	r3, #46	@ 0x2e
 80023e6:	4602      	mov	r2, r0
 80023e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3318      	adds	r3, #24
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	331c      	adds	r3, #28
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	3320      	adds	r3, #32
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	3324      	adds	r3, #36	@ 0x24
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	3301      	adds	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	791b      	ldrb	r3, [r3, #4]
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	429a      	cmp	r2, r3
 8002448:	d3af      	bcc.n	80023aa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e044      	b.n	80024da <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	3301      	adds	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d3b5      	bcc.n	8002450 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7c1a      	ldrb	r2, [r3, #16]
 80024ec:	f88d 2000 	strb.w	r2, [sp]
 80024f0:	3304      	adds	r3, #4
 80024f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f4:	f005 fa52 	bl	800799c <USB_DevInit>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e00c      	b.n	8002524 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f006 fa96 	bl	8008a4e <USB_DevDisconnect>

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_PCD_Start+0x1c>
 8002544:	2302      	movs	r3, #2
 8002546:	e022      	b.n	800258e <HAL_PCD_Start+0x62>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d009      	beq.n	8002570 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002568:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f005 f9a3 	bl	80078c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f006 fa44 	bl	8008a0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002596:	b590      	push	{r4, r7, lr}
 8002598:	b08d      	sub	sp, #52	@ 0x34
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f006 fb02 	bl	8008bb6 <USB_GetMode>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 848c 	bne.w	8002ed2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f006 fa66 	bl	8008a90 <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8482 	beq.w	8002ed0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f006 fa53 	bl	8008a90 <USB_ReadInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d107      	bne.n	8002604 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f002 0202 	and.w	r2, r2, #2
 8002602:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f006 fa41 	bl	8008a90 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b10      	cmp	r3, #16
 8002616:	d161      	bne.n	80026dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0210 	bic.w	r2, r2, #16
 8002626:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f003 020f 	and.w	r2, r3, #15
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	3304      	adds	r3, #4
 8002646:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	0c5b      	lsrs	r3, r3, #17
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	2b02      	cmp	r3, #2
 8002652:	d124      	bne.n	800269e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d035      	beq.n	80026cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800266a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	6a38      	ldr	r0, [r7, #32]
 8002674:	f006 f878 	bl	8008768 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002684:	441a      	add	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002696:	441a      	add	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	615a      	str	r2, [r3, #20]
 800269c:	e016      	b.n	80026cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	0c5b      	lsrs	r3, r3, #17
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d110      	bne.n	80026cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026b0:	2208      	movs	r2, #8
 80026b2:	4619      	mov	r1, r3
 80026b4:	6a38      	ldr	r0, [r7, #32]
 80026b6:	f006 f857 	bl	8008768 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c6:	441a      	add	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0210 	orr.w	r2, r2, #16
 80026da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f006 f9d5 	bl	8008a90 <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026f0:	f040 80a7 	bne.w	8002842 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f006 f9da 	bl	8008ab6 <USB_ReadDevAllOutEpInterrupt>
 8002702:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002704:	e099      	b.n	800283a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 808e 	beq.w	800282e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f006 f9fe 	bl	8008b1e <USB_ReadDevOutEPInterrupt>
 8002722:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800273a:	461a      	mov	r2, r3
 800273c:	2301      	movs	r3, #1
 800273e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002740:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fea2 	bl	800348c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275e:	461a      	mov	r2, r3
 8002760:	2308      	movs	r3, #8
 8002762:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 ff78 	bl	800365c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002782:	461a      	mov	r2, r3
 8002784:	2310      	movs	r3, #16
 8002786:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d030      	beq.n	80027f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279a:	2b80      	cmp	r3, #128	@ 0x80
 800279c:	d109      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	3304      	adds	r3, #4
 80027c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	78db      	ldrb	r3, [r3, #3]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d108      	bne.n	80027e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2200      	movs	r2, #0
 80027d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f008 ff31 	bl	800b644 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ee:	461a      	mov	r2, r3
 80027f0:	2302      	movs	r3, #2
 80027f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800280a:	461a      	mov	r2, r3
 800280c:	2320      	movs	r3, #32
 800280e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	4413      	add	r3, r2
 8002822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002826:	461a      	mov	r2, r3
 8002828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800282c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	3301      	adds	r3, #1
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800283a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f af62 	bne.w	8002706 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f006 f922 	bl	8008a90 <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002852:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002856:	f040 80db 	bne.w	8002a10 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f006 f943 	bl	8008aea <USB_ReadDevAllInEpInterrupt>
 8002864:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800286a:	e0cd      	b.n	8002a08 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80c2 	beq.w	80029fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f006 f969 	bl	8008b5a <USB_ReadDevInEPInterrupt>
 8002888:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d057      	beq.n	8002944 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	2201      	movs	r2, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69f9      	ldr	r1, [r7, #28]
 80028b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028b4:	4013      	ands	r3, r2
 80028b6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028c4:	461a      	mov	r2, r3
 80028c6:	2301      	movs	r3, #1
 80028c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	799b      	ldrb	r3, [r3, #6]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d132      	bne.n	8002938 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	3320      	adds	r3, #32
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4403      	add	r3, r0
 80028f2:	331c      	adds	r3, #28
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4419      	add	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4403      	add	r3, r0
 8002906:	3320      	adds	r3, #32
 8002908:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d113      	bne.n	8002938 <HAL_PCD_IRQHandler+0x3a2>
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3324      	adds	r3, #36	@ 0x24
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d108      	bne.n	8002938 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002930:	461a      	mov	r2, r3
 8002932:	2101      	movs	r1, #1
 8002934:	f006 f970 	bl	8008c18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	b2db      	uxtb	r3, r3
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f008 fdfb 	bl	800b53a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	4413      	add	r3, r2
 8002956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800295a:	461a      	mov	r2, r3
 800295c:	2308      	movs	r3, #8
 800295e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002976:	461a      	mov	r2, r3
 8002978:	2310      	movs	r3, #16
 800297a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002992:	461a      	mov	r2, r3
 8002994:	2340      	movs	r3, #64	@ 0x40
 8002996:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d023      	beq.n	80029ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029a4:	6a38      	ldr	r0, [r7, #32]
 80029a6:	f005 f95d 	bl	8007c64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	3310      	adds	r3, #16
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	3304      	adds	r3, #4
 80029bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	78db      	ldrb	r3, [r3, #3]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d108      	bne.n	80029d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2200      	movs	r2, #0
 80029ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f008 fe48 	bl	800b668 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029e4:	461a      	mov	r2, r3
 80029e6:	2302      	movs	r3, #2
 80029e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fcbb 	bl	8003372 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	3301      	adds	r3, #1
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f47f af2e 	bne.w	800286c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f006 f83b 	bl	8008a90 <USB_ReadInterrupts>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a24:	d122      	bne.n	8002a6c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d108      	bne.n	8002a56 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fea2 	bl	8003798 <HAL_PCDEx_LPM_Callback>
 8002a54:	e002      	b.n	8002a5c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f008 fde6 	bl	800b628 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f006 f80d 	bl	8008a90 <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a80:	d112      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d102      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f008 fda2 	bl	800b5dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002aa6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f005 ffef 	bl	8008a90 <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002abc:	f040 80b7 	bne.w	8002c2e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2110      	movs	r1, #16
 8002ada:	4618      	mov	r0, r3
 8002adc:	f005 f8c2 	bl	8007c64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae4:	e046      	b.n	8002b74 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af2:	461a      	mov	r2, r3
 8002af4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002af8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b0a:	0151      	lsls	r1, r2, #5
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	440a      	add	r2, r1
 8002b10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b26:	461a      	mov	r2, r3
 8002b28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b2c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b3e:	0151      	lsls	r1, r2, #5
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	440a      	add	r2, r1
 8002b44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b5e:	0151      	lsls	r1, r2, #5
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	440a      	add	r2, r1
 8002b64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b70:	3301      	adds	r3, #1
 8002b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	791b      	ldrb	r3, [r3, #4]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d3b2      	bcc.n	8002ae6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b8e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002b92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7bdb      	ldrb	r3, [r3, #15]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d016      	beq.n	8002bca <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bac:	f043 030b 	orr.w	r3, r3, #11
 8002bb0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bc2:	f043 030b 	orr.w	r3, r3, #11
 8002bc6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc8:	e015      	b.n	8002bf6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bdc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002be0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bf0:	f043 030b 	orr.w	r3, r3, #11
 8002bf4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c04:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f005 fffd 	bl	8008c18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f005 ff2c 	bl	8008a90 <USB_ReadInterrupts>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c42:	d123      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f005 ffc2 	bl	8008bd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f005 f87f 	bl	8007d56 <USB_GetDevSpeed>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681c      	ldr	r4, [r3, #0]
 8002c64:	f001 fa08 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 8002c68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4620      	mov	r0, r4
 8002c72:	f004 fd83 	bl	800777c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f008 fc87 	bl	800b58a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f005 fefd 	bl	8008a90 <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f008 fc64 	bl	800b56e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f002 0208 	and.w	r2, r2, #8
 8002cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f005 fee8 	bl	8008a90 <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc6:	2b80      	cmp	r3, #128	@ 0x80
 8002cc8:	d123      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cda:	e014      	b.n	8002d06 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fb08 	bl	8003310 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	3301      	adds	r3, #1
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	791b      	ldrb	r3, [r3, #4]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d3e4      	bcc.n	8002cdc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f005 feba 	bl	8008a90 <USB_ReadInterrupts>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d26:	d13c      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d28:	2301      	movs	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2c:	e02b      	b.n	8002d86 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3318      	adds	r3, #24
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d115      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	da12      	bge.n	8002d80 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3317      	adds	r3, #23
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fac8 	bl	8003310 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	3301      	adds	r3, #1
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d3cd      	bcc.n	8002d2e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f005 fe72 	bl	8008a90 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002db6:	d156      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002db8:	2301      	movs	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dbc:	e045      	b.n	8002e4a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d12e      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002de6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	da2b      	bge.n	8002e44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002df8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d121      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e40:	6053      	str	r3, [r2, #4]
            break;
 8002e42:	e008      	b.n	8002e56 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	3301      	adds	r3, #1
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	791b      	ldrb	r3, [r3, #4]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d3b3      	bcc.n	8002dbe <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f005 fe10 	bl	8008a90 <USB_ReadInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e7a:	d10a      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f008 fc05 	bl	800b68c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f005 fdfa 	bl	8008a90 <USB_ReadInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d115      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f008 fbf5 	bl	800b6a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	e000      	b.n	8002ed2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002ed0:	bf00      	nop
    }
  }
}
 8002ed2:	3734      	adds	r7, #52	@ 0x34
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}

08002ed8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_PCD_SetAddress+0x1a>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e012      	b.n	8002f18 <HAL_PCD_SetAddress+0x40>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f005 fd59 	bl	80089c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	4608      	mov	r0, r1
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	70fb      	strb	r3, [r7, #3]
 8002f32:	460b      	mov	r3, r1
 8002f34:	803b      	strh	r3, [r7, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da0f      	bge.n	8002f66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	f003 020f 	and.w	r2, r3, #15
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	3310      	adds	r3, #16
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	705a      	strb	r2, [r3, #1]
 8002f64:	e00f      	b.n	8002f86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f92:	883a      	ldrh	r2, [r7, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	78ba      	ldrb	r2, [r7, #2]
 8002f9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	785b      	ldrb	r3, [r3, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d004      	beq.n	8002fb0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fb0:	78bb      	ldrb	r3, [r7, #2]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d102      	bne.n	8002fbc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_PCD_EP_Open+0xaa>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e00e      	b.n	8002fe8 <HAL_PCD_EP_Open+0xc8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f004 fee1 	bl	8007da0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003000:	2b00      	cmp	r3, #0
 8003002:	da0f      	bge.n	8003024 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	f003 020f 	and.w	r2, r3, #15
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	3310      	adds	r3, #16
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	705a      	strb	r2, [r3, #1]
 8003022:	e00f      	b.n	8003044 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f003 020f 	and.w	r2, r3, #15
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	3304      	adds	r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_PCD_EP_Close+0x6e>
 800305a:	2302      	movs	r3, #2
 800305c:	e00e      	b.n	800307c <HAL_PCD_EP_Close+0x8c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	4618      	mov	r0, r3
 800306e:	f004 ff1f 	bl	8007eb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	460b      	mov	r3, r1
 8003092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	3304      	adds	r3, #4
 80030ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2200      	movs	r2, #0
 80030c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	799b      	ldrb	r3, [r3, #6]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d102      	bne.n	80030e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	799b      	ldrb	r3, [r3, #6]
 80030e8:	461a      	mov	r2, r3
 80030ea:	6979      	ldr	r1, [r7, #20]
 80030ec:	f004 ffbc 	bl	8008068 <USB_EPStartXfer>

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800311c:	681b      	ldr	r3, [r3, #0]
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	460b      	mov	r3, r1
 8003138:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313a:	7afb      	ldrb	r3, [r7, #11]
 800313c:	f003 020f 	and.w	r2, r3, #15
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	3310      	adds	r3, #16
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	3304      	adds	r3, #4
 8003150:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2200      	movs	r2, #0
 8003162:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2201      	movs	r2, #1
 8003168:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800316a:	7afb      	ldrb	r3, [r7, #11]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	b2da      	uxtb	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	799b      	ldrb	r3, [r3, #6]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	799b      	ldrb	r3, [r3, #6]
 800318c:	461a      	mov	r2, r3
 800318e:	6979      	ldr	r1, [r7, #20]
 8003190:	f004 ff6a 	bl	8008068 <USB_EPStartXfer>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	7912      	ldrb	r2, [r2, #4]
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e04f      	b.n	800325c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	da0f      	bge.n	80031e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	3310      	adds	r3, #16
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	3304      	adds	r3, #4
 80031da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	705a      	strb	r2, [r3, #1]
 80031e2:	e00d      	b.n	8003200 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	b2da      	uxtb	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_PCD_EP_SetStall+0x82>
 800321c:	2302      	movs	r3, #2
 800321e:	e01d      	b.n	800325c <HAL_PCD_EP_SetStall+0xbe>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68f9      	ldr	r1, [r7, #12]
 800322e:	4618      	mov	r0, r3
 8003230:	f005 faf2 	bl	8008818 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7999      	ldrb	r1, [r3, #6]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800324c:	461a      	mov	r2, r3
 800324e:	f005 fce3 	bl	8008c18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	7912      	ldrb	r2, [r2, #4]
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e042      	b.n	8003308 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003286:	2b00      	cmp	r3, #0
 8003288:	da0f      	bge.n	80032aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 020f 	and.w	r2, r3, #15
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	3310      	adds	r3, #16
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	705a      	strb	r2, [r3, #1]
 80032a8:	e00f      	b.n	80032ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_PCD_EP_ClrStall+0x86>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e00e      	b.n	8003308 <HAL_PCD_EP_ClrStall+0xa4>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f005 fafb 	bl	80088f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800331c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003320:	2b00      	cmp	r3, #0
 8003322:	da0c      	bge.n	800333e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 020f 	and.w	r2, r3, #15
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	3310      	adds	r3, #16
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3304      	adds	r3, #4
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	e00c      	b.n	8003358 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	3304      	adds	r3, #4
 8003356:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	4618      	mov	r0, r3
 8003360:	f005 f91a 	bl	8008598 <USB_EPStopXfer>
 8003364:	4603      	mov	r3, r0
 8003366:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003368:	7afb      	ldrb	r3, [r7, #11]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b08a      	sub	sp, #40	@ 0x28
 8003376:	af02      	add	r7, sp, #8
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	3310      	adds	r3, #16
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	3304      	adds	r3, #4
 8003398:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d901      	bls.n	80033aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e06b      	b.n	8003482 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d902      	bls.n	80033c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3303      	adds	r3, #3
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033ce:	e02a      	b.n	8003426 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d902      	bls.n	80033ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	3303      	adds	r3, #3
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	4603      	mov	r3, r0
 8003408:	6978      	ldr	r0, [r7, #20]
 800340a:	f005 f96f 	bl	80086ec <USB_WritePacket>

    ep->xfer_buff  += len;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	441a      	add	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	441a      	add	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	429a      	cmp	r2, r3
 800343a:	d809      	bhi.n	8003450 <PCD_WriteEmptyTxFifo+0xde>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003444:	429a      	cmp	r2, r3
 8003446:	d203      	bcs.n	8003450 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1bf      	bne.n	80033d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	429a      	cmp	r2, r3
 800345a:	d811      	bhi.n	8003480 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	2201      	movs	r2, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	43db      	mvns	r3, r3
 8003476:	6939      	ldr	r1, [r7, #16]
 8003478:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800347c:	4013      	ands	r3, r2
 800347e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	333c      	adds	r3, #60	@ 0x3c
 80034a4:	3304      	adds	r3, #4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	799b      	ldrb	r3, [r3, #6]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d17b      	bne.n	80035ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d015      	beq.n	80034f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	4a61      	ldr	r2, [pc, #388]	@ (8003654 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	f240 80b9 	bls.w	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80b3 	beq.w	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ee:	461a      	mov	r2, r3
 80034f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034f4:	6093      	str	r3, [r2, #8]
 80034f6:	e0a7      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800350e:	461a      	mov	r2, r3
 8003510:	2320      	movs	r3, #32
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	e098      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 8093 	bne.w	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	4a4b      	ldr	r2, [pc, #300]	@ (8003654 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d90f      	bls.n	800354a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003540:	461a      	mov	r2, r3
 8003542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003546:	6093      	str	r3, [r2, #8]
 8003548:	e07e      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	440b      	add	r3, r1
 800356c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003576:	1ad2      	subs	r2, r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d114      	bne.n	80035ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003594:	461a      	mov	r2, r3
 8003596:	2101      	movs	r1, #1
 8003598:	f005 fb3e 	bl	8008c18 <USB_EP0_OutStart>
 800359c:	e006      	b.n	80035ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	441a      	add	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	4619      	mov	r1, r3
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f007 ffa6 	bl	800b504 <HAL_PCD_DataOutStageCallback>
 80035b8:	e046      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	4a26      	ldr	r2, [pc, #152]	@ (8003658 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d124      	bne.n	800360c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d8:	461a      	mov	r2, r3
 80035da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035de:	6093      	str	r3, [r2, #8]
 80035e0:	e032      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	2320      	movs	r3, #32
 80035fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f007 ff7d 	bl	800b504 <HAL_PCD_DataOutStageCallback>
 800360a:	e01d      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d114      	bne.n	800363c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d108      	bne.n	800363c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003634:	461a      	mov	r2, r3
 8003636:	2100      	movs	r1, #0
 8003638:	f005 faee 	bl	8008c18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	4619      	mov	r1, r3
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f007 ff5e 	bl	800b504 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	4f54300a 	.word	0x4f54300a
 8003658:	4f54310a 	.word	0x4f54310a

0800365c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	333c      	adds	r3, #60	@ 0x3c
 8003674:	3304      	adds	r3, #4
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a15      	ldr	r2, [pc, #84]	@ (80036e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d90e      	bls.n	80036b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a8:	461a      	mov	r2, r3
 80036aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f007 ff15 	bl	800b4e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d90c      	bls.n	80036d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	799b      	ldrb	r3, [r3, #6]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d108      	bne.n	80036d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036d0:	461a      	mov	r2, r3
 80036d2:	2101      	movs	r1, #1
 80036d4:	f005 faa0 	bl	8008c18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	4f54300a 	.word	0x4f54300a

080036e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	70fb      	strb	r3, [r7, #3]
 80036f4:	4613      	mov	r3, r2
 80036f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d107      	bne.n	8003716 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003706:	883b      	ldrh	r3, [r7, #0]
 8003708:	0419      	lsls	r1, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	430a      	orrs	r2, r1
 8003712:	629a      	str	r2, [r3, #40]	@ 0x28
 8003714:	e028      	b.n	8003768 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4413      	add	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	e00d      	b.n	8003746 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	3340      	adds	r3, #64	@ 0x40
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4413      	add	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	3301      	adds	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	7bfa      	ldrb	r2, [r7, #15]
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	3b01      	subs	r3, #1
 800374c:	429a      	cmp	r2, r3
 800374e:	d3ec      	bcc.n	800372a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003750:	883b      	ldrh	r3, [r7, #0]
 8003752:	0418      	lsls	r0, r3, #16
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	3b01      	subs	r3, #1
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	4302      	orrs	r2, r0
 8003760:	3340      	adds	r3, #64	@ 0x40
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e267      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d075      	beq.n	80038ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ce:	4b88      	ldr	r3, [pc, #544]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d00c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037da:	4b85      	ldr	r3, [pc, #532]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d112      	bne.n	800380c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e6:	4b82      	ldr	r3, [pc, #520]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037f2:	d10b      	bne.n	800380c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f4:	4b7e      	ldr	r3, [pc, #504]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d05b      	beq.n	80038b8 <HAL_RCC_OscConfig+0x108>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d157      	bne.n	80038b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e242      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003814:	d106      	bne.n	8003824 <HAL_RCC_OscConfig+0x74>
 8003816:	4b76      	ldr	r3, [pc, #472]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a75      	ldr	r2, [pc, #468]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e01d      	b.n	8003860 <HAL_RCC_OscConfig+0xb0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0x98>
 800382e:	4b70      	ldr	r3, [pc, #448]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6f      	ldr	r2, [pc, #444]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b6d      	ldr	r3, [pc, #436]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6c      	ldr	r2, [pc, #432]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e00b      	b.n	8003860 <HAL_RCC_OscConfig+0xb0>
 8003848:	4b69      	ldr	r3, [pc, #420]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a68      	ldr	r2, [pc, #416]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800384e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b66      	ldr	r3, [pc, #408]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a65      	ldr	r2, [pc, #404]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800385a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fd ff32 	bl	80016d0 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003870:	f7fd ff2e 	bl	80016d0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e207      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	4b5b      	ldr	r3, [pc, #364]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0xc0>
 800388e:	e014      	b.n	80038ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fd ff1e 	bl	80016d0 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003898:	f7fd ff1a 	bl	80016d0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e1f3      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	4b51      	ldr	r3, [pc, #324]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0xe8>
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d063      	beq.n	800398e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038c6:	4b4a      	ldr	r3, [pc, #296]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d2:	4b47      	ldr	r3, [pc, #284]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d11c      	bne.n	8003918 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038de:	4b44      	ldr	r3, [pc, #272]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d116      	bne.n	8003918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ea:	4b41      	ldr	r3, [pc, #260]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_RCC_OscConfig+0x152>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e1c7      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003902:	4b3b      	ldr	r3, [pc, #236]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4937      	ldr	r1, [pc, #220]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	e03a      	b.n	800398e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003920:	4b34      	ldr	r3, [pc, #208]	@ (80039f4 <HAL_RCC_OscConfig+0x244>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fd fed3 	bl	80016d0 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392e:	f7fd fecf 	bl	80016d0 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1a8      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	4b2b      	ldr	r3, [pc, #172]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394c:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4925      	ldr	r1, [pc, #148]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
 8003960:	e015      	b.n	800398e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003962:	4b24      	ldr	r3, [pc, #144]	@ (80039f4 <HAL_RCC_OscConfig+0x244>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fd feb2 	bl	80016d0 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003970:	f7fd feae 	bl	80016d0 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e187      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d036      	beq.n	8003a08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a2:	4b15      	ldr	r3, [pc, #84]	@ (80039f8 <HAL_RCC_OscConfig+0x248>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fe92 	bl	80016d0 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b0:	f7fd fe8e 	bl	80016d0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e167      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80039c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x200>
 80039ce:	e01b      	b.n	8003a08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d0:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <HAL_RCC_OscConfig+0x248>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d6:	f7fd fe7b 	bl	80016d0 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	e00e      	b.n	80039fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039de:	f7fd fe77 	bl	80016d0 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d907      	bls.n	80039fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e150      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
 80039f0:	40023800 	.word	0x40023800
 80039f4:	42470000 	.word	0x42470000
 80039f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fc:	4b88      	ldr	r3, [pc, #544]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ea      	bne.n	80039de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8097 	beq.w	8003b44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1a:	4b81      	ldr	r3, [pc, #516]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10f      	bne.n	8003a46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a36:	4b7a      	ldr	r3, [pc, #488]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a42:	2301      	movs	r3, #1
 8003a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	4b77      	ldr	r3, [pc, #476]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d118      	bne.n	8003a84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a52:	4b74      	ldr	r3, [pc, #464]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a73      	ldr	r2, [pc, #460]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5e:	f7fd fe37 	bl	80016d0 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a66:	f7fd fe33 	bl	80016d0 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e10c      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	4b6a      	ldr	r3, [pc, #424]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCC_OscConfig+0x2ea>
 8003a8c:	4b64      	ldr	r3, [pc, #400]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a90:	4a63      	ldr	r2, [pc, #396]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a98:	e01c      	b.n	8003ad4 <HAL_RCC_OscConfig+0x324>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0x30c>
 8003aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	f043 0304 	orr.w	r3, r3, #4
 8003aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aae:	4b5c      	ldr	r3, [pc, #368]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x324>
 8003abc:	4b58      	ldr	r3, [pc, #352]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac0:	4a57      	ldr	r2, [pc, #348]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac8:	4b55      	ldr	r3, [pc, #340]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003acc:	4a54      	ldr	r2, [pc, #336]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ace:	f023 0304 	bic.w	r3, r3, #4
 8003ad2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fd fdf8 	bl	80016d0 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fd fdf4 	bl	80016d0 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0cb      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afa:	4b49      	ldr	r3, [pc, #292]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0ee      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x334>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b08:	f7fd fde2 	bl	80016d0 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fd fdde 	bl	80016d0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0b5      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b26:	4b3e      	ldr	r3, [pc, #248]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1ee      	bne.n	8003b10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d105      	bne.n	8003b44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b38:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	4a38      	ldr	r2, [pc, #224]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a1 	beq.w	8003c90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b4e:	4b34      	ldr	r3, [pc, #208]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d05c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d141      	bne.n	8003be6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b62:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <HAL_RCC_OscConfig+0x478>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd fdb2 	bl	80016d0 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd fdae 	bl	80016d0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e087      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	4b27      	ldr	r3, [pc, #156]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	019b      	lsls	r3, r3, #6
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	491b      	ldr	r1, [pc, #108]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <HAL_RCC_OscConfig+0x478>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fd fd87 	bl	80016d0 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7fd fd83 	bl	80016d0 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e05c      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd8:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x416>
 8003be4:	e054      	b.n	8003c90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <HAL_RCC_OscConfig+0x478>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fd fd70 	bl	80016d0 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fd fd6c 	bl	80016d0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e045      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x444>
 8003c12:	e03d      	b.n	8003c90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e038      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000
 8003c28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <HAL_RCC_OscConfig+0x4ec>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d028      	beq.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d121      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d11a      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d111      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	3b01      	subs	r3, #1
 8003c76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0cc      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b68      	ldr	r3, [pc, #416]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d90c      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b65      	ldr	r3, [pc, #404]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b63      	ldr	r3, [pc, #396]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b8      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf4:	4b59      	ldr	r3, [pc, #356]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d0c:	4b53      	ldr	r3, [pc, #332]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a52      	ldr	r2, [pc, #328]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b50      	ldr	r3, [pc, #320]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	494d      	ldr	r1, [pc, #308]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d044      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	4b47      	ldr	r3, [pc, #284]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d119      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d003      	beq.n	8003d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e06f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e067      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7e:	4b37      	ldr	r3, [pc, #220]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4934      	ldr	r1, [pc, #208]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d90:	f7fd fc9e 	bl	80016d0 <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d98:	f7fd fc9a 	bl	80016d0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e04f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	4b2b      	ldr	r3, [pc, #172]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 020c 	and.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d1eb      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d20c      	bcs.n	8003de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b20      	ldr	r3, [pc, #128]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e032      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df4:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4916      	ldr	r1, [pc, #88]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	490e      	ldr	r1, [pc, #56]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e26:	f000 f821 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	490a      	ldr	r1, [pc, #40]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003e38:	5ccb      	ldrb	r3, [r1, r3]
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fd fbfe 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023c00 	.word	0x40023c00
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	0800bb18 	.word	0x0800bb18
 8003e64:	20000000 	.word	0x20000000
 8003e68:	20000004 	.word	0x20000004

08003e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e70:	b094      	sub	sp, #80	@ 0x50
 8003e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e78:	2300      	movs	r3, #0
 8003e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e84:	4b79      	ldr	r3, [pc, #484]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d00d      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x40>
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	f200 80e1 	bhi.w	8004058 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e9e:	e0db      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b73      	ldr	r3, [pc, #460]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ea4:	e0db      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ea6:	4b73      	ldr	r3, [pc, #460]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eaa:	e0d8      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eac:	4b6f      	ldr	r3, [pc, #444]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d063      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	2200      	movs	r2, #0
 8003eca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ecc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ede:	4622      	mov	r2, r4
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	0159      	lsls	r1, r3, #5
 8003eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef0:	0150      	lsls	r0, r2, #5
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	1a51      	subs	r1, r2, r1
 8003efa:	6139      	str	r1, [r7, #16]
 8003efc:	4629      	mov	r1, r5
 8003efe:	eb63 0301 	sbc.w	r3, r3, r1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f10:	4659      	mov	r1, fp
 8003f12:	018b      	lsls	r3, r1, #6
 8003f14:	4651      	mov	r1, sl
 8003f16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f1a:	4651      	mov	r1, sl
 8003f1c:	018a      	lsls	r2, r1, #6
 8003f1e:	4651      	mov	r1, sl
 8003f20:	ebb2 0801 	subs.w	r8, r2, r1
 8003f24:	4659      	mov	r1, fp
 8003f26:	eb63 0901 	sbc.w	r9, r3, r1
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f3e:	4690      	mov	r8, r2
 8003f40:	4699      	mov	r9, r3
 8003f42:	4623      	mov	r3, r4
 8003f44:	eb18 0303 	adds.w	r3, r8, r3
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	eb49 0303 	adc.w	r3, r9, r3
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f5e:	4629      	mov	r1, r5
 8003f60:	024b      	lsls	r3, r1, #9
 8003f62:	4621      	mov	r1, r4
 8003f64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f68:	4621      	mov	r1, r4
 8003f6a:	024a      	lsls	r2, r1, #9
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f72:	2200      	movs	r2, #0
 8003f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f7c:	f7fc f924 	bl	80001c8 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f88:	e058      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8a:	4b38      	ldr	r3, [pc, #224]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	2200      	movs	r2, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	4611      	mov	r1, r2
 8003f96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f9a:	623b      	str	r3, [r7, #32]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	f04f 0000 	mov.w	r0, #0
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	0159      	lsls	r1, r3, #5
 8003fb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb6:	0150      	lsls	r0, r2, #5
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fdc:	ebb2 040a 	subs.w	r4, r2, sl
 8003fe0:	eb63 050b 	sbc.w	r5, r3, fp
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	00eb      	lsls	r3, r5, #3
 8003fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ff2:	00e2      	lsls	r2, r4, #3
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	4643      	mov	r3, r8
 8003ffa:	18e3      	adds	r3, r4, r3
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	464b      	mov	r3, r9
 8004000:	eb45 0303 	adc.w	r3, r5, r3
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004012:	4629      	mov	r1, r5
 8004014:	028b      	lsls	r3, r1, #10
 8004016:	4621      	mov	r1, r4
 8004018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800401c:	4621      	mov	r1, r4
 800401e:	028a      	lsls	r2, r1, #10
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004026:	2200      	movs	r2, #0
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	61fa      	str	r2, [r7, #28]
 800402c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004030:	f7fc f8ca 	bl	80001c8 <__aeabi_uldivmod>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4613      	mov	r3, r2
 800403a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	0c1b      	lsrs	r3, r3, #16
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	3301      	adds	r3, #1
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800404c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800404e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004056:	e002      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x204>)
 800405a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800405c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004060:	4618      	mov	r0, r3
 8004062:	3750      	adds	r7, #80	@ 0x50
 8004064:	46bd      	mov	sp, r7
 8004066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	00f42400 	.word	0x00f42400
 8004074:	007a1200 	.word	0x007a1200

08004078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800407c:	4b03      	ldr	r3, [pc, #12]	@ (800408c <HAL_RCC_GetHCLKFreq+0x14>)
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000000 	.word	0x20000000

08004090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004094:	f7ff fff0 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0a9b      	lsrs	r3, r3, #10
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	@ (80040b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	0800bb28 	.word	0x0800bb28

080040b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040bc:	f7ff ffdc 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0b5b      	lsrs	r3, r3, #13
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4903      	ldr	r1, [pc, #12]	@ (80040dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	0800bb28 	.word	0x0800bb28

080040e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004104:	2b00      	cmp	r3, #0
 8004106:	d035      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004108:	4b62      	ldr	r3, [pc, #392]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800410e:	f7fd fadf 	bl	80016d0 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004116:	f7fd fadb 	bl	80016d0 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e0b0      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004128:	4b5b      	ldr	r3, [pc, #364]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	019a      	lsls	r2, r3, #6
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	071b      	lsls	r3, r3, #28
 8004140:	4955      	ldr	r1, [pc, #340]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004148:	4b52      	ldr	r3, [pc, #328]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800414e:	f7fd fabf 	bl	80016d0 <HAL_GetTick>
 8004152:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004156:	f7fd fabb 	bl	80016d0 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e090      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004168:	4b4b      	ldr	r3, [pc, #300]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8083 	beq.w	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b44      	ldr	r3, [pc, #272]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	4a43      	ldr	r2, [pc, #268]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004190:	6413      	str	r3, [r2, #64]	@ 0x40
 8004192:	4b41      	ldr	r3, [pc, #260]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800419e:	4b3f      	ldr	r3, [pc, #252]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a3e      	ldr	r2, [pc, #248]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041aa:	f7fd fa91 	bl	80016d0 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041b2:	f7fd fa8d 	bl	80016d0 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e062      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041c4:	4b35      	ldr	r3, [pc, #212]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041d0:	4b31      	ldr	r3, [pc, #196]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d02f      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d028      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041f8:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041fe:	4b28      	ldr	r3, [pc, #160]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004204:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800420a:	4b23      	ldr	r3, [pc, #140]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d114      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004216:	f7fd fa5b 	bl	80016d0 <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421c:	e00a      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fd fa57 	bl	80016d0 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e02a      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	4b18      	ldr	r3, [pc, #96]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ee      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800424c:	d10d      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800424e:	4b12      	ldr	r3, [pc, #72]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800425e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004262:	490d      	ldr	r1, [pc, #52]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
 8004268:	e005      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800426a:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4a0a      	ldr	r2, [pc, #40]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004270:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004274:	6093      	str	r3, [r2, #8]
 8004276:	4b08      	ldr	r3, [pc, #32]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004278:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004282:	4905      	ldr	r1, [pc, #20]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	42470068 	.word	0x42470068
 8004298:	40023800 	.word	0x40023800
 800429c:	40007000 	.word	0x40007000
 80042a0:	42470e40 	.word	0x42470e40

080042a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e073      	b.n	80043a2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	7f5b      	ldrb	r3, [r3, #29]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fc fe90 	bl	8000ff0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d055      	beq.n	8004390 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	22ca      	movs	r2, #202	@ 0xca
 80042ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2253      	movs	r2, #83	@ 0x53
 80042f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fb31 	bl	800495c <RTC_EnterInitMode>
 80042fa:	4603      	mov	r3, r0
 80042fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d12c      	bne.n	800435e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004316:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6899      	ldr	r1, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68d2      	ldr	r2, [r2, #12]
 800433e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6919      	ldr	r1, [r3, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	041a      	lsls	r2, r3, #16
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fb38 	bl	80049ca <RTC_ExitInitMode>
 800435a:	4603      	mov	r3, r0
 800435c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d110      	bne.n	8004386 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	22ff      	movs	r2, #255	@ 0xff
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24
 800438e:	e001      	b.n	8004394 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043aa:	b590      	push	{r4, r7, lr}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	7f1b      	ldrb	r3, [r3, #28]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_RTC_SetTime+0x1c>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e087      	b.n	80044d6 <HAL_RTC_SetTime+0x12c>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2202      	movs	r2, #2
 80043d0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d126      	bne.n	8004426 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2200      	movs	r2, #0
 80043ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fb0f 	bl	8004a14 <RTC_ByteToBcd2>
 80043f6:	4603      	mov	r3, r0
 80043f8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fb08 	bl	8004a14 <RTC_ByteToBcd2>
 8004404:	4603      	mov	r3, r0
 8004406:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004408:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	789b      	ldrb	r3, [r3, #2]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fb00 	bl	8004a14 <RTC_ByteToBcd2>
 8004414:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004416:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	78db      	ldrb	r3, [r3, #3]
 800441e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e018      	b.n	8004458 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2200      	movs	r2, #0
 8004438:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004446:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800444c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	78db      	ldrb	r3, [r3, #3]
 8004452:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	22ca      	movs	r2, #202	@ 0xca
 800445e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2253      	movs	r2, #83	@ 0x53
 8004466:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fa77 	bl	800495c <RTC_EnterInitMode>
 800446e:	4603      	mov	r3, r0
 8004470:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d120      	bne.n	80044ba <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004482:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004486:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004496:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6899      	ldr	r1, [r3, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fa8a 	bl	80049ca <RTC_ExitInitMode>
 80044b6:	4603      	mov	r3, r0
 80044b8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80044ba:	7cfb      	ldrb	r3, [r7, #19]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	22ff      	movs	r2, #255	@ 0xff
 80044cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]

  return status;
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd90      	pop	{r4, r7, pc}

080044de <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044de:	b590      	push	{r4, r7, lr}
 80044e0:	b087      	sub	sp, #28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	7f1b      	ldrb	r3, [r3, #28]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_RTC_SetDate+0x1c>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e071      	b.n	80045de <HAL_RTC_SetDate+0x100>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2202      	movs	r2, #2
 8004504:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10e      	bne.n	800452a <HAL_RTC_SetDate+0x4c>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	f023 0310 	bic.w	r3, r3, #16
 8004520:	b2db      	uxtb	r3, r3
 8004522:	330a      	adds	r3, #10
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11c      	bne.n	800456a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	78db      	ldrb	r3, [r3, #3]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fa6d 	bl	8004a14 <RTC_ByteToBcd2>
 800453a:	4603      	mov	r3, r0
 800453c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fa66 	bl	8004a14 <RTC_ByteToBcd2>
 8004548:	4603      	mov	r3, r0
 800454a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800454c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	789b      	ldrb	r3, [r3, #2]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fa5e 	bl	8004a14 <RTC_ByteToBcd2>
 8004558:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800455a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e00e      	b.n	8004588 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	78db      	ldrb	r3, [r3, #3]
 800456e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004576:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800457c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	22ca      	movs	r2, #202	@ 0xca
 800458e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2253      	movs	r2, #83	@ 0x53
 8004596:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f9df 	bl	800495c <RTC_EnterInitMode>
 800459e:	4603      	mov	r3, r0
 80045a0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10c      	bne.n	80045c2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80045b6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fa06 	bl	80049ca <RTC_ExitInitMode>
 80045be:	4603      	mov	r3, r0
 80045c0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80045c2:	7cfb      	ldrb	r3, [r7, #19]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	22ff      	movs	r2, #255	@ 0xff
 80045d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]

  return status;
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd90      	pop	{r4, r7, pc}
	...

080045e8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b089      	sub	sp, #36	@ 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80045f4:	4b9b      	ldr	r3, [pc, #620]	@ (8004864 <HAL_RTC_SetAlarm_IT+0x27c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a9b      	ldr	r2, [pc, #620]	@ (8004868 <HAL_RTC_SetAlarm_IT+0x280>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	0adb      	lsrs	r3, r3, #11
 8004600:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	7f1b      	ldrb	r3, [r3, #28]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_RTC_SetAlarm_IT+0x36>
 800461a:	2302      	movs	r3, #2
 800461c:	e11e      	b.n	800485c <HAL_RTC_SetAlarm_IT+0x274>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2202      	movs	r2, #2
 8004628:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d137      	bne.n	80046a0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2200      	movs	r2, #0
 8004642:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 f9e3 	bl	8004a14 <RTC_ByteToBcd2>
 800464e:	4603      	mov	r3, r0
 8004650:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	785b      	ldrb	r3, [r3, #1]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f9dc 	bl	8004a14 <RTC_ByteToBcd2>
 800465c:	4603      	mov	r3, r0
 800465e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004660:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	789b      	ldrb	r3, [r3, #2]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f9d4 	bl	8004a14 <RTC_ByteToBcd2>
 800466c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800466e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	78db      	ldrb	r3, [r3, #3]
 8004676:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004678:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f9c6 	bl	8004a14 <RTC_ByteToBcd2>
 8004688:	4603      	mov	r3, r0
 800468a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800468c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004694:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800469a:	4313      	orrs	r3, r2
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e023      	b.n	80046e8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2200      	movs	r2, #0
 80046b2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80046c0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80046c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	78db      	ldrb	r3, [r3, #3]
 80046cc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80046ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80046d8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80046de:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	22ca      	movs	r2, #202	@ 0xca
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2253      	movs	r2, #83	@ 0x53
 8004702:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470c:	d142      	bne.n	8004794 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800471c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800472e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	3b01      	subs	r3, #1
 8004734:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	22ff      	movs	r2, #255	@ 0xff
 8004742:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2203      	movs	r2, #3
 8004748:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e083      	b.n	800485c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0e6      	beq.n	8004730 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004780:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004790:	609a      	str	r2, [r3, #8]
 8004792:	e04c      	b.n	800482e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80047a2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80047b4:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80047b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004864 <HAL_RTC_SetAlarm_IT+0x27c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004868 <HAL_RTC_SetAlarm_IT+0x280>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	0adb      	lsrs	r3, r3, #11
 80047c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	22ff      	movs	r2, #255	@ 0xff
 80047de:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2203      	movs	r2, #3
 80047e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e035      	b.n	800485c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0e6      	beq.n	80047cc <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800481c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800482c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800482e:	4b0f      	ldr	r3, [pc, #60]	@ (800486c <HAL_RTC_SetAlarm_IT+0x284>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a0e      	ldr	r2, [pc, #56]	@ (800486c <HAL_RTC_SetAlarm_IT+0x284>)
 8004834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004838:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800483a:	4b0c      	ldr	r3, [pc, #48]	@ (800486c <HAL_RTC_SetAlarm_IT+0x284>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4a0b      	ldr	r2, [pc, #44]	@ (800486c <HAL_RTC_SetAlarm_IT+0x284>)
 8004840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004844:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	22ff      	movs	r2, #255	@ 0xff
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3724      	adds	r7, #36	@ 0x24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd90      	pop	{r4, r7, pc}
 8004864:	20000000 	.word	0x20000000
 8004868:	10624dd3 	.word	0x10624dd3
 800486c:	40013c00 	.word	0x40013c00

08004870 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004878:	4b1f      	ldr	r3, [pc, #124]	@ (80048f8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800487a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800487e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80048ac:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f824 	bl	80048fc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d012      	beq.n	80048e8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80048e0:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f8b4 	bl	8004a50 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	775a      	strb	r2, [r3, #29]
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40013c00 	.word	0x40013c00

080048fc <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0d      	ldr	r2, [pc, #52]	@ (8004958 <HAL_RTC_WaitForSynchro+0x48>)
 8004922:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004924:	f7fc fed4 	bl	80016d0 <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800492a:	e009      	b.n	8004940 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800492c:	f7fc fed0 	bl	80016d0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800493a:	d901      	bls.n	8004940 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e007      	b.n	8004950 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ee      	beq.n	800492c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	00017f5f 	.word	0x00017f5f

0800495c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d122      	bne.n	80049c0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004988:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800498a:	f7fc fea1 	bl	80016d0 <HAL_GetTick>
 800498e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004990:	e00c      	b.n	80049ac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004992:	f7fc fe9d 	bl	80016d0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049a0:	d904      	bls.n	80049ac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2204      	movs	r2, #4
 80049a6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <RTC_EnterInitMode+0x64>
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d1e8      	bne.n	8004992 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ff8b 	bl	8004910 <HAL_RTC_WaitForSynchro>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2204      	movs	r2, #4
 8004a04:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004a22:	e005      	b.n	8004a30 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3301      	adds	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	3b0a      	subs	r3, #10
 8004a2e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	2b09      	cmp	r3, #9
 8004a34:	d8f6      	bhi.n	8004a24 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	b2db      	uxtb	r3, r3
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e022      	b.n	8004abc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d105      	bne.n	8004a8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fc fae3 	bl	8001054 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2203      	movs	r2, #3
 8004a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f814 	bl	8004ac4 <HAL_SD_InitCard>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e00a      	b.n	8004abc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004ac4:	b5b0      	push	{r4, r5, r7, lr}
 8004ac6:	b08e      	sub	sp, #56	@ 0x38
 8004ac8:	af04      	add	r7, sp, #16
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004ae0:	2376      	movs	r3, #118	@ 0x76
 8004ae2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681d      	ldr	r5, [r3, #0]
 8004ae8:	466c      	mov	r4, sp
 8004aea:	f107 0314 	add.w	r3, r7, #20
 8004aee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004af2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004af6:	f107 0308 	add.w	r3, r7, #8
 8004afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004afc:	4628      	mov	r0, r5
 8004afe:	f002 f865 	bl	8006bcc <SDIO_Init>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e04f      	b.n	8004bb4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004b14:	4b29      	ldr	r3, [pc, #164]	@ (8004bbc <HAL_SD_InitCard+0xf8>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f002 f89d 	bl	8006c5e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004b24:	4b25      	ldr	r3, [pc, #148]	@ (8004bbc <HAL_SD_InitCard+0xf8>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004b2a:	2002      	movs	r0, #2
 8004b2c:	f7fc fddc 	bl	80016e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f001 f911 	bl	8005d58 <SD_PowerON>
 8004b36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e02e      	b.n	8004bb4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 f830 	bl	8005bbc <SD_InitCard>
 8004b5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e01b      	b.n	8004bb4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004b84:	4618      	mov	r0, r3
 8004b86:	f002 f8fc 	bl	8006d82 <SDMMC_CmdBlockLength>
 8004b8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00f      	beq.n	8004bb2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc0 <HAL_SD_InitCard+0xfc>)
 8004b98:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3728      	adds	r7, #40	@ 0x28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bdb0      	pop	{r4, r5, r7, pc}
 8004bbc:	422580a0 	.word	0x422580a0
 8004bc0:	004005ff 	.word	0x004005ff

08004bc4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b092      	sub	sp, #72	@ 0x48
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004bd2:	f7fc fd7d 	bl	80016d0 <HAL_GetTick>
 8004bd6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d107      	bne.n	8004bf6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e1c5      	b.n	8004f82 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	f040 81b8 	bne.w	8004f74 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	441a      	add	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d907      	bls.n	8004c28 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e1ac      	b.n	8004f82 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2200      	movs	r2, #0
 8004c36:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d002      	beq.n	8004c46 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	025b      	lsls	r3, r3, #9
 8004c44:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c46:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	025b      	lsls	r3, r3, #9
 8004c50:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004c52:	2390      	movs	r3, #144	@ 0x90
 8004c54:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c56:	2302      	movs	r3, #2
 8004c58:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f107 0214 	add.w	r2, r7, #20
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f002 f85c 	bl	8006d2a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d90a      	bls.n	8004c8e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c84:	4618      	mov	r0, r3
 8004c86:	f002 f8c0 	bl	8006e0a <SDMMC_CmdReadMultiBlock>
 8004c8a:	6478      	str	r0, [r7, #68]	@ 0x44
 8004c8c:	e009      	b.n	8004ca2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f002 f893 	bl	8006dc6 <SDMMC_CmdReadSingleBlock>
 8004ca0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d012      	beq.n	8004cce <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a7e      	ldr	r2, [pc, #504]	@ (8004ea8 <HAL_SD_ReadBlocks+0x2e4>)
 8004cae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e159      	b.n	8004f82 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004cd2:	e061      	b.n	8004d98 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d03c      	beq.n	8004d5c <HAL_SD_ReadBlocks+0x198>
 8004ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d039      	beq.n	8004d5c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cec:	e033      	b.n	8004d56 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 ff95 	bl	8006c22 <SDIO_ReadFIFO>
 8004cf8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d04:	3301      	adds	r3, #1
 8004d06:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d16:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d20:	3b01      	subs	r3, #1
 8004d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d26:	0c1b      	lsrs	r3, r3, #16
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d2c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d30:	3301      	adds	r3, #1
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d36:	3b01      	subs	r3, #1
 8004d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3c:	0e1b      	lsrs	r3, r3, #24
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d42:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d46:	3301      	adds	r3, #1
 8004d48:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d52:	3301      	adds	r3, #1
 8004d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d58:	2b07      	cmp	r3, #7
 8004d5a:	d9c8      	bls.n	8004cee <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004d5c:	f7fc fcb8 	bl	80016d0 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d902      	bls.n	8004d72 <HAL_SD_ReadBlocks+0x1ae>
 8004d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d112      	bne.n	8004d98 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a4c      	ldr	r2, [pc, #304]	@ (8004ea8 <HAL_SD_ReadBlocks+0x2e4>)
 8004d78:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e0f4      	b.n	8004f82 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d9e:	f240 332a 	movw	r3, #810	@ 0x32a
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d095      	beq.n	8004cd4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d022      	beq.n	8004dfc <HAL_SD_ReadBlocks+0x238>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d91f      	bls.n	8004dfc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d01b      	beq.n	8004dfc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f002 f885 	bl	8006ed8 <SDMMC_CmdStopTransfer>
 8004dce:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d012      	beq.n	8004dfc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a33      	ldr	r2, [pc, #204]	@ (8004ea8 <HAL_SD_ReadBlocks+0x2e4>)
 8004ddc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004de4:	431a      	orrs	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0c2      	b.n	8004f82 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_SD_ReadBlocks+0x254>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d012      	beq.n	8004e3e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a22      	ldr	r2, [pc, #136]	@ (8004ea8 <HAL_SD_ReadBlocks+0x2e4>)
 8004e1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	f043 0208 	orr.w	r2, r3, #8
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e0a1      	b.n	8004f82 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d012      	beq.n	8004e72 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a15      	ldr	r2, [pc, #84]	@ (8004ea8 <HAL_SD_ReadBlocks+0x2e4>)
 8004e52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e58:	f043 0202 	orr.w	r2, r3, #2
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e087      	b.n	8004f82 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d064      	beq.n	8004f4a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a08      	ldr	r2, [pc, #32]	@ (8004ea8 <HAL_SD_ReadBlocks+0x2e4>)
 8004e86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e06d      	b.n	8004f82 <HAL_SD_ReadBlocks+0x3be>
 8004ea6:	bf00      	nop
 8004ea8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 feb6 	bl	8006c22 <SDIO_ReadFIFO>
 8004eb6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed8:	3301      	adds	r3, #1
 8004eda:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eee:	3301      	adds	r3, #1
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efa:	0e1b      	lsrs	r3, r3, #24
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f04:	3301      	adds	r3, #1
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004f0e:	f7fc fbdf 	bl	80016d0 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d902      	bls.n	8004f24 <HAL_SD_ReadBlocks+0x360>
 8004f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d112      	bne.n	8004f4a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a18      	ldr	r2, [pc, #96]	@ (8004f8c <HAL_SD_ReadBlocks+0x3c8>)
 8004f2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e01b      	b.n	8004f82 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_SD_ReadBlocks+0x39a>
 8004f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1a6      	bne.n	8004eac <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e006      	b.n	8004f82 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
  }
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3748      	adds	r7, #72	@ 0x48
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	004005ff 	.word	0x004005ff

08004f90 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b092      	sub	sp, #72	@ 0x48
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004f9e:	f7fc fb97 	bl	80016d0 <HAL_GetTick>
 8004fa2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d107      	bne.n	8004fc2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e16d      	b.n	800529e <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	f040 8160 	bne.w	8005290 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004fd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	441a      	add	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d907      	bls.n	8004ff4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e154      	b.n	800529e <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2200      	movs	r2, #0
 8005002:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005008:	2b01      	cmp	r3, #1
 800500a:	d002      	beq.n	8005012 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800500c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500e:	025b      	lsls	r3, r3, #9
 8005010:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005012:	f04f 33ff 	mov.w	r3, #4294967295
 8005016:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	025b      	lsls	r3, r3, #9
 800501c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800501e:	2390      	movs	r3, #144	@ 0x90
 8005020:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005026:	2300      	movs	r3, #0
 8005028:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800502a:	2301      	movs	r3, #1
 800502c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f107 0218 	add.w	r2, r7, #24
 8005036:	4611      	mov	r1, r2
 8005038:	4618      	mov	r0, r3
 800503a:	f001 fe76 	bl	8006d2a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d90a      	bls.n	800505a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005050:	4618      	mov	r0, r3
 8005052:	f001 ff1e 	bl	8006e92 <SDMMC_CmdWriteMultiBlock>
 8005056:	6478      	str	r0, [r7, #68]	@ 0x44
 8005058:	e009      	b.n	800506e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2210      	movs	r2, #16
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005066:	4618      	mov	r0, r3
 8005068:	f001 fef1 	bl	8006e4e <SDMMC_CmdWriteSingleBlock>
 800506c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800506e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005070:	2b00      	cmp	r3, #0
 8005072:	d012      	beq.n	800509a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a8b      	ldr	r2, [pc, #556]	@ (80052a8 <HAL_SD_WriteBlocks+0x318>)
 800507a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005082:	431a      	orrs	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e101      	b.n	800529e <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800509e:	e065      	b.n	800516c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d040      	beq.n	8005130 <HAL_SD_WriteBlocks+0x1a0>
 80050ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d03d      	beq.n	8005130 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80050b4:	2300      	movs	r3, #0
 80050b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80050b8:	e037      	b.n	800512a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80050ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80050c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c2:	3301      	adds	r3, #1
 80050c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80050c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c8:	3b01      	subs	r3, #1
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80050cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	021a      	lsls	r2, r3, #8
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80050d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050da:	3301      	adds	r3, #1
 80050dc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80050de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e0:	3b01      	subs	r3, #1
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80050e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	041a      	lsls	r2, r3, #16
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80050f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f2:	3301      	adds	r3, #1
 80050f4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80050f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f8:	3b01      	subs	r3, #1
 80050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80050fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	061a      	lsls	r2, r3, #24
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510a:	3301      	adds	r3, #1
 800510c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800510e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005110:	3b01      	subs	r3, #1
 8005112:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f107 0214 	add.w	r2, r7, #20
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f001 fd8c 	bl	8006c3c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005126:	3301      	adds	r3, #1
 8005128:	643b      	str	r3, [r7, #64]	@ 0x40
 800512a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800512c:	2b07      	cmp	r3, #7
 800512e:	d9c4      	bls.n	80050ba <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005130:	f7fc face 	bl	80016d0 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800513c:	429a      	cmp	r2, r3
 800513e:	d902      	bls.n	8005146 <HAL_SD_WriteBlocks+0x1b6>
 8005140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005142:	2b00      	cmp	r3, #0
 8005144:	d112      	bne.n	800516c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a57      	ldr	r2, [pc, #348]	@ (80052a8 <HAL_SD_WriteBlocks+0x318>)
 800514c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005154:	431a      	orrs	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e098      	b.n	800529e <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005172:	f240 331a 	movw	r3, #794	@ 0x31a
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d091      	beq.n	80050a0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005186:	2b00      	cmp	r3, #0
 8005188:	d022      	beq.n	80051d0 <HAL_SD_WriteBlocks+0x240>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d91f      	bls.n	80051d0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005194:	2b03      	cmp	r3, #3
 8005196:	d01b      	beq.n	80051d0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fe9b 	bl	8006ed8 <SDMMC_CmdStopTransfer>
 80051a2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80051a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d012      	beq.n	80051d0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a3e      	ldr	r2, [pc, #248]	@ (80052a8 <HAL_SD_WriteBlocks+0x318>)
 80051b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051b8:	431a      	orrs	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e066      	b.n	800529e <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_SD_WriteBlocks+0x25c>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d012      	beq.n	8005212 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a2d      	ldr	r2, [pc, #180]	@ (80052a8 <HAL_SD_WriteBlocks+0x318>)
 80051f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	f043 0208 	orr.w	r2, r3, #8
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e045      	b.n	800529e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d012      	beq.n	8005246 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a20      	ldr	r2, [pc, #128]	@ (80052a8 <HAL_SD_WriteBlocks+0x318>)
 8005226:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522c:	f043 0202 	orr.w	r2, r3, #2
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e02b      	b.n	800529e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d012      	beq.n	800527a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a13      	ldr	r2, [pc, #76]	@ (80052a8 <HAL_SD_WriteBlocks+0x318>)
 800525a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	f043 0210 	orr.w	r2, r3, #16
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e011      	b.n	800529e <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005282:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e006      	b.n	800529e <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005294:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
  }
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3748      	adds	r7, #72	@ 0x48
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	004005ff 	.word	0x004005ff

080052ac <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_SD_IRQHandler+0x2e>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 ff66 	bl	80061a4 <SD_Read_IT>
 80052d8:	e165      	b.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 808f 	beq.w	8005408 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052f2:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8005302:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8005306:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d039      	beq.n	8005396 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <HAL_SD_IRQHandler+0x8a>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d011      	beq.n	800535a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f001 fdcc 	bl	8006ed8 <SDMMC_CmdStopTransfer>
 8005340:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f92f 	bl	80055b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005362:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <HAL_SD_IRQHandler+0xda>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f003 fd7c 	bl	8008e84 <HAL_SD_RxCpltCallback>
 800538c:	e10b      	b.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f003 fd6e 	bl	8008e70 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005394:	e107      	b.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8102 	beq.w	80055a6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d011      	beq.n	80053d0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 fd91 	bl	8006ed8 <SDMMC_CmdStopTransfer>
 80053b6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8f4 	bl	80055b8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f040 80e5 	bne.w	80055a6 <HAL_SD_IRQHandler+0x2fa>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 80df 	bne.w	80055a6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0208 	bic.w	r2, r2, #8
 80053f6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f003 fd35 	bl	8008e70 <HAL_SD_TxCpltCallback>
}
 8005406:	e0ce      	b.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_SD_IRQHandler+0x17c>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 ff10 	bl	8006246 <SD_Write_IT>
 8005426:	e0be      	b.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800542e:	f240 233a 	movw	r3, #570	@ 0x23a
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80b6 	beq.w	80055a6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544c:	f043 0202 	orr.w	r2, r3, #2
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005466:	f043 0208 	orr.w	r2, r3, #8
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	f043 0220 	orr.w	r2, r3, #32
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	f043 0210 	orr.w	r2, r3, #16
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b4:	f043 0208 	orr.w	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f240 723a 	movw	r2, #1850	@ 0x73a
 80054c4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80054d4:	f023 0302 	bic.w	r3, r3, #2
 80054d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 fcfa 	bl	8006ed8 <SDMMC_CmdStopTransfer>
 80054e4:	4602      	mov	r2, r0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f855 	bl	80055b8 <HAL_SD_ErrorCallback>
}
 800550e:	e04a      	b.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005516:	2b00      	cmp	r3, #0
 8005518:	d045      	beq.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <HAL_SD_IRQHandler+0x282>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d011      	beq.n	8005552 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005532:	4a1f      	ldr	r2, [pc, #124]	@ (80055b0 <HAL_SD_IRQHandler+0x304>)
 8005534:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553a:	4618      	mov	r0, r3
 800553c:	f7fc fad4 	bl	8001ae8 <HAL_DMA_Abort_IT>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d02f      	beq.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fac8 	bl	8005ae0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005550:	e029      	b.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <HAL_SD_IRQHandler+0x2ba>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d011      	beq.n	800558a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	4a12      	ldr	r2, [pc, #72]	@ (80055b4 <HAL_SD_IRQHandler+0x308>)
 800556c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	4618      	mov	r0, r3
 8005574:	f7fc fab8 	bl	8001ae8 <HAL_DMA_Abort_IT>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d013      	beq.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fae3 	bl	8005b4e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005588:	e00d      	b.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f003 fc5c 	bl	8008e5c <HAL_SD_AbortCallback>
}
 80055a4:	e7ff      	b.n	80055a6 <HAL_SD_IRQHandler+0x2fa>
 80055a6:	bf00      	nop
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	08005ae1 	.word	0x08005ae1
 80055b4:	08005b4f 	.word	0x08005b4f

080055b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055da:	0f9b      	lsrs	r3, r3, #30
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055e6:	0e9b      	lsrs	r3, r3, #26
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055f8:	0e1b      	lsrs	r3, r3, #24
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	b2da      	uxtb	r2, r3
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800560a:	0c1b      	lsrs	r3, r3, #16
 800560c:	b2da      	uxtb	r2, r3
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	b2da      	uxtb	r2, r3
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005622:	b2da      	uxtb	r2, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800562c:	0d1b      	lsrs	r3, r3, #20
 800562e:	b29a      	uxth	r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005638:	0c1b      	lsrs	r3, r3, #16
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	b2da      	uxtb	r2, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800564a:	0bdb      	lsrs	r3, r3, #15
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	b2da      	uxtb	r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800565c:	0b9b      	lsrs	r3, r3, #14
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	b2da      	uxtb	r2, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800566e:	0b5b      	lsrs	r3, r3, #13
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005680:	0b1b      	lsrs	r3, r3, #12
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	b2da      	uxtb	r2, r3
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2200      	movs	r2, #0
 8005692:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005698:	2b00      	cmp	r3, #0
 800569a:	d163      	bne.n	8005764 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056a0:	009a      	lsls	r2, r3, #2
 80056a2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80056a6:	4013      	ands	r3, r2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80056ac:	0f92      	lsrs	r2, r2, #30
 80056ae:	431a      	orrs	r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b8:	0edb      	lsrs	r3, r3, #27
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ca:	0e1b      	lsrs	r3, r3, #24
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056dc:	0d5b      	lsrs	r3, r3, #21
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ee:	0c9b      	lsrs	r3, r3, #18
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005700:	0bdb      	lsrs	r3, r3, #15
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	b2da      	uxtb	r2, r3
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	7e1b      	ldrb	r3, [r3, #24]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	3302      	adds	r3, #2
 8005724:	2201      	movs	r2, #1
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800572e:	fb03 f202 	mul.w	r2, r3, r2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	7a1b      	ldrb	r3, [r3, #8]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	2201      	movs	r2, #1
 8005742:	409a      	lsls	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005750:	0a52      	lsrs	r2, r2, #9
 8005752:	fb03 f202 	mul.w	r2, r3, r2
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005760:	661a      	str	r2, [r3, #96]	@ 0x60
 8005762:	e031      	b.n	80057c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005768:	2b01      	cmp	r3, #1
 800576a:	d11d      	bne.n	80057a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	431a      	orrs	r2, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	3301      	adds	r3, #1
 8005788:	029a      	lsls	r2, r3, #10
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800579c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	661a      	str	r2, [r3, #96]	@ 0x60
 80057a6:	e00f      	b.n	80057c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a58      	ldr	r2, [pc, #352]	@ (8005910 <HAL_SD_GetCardCSD+0x344>)
 80057ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e09d      	b.n	8005904 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057cc:	0b9b      	lsrs	r3, r3, #14
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057de:	09db      	lsrs	r3, r3, #7
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005800:	0fdb      	lsrs	r3, r3, #31
 8005802:	b2da      	uxtb	r2, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580c:	0f5b      	lsrs	r3, r3, #29
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	b2da      	uxtb	r2, r3
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581e:	0e9b      	lsrs	r3, r3, #26
 8005820:	b2db      	uxtb	r3, r3
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	b2da      	uxtb	r2, r3
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005830:	0d9b      	lsrs	r3, r3, #22
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	b2da      	uxtb	r2, r3
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005842:	0d5b      	lsrs	r3, r3, #21
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	b2da      	uxtb	r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585e:	0c1b      	lsrs	r3, r3, #16
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	b2da      	uxtb	r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005872:	0bdb      	lsrs	r3, r3, #15
 8005874:	b2db      	uxtb	r3, r3
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	b2da      	uxtb	r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005886:	0b9b      	lsrs	r3, r3, #14
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	b2da      	uxtb	r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589a:	0b5b      	lsrs	r3, r3, #13
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ae:	0b1b      	lsrs	r3, r3, #12
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c2:	0a9b      	lsrs	r3, r3, #10
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d6:	0a1b      	lsrs	r3, r3, #8
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	004005ff 	.word	0x004005ff

08005914 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800596c:	b5b0      	push	{r4, r5, r7, lr}
 800596e:	b08e      	sub	sp, #56	@ 0x38
 8005970:	af04      	add	r7, sp, #16
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2203      	movs	r2, #3
 8005980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005988:	2b03      	cmp	r3, #3
 800598a:	d02e      	beq.n	80059ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005992:	d106      	bne.n	80059a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	639a      	str	r2, [r3, #56]	@ 0x38
 80059a0:	e029      	b.n	80059f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059a8:	d10a      	bne.n	80059c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa8a 	bl	8005ec4 <SD_WideBus_Enable>
 80059b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80059be:	e01a      	b.n	80059f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fac7 	bl	8005f5a <SD_WideBus_Disable>
 80059cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80059da:	e00c      	b.n	80059f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80059e8:	e005      	b.n	80059f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a26      	ldr	r2, [pc, #152]	@ (8005a9c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005a04:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005a14:	e01f      	b.n	8005a56 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681d      	ldr	r5, [r3, #0]
 8005a3c:	466c      	mov	r4, sp
 8005a3e:	f107 0314 	add.w	r3, r7, #20
 8005a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a4a:	f107 0308 	add.w	r3, r7, #8
 8005a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a50:	4628      	mov	r0, r5
 8005a52:	f001 f8bb 	bl	8006bcc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f98f 	bl	8006d82 <SDMMC_CmdBlockLength>
 8005a64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00c      	beq.n	8005a86 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a0a      	ldr	r2, [pc, #40]	@ (8005a9c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005a72:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3728      	adds	r7, #40	@ 0x28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bdb0      	pop	{r4, r5, r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	004005ff 	.word	0x004005ff

08005aa0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005aac:	f107 030c 	add.w	r3, r7, #12
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f9de 	bl	8005e74 <SD_SendStatus>
 8005ab8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	0a5b      	lsrs	r3, r3, #9
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005ad6:	693b      	ldr	r3, [r7, #16]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005af6:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff ffd1 	bl	8005aa0 <HAL_SD_GetCardState>
 8005afe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	d002      	beq.n	8005b1a <SD_DMATxAbort+0x3a>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b05      	cmp	r3, #5
 8005b18:	d10a      	bne.n	8005b30 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 f9da 	bl	8006ed8 <SDMMC_CmdStopTransfer>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d103      	bne.n	8005b40 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f003 f98f 	bl	8008e5c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005b3e:	e002      	b.n	8005b46 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7ff fd39 	bl	80055b8 <HAL_SD_ErrorCallback>
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005b64:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff ff9a 	bl	8005aa0 <HAL_SD_GetCardState>
 8005b6c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b06      	cmp	r3, #6
 8005b80:	d002      	beq.n	8005b88 <SD_DMARxAbort+0x3a>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b05      	cmp	r3, #5
 8005b86:	d10a      	bne.n	8005b9e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f001 f9a3 	bl	8006ed8 <SDMMC_CmdStopTransfer>
 8005b92:	4602      	mov	r2, r0
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f003 f958 	bl	8008e5c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005bac:	e002      	b.n	8005bb4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fd02 	bl	80055b8 <HAL_SD_ErrorCallback>
}
 8005bb4:	bf00      	nop
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005bbc:	b5b0      	push	{r4, r5, r7, lr}
 8005bbe:	b094      	sub	sp, #80	@ 0x50
 8005bc0:	af04      	add	r7, sp, #16
 8005bc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 f854 	bl	8006c7a <SDIO_GetPowerState>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005bd8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005bdc:	e0b8      	b.n	8005d50 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d02f      	beq.n	8005c46 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 fa7e 	bl	80070ec <SDMMC_CmdSendCID>
 8005bf0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <SD_InitCard+0x40>
    {
      return errorstate;
 8005bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bfa:	e0a9      	b.n	8005d50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 f87e 	bl	8006d04 <SDIO_GetResponse>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2104      	movs	r1, #4
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 f875 	bl	8006d04 <SDIO_GetResponse>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2108      	movs	r1, #8
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 f86c 	bl	8006d04 <SDIO_GetResponse>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	210c      	movs	r1, #12
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 f863 	bl	8006d04 <SDIO_GetResponse>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d00d      	beq.n	8005c6a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f107 020e 	add.w	r2, r7, #14
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 fa84 	bl	8007166 <SDMMC_CmdSetRelAdd>
 8005c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <SD_InitCard+0xae>
    {
      return errorstate;
 8005c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c68:	e072      	b.n	8005d50 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d036      	beq.n	8005ce0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005c72:	89fb      	ldrh	r3, [r7, #14]
 8005c74:	461a      	mov	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	4619      	mov	r1, r3
 8005c86:	4610      	mov	r0, r2
 8005c88:	f001 fa4e 	bl	8007128 <SDMMC_CmdSendCSD>
 8005c8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c96:	e05b      	b.n	8005d50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 f830 	bl	8006d04 <SDIO_GetResponse>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2104      	movs	r1, #4
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 f827 	bl	8006d04 <SDIO_GetResponse>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2108      	movs	r1, #8
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 f81e 	bl	8006d04 <SDIO_GetResponse>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	210c      	movs	r1, #12
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f001 f815 	bl	8006d04 <SDIO_GetResponse>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2104      	movs	r1, #4
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 f80c 	bl	8006d04 <SDIO_GetResponse>
 8005cec:	4603      	mov	r3, r0
 8005cee:	0d1a      	lsrs	r2, r3, #20
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005cf4:	f107 0310 	add.w	r3, r7, #16
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fc66 	bl	80055cc <HAL_SD_GetCardCSD>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005d0a:	e021      	b.n	8005d50 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6819      	ldr	r1, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	2200      	movs	r2, #0
 8005d18:	461c      	mov	r4, r3
 8005d1a:	4615      	mov	r5, r2
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	4608      	mov	r0, r1
 8005d22:	f001 f8fb 	bl	8006f1c <SDMMC_CmdSelDesel>
 8005d26:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <SD_InitCard+0x176>
  {
    return errorstate;
 8005d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d30:	e00e      	b.n	8005d50 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681d      	ldr	r5, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	466c      	mov	r4, sp
 8005d3a:	f103 0210 	add.w	r2, r3, #16
 8005d3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d44:	3304      	adds	r3, #4
 8005d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f000 ff3f 	bl	8006bcc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3740      	adds	r7, #64	@ 0x40
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bdb0      	pop	{r4, r5, r7, pc}

08005d58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 f8f6 	bl	8006f62 <SDMMC_CmdGoIdleState>
 8005d76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	e072      	b.n	8005e68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 f909 	bl	8006f9e <SDMMC_CmdOperCond>
 8005d8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00d      	beq.n	8005db0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f8df 	bl	8006f62 <SDMMC_CmdGoIdleState>
 8005da4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	e05b      	b.n	8005e68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d137      	bne.n	8005e2e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f001 f909 	bl	8006fdc <SDMMC_CmdAppCommand>
 8005dca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d02d      	beq.n	8005e2e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dd2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005dd6:	e047      	b.n	8005e68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 f8fc 	bl	8006fdc <SDMMC_CmdAppCommand>
 8005de4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <SD_PowerON+0x98>
    {
      return errorstate;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	e03b      	b.n	8005e68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	491e      	ldr	r1, [pc, #120]	@ (8005e70 <SD_PowerON+0x118>)
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 f912 	bl	8007020 <SDMMC_CmdAppOperCommand>
 8005dfc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005e08:	e02e      	b.n	8005e68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 ff77 	bl	8006d04 <SDIO_GetResponse>
 8005e16:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	0fdb      	lsrs	r3, r3, #31
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <SD_PowerON+0xcc>
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <SD_PowerON+0xce>
 8005e24:	2300      	movs	r3, #0
 8005e26:	613b      	str	r3, [r7, #16]

    count++;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d802      	bhi.n	8005e3e <SD_PowerON+0xe6>
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0cc      	beq.n	8005dd8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d902      	bls.n	8005e4e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e4c:	e00c      	b.n	8005e68 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005e5e:	e002      	b.n	8005e66 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	c1100000 	.word	0xc1100000

08005e74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d102      	bne.n	8005e8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e88:	e018      	b.n	8005ebc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f001 f986 	bl	80071a8 <SDMMC_CmdSendStatus>
 8005e9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	e009      	b.n	8005ebc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 ff28 	bl	8006d04 <SDIO_GetResponse>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 ff12 	bl	8006d04 <SDIO_GetResponse>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eea:	d102      	bne.n	8005ef2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005eec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ef0:	e02f      	b.n	8005f52 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005ef2:	f107 030c 	add.w	r3, r7, #12
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f879 	bl	8005ff0 <SD_FindSCR>
 8005efe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	e023      	b.n	8005f52 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01c      	beq.n	8005f4e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f1c:	041b      	lsls	r3, r3, #16
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f001 f85b 	bl	8006fdc <SDMMC_CmdAppCommand>
 8005f26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	e00f      	b.n	8005f52 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2102      	movs	r1, #2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f001 f894 	bl	8007066 <SDMMC_CmdBusWidth>
 8005f3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	e003      	b.n	8005f52 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e001      	b.n	8005f52 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b086      	sub	sp, #24
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	2300      	movs	r3, #0
 8005f68:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fec7 	bl	8006d04 <SDIO_GetResponse>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f80:	d102      	bne.n	8005f88 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005f82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f86:	e02f      	b.n	8005fe8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005f88:	f107 030c 	add.w	r3, r7, #12
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f82e 	bl	8005ff0 <SD_FindSCR>
 8005f94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	e023      	b.n	8005fe8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01c      	beq.n	8005fe4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb2:	041b      	lsls	r3, r3, #16
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f001 f810 	bl	8006fdc <SDMMC_CmdAppCommand>
 8005fbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	e00f      	b.n	8005fe8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 f849 	bl	8007066 <SDMMC_CmdBusWidth>
 8005fd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	e003      	b.n	8005fe8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e001      	b.n	8005fe8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005fe4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005ff0:	b590      	push	{r4, r7, lr}
 8005ff2:	b08f      	sub	sp, #60	@ 0x3c
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005ffa:	f7fb fb69 	bl	80016d0 <HAL_GetTick>
 8005ffe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006004:	2300      	movs	r3, #0
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2108      	movs	r1, #8
 8006016:	4618      	mov	r0, r3
 8006018:	f000 feb3 	bl	8006d82 <SDMMC_CmdBlockLength>
 800601c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800601e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	e0b9      	b.n	800619c <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006030:	041b      	lsls	r3, r3, #16
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f000 ffd1 	bl	8006fdc <SDMMC_CmdAppCommand>
 800603a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006044:	e0aa      	b.n	800619c <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006046:	f04f 33ff 	mov.w	r3, #4294967295
 800604a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800604c:	2308      	movs	r3, #8
 800604e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006050:	2330      	movs	r3, #48	@ 0x30
 8006052:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006054:	2302      	movs	r3, #2
 8006056:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006058:	2300      	movs	r3, #0
 800605a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800605c:	2301      	movs	r3, #1
 800605e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f107 0210 	add.w	r2, r7, #16
 8006068:	4611      	mov	r1, r2
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fe5d 	bl	8006d2a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f001 f818 	bl	80070aa <SDMMC_CmdSendSCR>
 800607a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	d02a      	beq.n	80060d8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	e08a      	b.n	800619c <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800608c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00f      	beq.n	80060b4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6819      	ldr	r1, [r3, #0]
 8006098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	f107 0208 	add.w	r2, r7, #8
 80060a0:	18d4      	adds	r4, r2, r3
 80060a2:	4608      	mov	r0, r1
 80060a4:	f000 fdbd 	bl	8006c22 <SDIO_ReadFIFO>
 80060a8:	4603      	mov	r3, r0
 80060aa:	6023      	str	r3, [r4, #0]
      index++;
 80060ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ae:	3301      	adds	r3, #1
 80060b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060b2:	e006      	b.n	80060c2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d012      	beq.n	80060e8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80060c2:	f7fb fb05 	bl	80016d0 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d102      	bne.n	80060d8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80060d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060d6:	e061      	b.n	800619c <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060de:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0cf      	beq.n	8006086 <SD_FindSCR+0x96>
 80060e6:	e000      	b.n	80060ea <SD_FindSCR+0xfa>
      break;
 80060e8:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <SD_FindSCR+0x116>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2208      	movs	r2, #8
 800610c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800610e:	2308      	movs	r3, #8
 8006110:	e044      	b.n	800619c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2202      	movs	r2, #2
 8006126:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006128:	2302      	movs	r3, #2
 800612a:	e037      	b.n	800619c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2220      	movs	r2, #32
 8006140:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006142:	2320      	movs	r3, #32
 8006144:	e02a      	b.n	800619c <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	061a      	lsls	r2, r3, #24
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800615c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006166:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	0e1b      	lsrs	r3, r3, #24
 800616c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	601a      	str	r2, [r3, #0]
    scr++;
 8006172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006174:	3304      	adds	r3, #4
 8006176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	061a      	lsls	r2, r3, #24
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006184:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800618e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	0e1b      	lsrs	r3, r3, #24
 8006194:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006198:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	373c      	adds	r7, #60	@ 0x3c
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd90      	pop	{r4, r7, pc}

080061a4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d03f      	beq.n	800623e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	e033      	b.n	800622c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fd2a 	bl	8006c22 <SDIO_ReadFIFO>
 80061ce:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3b01      	subs	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	0e1b      	lsrs	r3, r3, #24
 8006214:	b2da      	uxtb	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	701a      	strb	r2, [r3, #0]
      tmp++;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3301      	adds	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	3b01      	subs	r3, #1
 8006224:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	3301      	adds	r3, #1
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b07      	cmp	r3, #7
 8006230:	d9c8      	bls.n	80061c4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b086      	sub	sp, #24
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d043      	beq.n	80062e8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e037      	b.n	80062d6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3301      	adds	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	3b01      	subs	r3, #1
 8006276:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	021a      	lsls	r2, r3, #8
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4313      	orrs	r3, r2
 8006282:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3301      	adds	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3b01      	subs	r3, #1
 800628e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	041a      	lsls	r2, r3, #16
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4313      	orrs	r3, r2
 800629a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	061a      	lsls	r2, r3, #24
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	3b01      	subs	r3, #1
 80062be:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f107 0208 	add.w	r2, r7, #8
 80062c8:	4611      	mov	r1, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fcb6 	bl	8006c3c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	3301      	adds	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b07      	cmp	r3, #7
 80062da:	d9c4      	bls.n	8006266 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80062e8:	bf00      	nop
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e07b      	b.n	80063fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d108      	bne.n	800631c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006312:	d009      	beq.n	8006328 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	61da      	str	r2, [r3, #28]
 800631a:	e005      	b.n	8006328 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fa ff3c 	bl	80011c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800635e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006370:	431a      	orrs	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ac:	ea42 0103 	orr.w	r1, r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	0c1b      	lsrs	r3, r3, #16
 80063c6:	f003 0104 	and.w	r1, r3, #4
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	f003 0210 	and.w	r2, r3, #16
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e038      	b.n	800648a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7fa ffd7 	bl	80013e0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3308      	adds	r3, #8
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f000 faed 	bl	8006a1c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	461a      	mov	r2, r3
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	f000 fb4f 	bl	8006af0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6858      	ldr	r0, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	f000 fb7c 	bl	8006b5c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	6892      	ldr	r2, [r2, #8]
 800646c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	6892      	ldr	r2, [r2, #8]
 8006478:	f041 0101 	orr.w	r1, r1, #1
 800647c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e042      	b.n	800652a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d106      	bne.n	80064be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7fa fefd 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2224      	movs	r2, #36	@ 0x24
 80064c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f82c 	bl	8006534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691a      	ldr	r2, [r3, #16]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800650a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006538:	b0c0      	sub	sp, #256	@ 0x100
 800653a:	af00      	add	r7, sp, #0
 800653c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	68d9      	ldr	r1, [r3, #12]
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	ea40 0301 	orr.w	r3, r0, r1
 800655c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	431a      	orrs	r2, r3
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	431a      	orrs	r2, r3
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800658c:	f021 010c 	bic.w	r1, r1, #12
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800659a:	430b      	orrs	r3, r1
 800659c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ae:	6999      	ldr	r1, [r3, #24]
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	ea40 0301 	orr.w	r3, r0, r1
 80065ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b8f      	ldr	r3, [pc, #572]	@ (8006800 <UART_SetConfig+0x2cc>)
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d005      	beq.n	80065d4 <UART_SetConfig+0xa0>
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006804 <UART_SetConfig+0x2d0>)
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d104      	bne.n	80065de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065d4:	f7fd fd70 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 80065d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065dc:	e003      	b.n	80065e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065de:	f7fd fd57 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 80065e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f0:	f040 810c 	bne.w	800680c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006602:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006606:	4622      	mov	r2, r4
 8006608:	462b      	mov	r3, r5
 800660a:	1891      	adds	r1, r2, r2
 800660c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800660e:	415b      	adcs	r3, r3
 8006610:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006612:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006616:	4621      	mov	r1, r4
 8006618:	eb12 0801 	adds.w	r8, r2, r1
 800661c:	4629      	mov	r1, r5
 800661e:	eb43 0901 	adc.w	r9, r3, r1
 8006622:	f04f 0200 	mov.w	r2, #0
 8006626:	f04f 0300 	mov.w	r3, #0
 800662a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800662e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006636:	4690      	mov	r8, r2
 8006638:	4699      	mov	r9, r3
 800663a:	4623      	mov	r3, r4
 800663c:	eb18 0303 	adds.w	r3, r8, r3
 8006640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006644:	462b      	mov	r3, r5
 8006646:	eb49 0303 	adc.w	r3, r9, r3
 800664a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800665a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800665e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006662:	460b      	mov	r3, r1
 8006664:	18db      	adds	r3, r3, r3
 8006666:	653b      	str	r3, [r7, #80]	@ 0x50
 8006668:	4613      	mov	r3, r2
 800666a:	eb42 0303 	adc.w	r3, r2, r3
 800666e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006670:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006674:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006678:	f7f9 fda6 	bl	80001c8 <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4b61      	ldr	r3, [pc, #388]	@ (8006808 <UART_SetConfig+0x2d4>)
 8006682:	fba3 2302 	umull	r2, r3, r3, r2
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	011c      	lsls	r4, r3, #4
 800668a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800668e:	2200      	movs	r2, #0
 8006690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006694:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006698:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800669c:	4642      	mov	r2, r8
 800669e:	464b      	mov	r3, r9
 80066a0:	1891      	adds	r1, r2, r2
 80066a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066a4:	415b      	adcs	r3, r3
 80066a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066ac:	4641      	mov	r1, r8
 80066ae:	eb12 0a01 	adds.w	sl, r2, r1
 80066b2:	4649      	mov	r1, r9
 80066b4:	eb43 0b01 	adc.w	fp, r3, r1
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066cc:	4692      	mov	sl, r2
 80066ce:	469b      	mov	fp, r3
 80066d0:	4643      	mov	r3, r8
 80066d2:	eb1a 0303 	adds.w	r3, sl, r3
 80066d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066da:	464b      	mov	r3, r9
 80066dc:	eb4b 0303 	adc.w	r3, fp, r3
 80066e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066f8:	460b      	mov	r3, r1
 80066fa:	18db      	adds	r3, r3, r3
 80066fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80066fe:	4613      	mov	r3, r2
 8006700:	eb42 0303 	adc.w	r3, r2, r3
 8006704:	647b      	str	r3, [r7, #68]	@ 0x44
 8006706:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800670a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800670e:	f7f9 fd5b 	bl	80001c8 <__aeabi_uldivmod>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4611      	mov	r1, r2
 8006718:	4b3b      	ldr	r3, [pc, #236]	@ (8006808 <UART_SetConfig+0x2d4>)
 800671a:	fba3 2301 	umull	r2, r3, r3, r1
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	2264      	movs	r2, #100	@ 0x64
 8006722:	fb02 f303 	mul.w	r3, r2, r3
 8006726:	1acb      	subs	r3, r1, r3
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800672e:	4b36      	ldr	r3, [pc, #216]	@ (8006808 <UART_SetConfig+0x2d4>)
 8006730:	fba3 2302 	umull	r2, r3, r3, r2
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800673c:	441c      	add	r4, r3
 800673e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006742:	2200      	movs	r2, #0
 8006744:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006748:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800674c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	1891      	adds	r1, r2, r2
 8006756:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006758:	415b      	adcs	r3, r3
 800675a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800675c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006760:	4641      	mov	r1, r8
 8006762:	1851      	adds	r1, r2, r1
 8006764:	6339      	str	r1, [r7, #48]	@ 0x30
 8006766:	4649      	mov	r1, r9
 8006768:	414b      	adcs	r3, r1
 800676a:	637b      	str	r3, [r7, #52]	@ 0x34
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006778:	4659      	mov	r1, fp
 800677a:	00cb      	lsls	r3, r1, #3
 800677c:	4651      	mov	r1, sl
 800677e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006782:	4651      	mov	r1, sl
 8006784:	00ca      	lsls	r2, r1, #3
 8006786:	4610      	mov	r0, r2
 8006788:	4619      	mov	r1, r3
 800678a:	4603      	mov	r3, r0
 800678c:	4642      	mov	r2, r8
 800678e:	189b      	adds	r3, r3, r2
 8006790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006794:	464b      	mov	r3, r9
 8006796:	460a      	mov	r2, r1
 8006798:	eb42 0303 	adc.w	r3, r2, r3
 800679c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067b4:	460b      	mov	r3, r1
 80067b6:	18db      	adds	r3, r3, r3
 80067b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ba:	4613      	mov	r3, r2
 80067bc:	eb42 0303 	adc.w	r3, r2, r3
 80067c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067ca:	f7f9 fcfd 	bl	80001c8 <__aeabi_uldivmod>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <UART_SetConfig+0x2d4>)
 80067d4:	fba3 1302 	umull	r1, r3, r3, r2
 80067d8:	095b      	lsrs	r3, r3, #5
 80067da:	2164      	movs	r1, #100	@ 0x64
 80067dc:	fb01 f303 	mul.w	r3, r1, r3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	3332      	adds	r3, #50	@ 0x32
 80067e6:	4a08      	ldr	r2, [pc, #32]	@ (8006808 <UART_SetConfig+0x2d4>)
 80067e8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	f003 0207 	and.w	r2, r3, #7
 80067f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4422      	add	r2, r4
 80067fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067fc:	e106      	b.n	8006a0c <UART_SetConfig+0x4d8>
 80067fe:	bf00      	nop
 8006800:	40011000 	.word	0x40011000
 8006804:	40011400 	.word	0x40011400
 8006808:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800680c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006810:	2200      	movs	r2, #0
 8006812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006816:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800681a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800681e:	4642      	mov	r2, r8
 8006820:	464b      	mov	r3, r9
 8006822:	1891      	adds	r1, r2, r2
 8006824:	6239      	str	r1, [r7, #32]
 8006826:	415b      	adcs	r3, r3
 8006828:	627b      	str	r3, [r7, #36]	@ 0x24
 800682a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800682e:	4641      	mov	r1, r8
 8006830:	1854      	adds	r4, r2, r1
 8006832:	4649      	mov	r1, r9
 8006834:	eb43 0501 	adc.w	r5, r3, r1
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	00eb      	lsls	r3, r5, #3
 8006842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006846:	00e2      	lsls	r2, r4, #3
 8006848:	4614      	mov	r4, r2
 800684a:	461d      	mov	r5, r3
 800684c:	4643      	mov	r3, r8
 800684e:	18e3      	adds	r3, r4, r3
 8006850:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006854:	464b      	mov	r3, r9
 8006856:	eb45 0303 	adc.w	r3, r5, r3
 800685a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800685e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800686a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800687a:	4629      	mov	r1, r5
 800687c:	008b      	lsls	r3, r1, #2
 800687e:	4621      	mov	r1, r4
 8006880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006884:	4621      	mov	r1, r4
 8006886:	008a      	lsls	r2, r1, #2
 8006888:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800688c:	f7f9 fc9c 	bl	80001c8 <__aeabi_uldivmod>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4b60      	ldr	r3, [pc, #384]	@ (8006a18 <UART_SetConfig+0x4e4>)
 8006896:	fba3 2302 	umull	r2, r3, r3, r2
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	011c      	lsls	r4, r3, #4
 800689e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	1891      	adds	r1, r2, r2
 80068b6:	61b9      	str	r1, [r7, #24]
 80068b8:	415b      	adcs	r3, r3
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c0:	4641      	mov	r1, r8
 80068c2:	1851      	adds	r1, r2, r1
 80068c4:	6139      	str	r1, [r7, #16]
 80068c6:	4649      	mov	r1, r9
 80068c8:	414b      	adcs	r3, r1
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068d8:	4659      	mov	r1, fp
 80068da:	00cb      	lsls	r3, r1, #3
 80068dc:	4651      	mov	r1, sl
 80068de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068e2:	4651      	mov	r1, sl
 80068e4:	00ca      	lsls	r2, r1, #3
 80068e6:	4610      	mov	r0, r2
 80068e8:	4619      	mov	r1, r3
 80068ea:	4603      	mov	r3, r0
 80068ec:	4642      	mov	r2, r8
 80068ee:	189b      	adds	r3, r3, r2
 80068f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068f4:	464b      	mov	r3, r9
 80068f6:	460a      	mov	r2, r1
 80068f8:	eb42 0303 	adc.w	r3, r2, r3
 80068fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	67bb      	str	r3, [r7, #120]	@ 0x78
 800690a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006918:	4649      	mov	r1, r9
 800691a:	008b      	lsls	r3, r1, #2
 800691c:	4641      	mov	r1, r8
 800691e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006922:	4641      	mov	r1, r8
 8006924:	008a      	lsls	r2, r1, #2
 8006926:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800692a:	f7f9 fc4d 	bl	80001c8 <__aeabi_uldivmod>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4611      	mov	r1, r2
 8006934:	4b38      	ldr	r3, [pc, #224]	@ (8006a18 <UART_SetConfig+0x4e4>)
 8006936:	fba3 2301 	umull	r2, r3, r3, r1
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	2264      	movs	r2, #100	@ 0x64
 800693e:	fb02 f303 	mul.w	r3, r2, r3
 8006942:	1acb      	subs	r3, r1, r3
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	3332      	adds	r3, #50	@ 0x32
 8006948:	4a33      	ldr	r2, [pc, #204]	@ (8006a18 <UART_SetConfig+0x4e4>)
 800694a:	fba2 2303 	umull	r2, r3, r2, r3
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006954:	441c      	add	r4, r3
 8006956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800695a:	2200      	movs	r2, #0
 800695c:	673b      	str	r3, [r7, #112]	@ 0x70
 800695e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006960:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006964:	4642      	mov	r2, r8
 8006966:	464b      	mov	r3, r9
 8006968:	1891      	adds	r1, r2, r2
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	415b      	adcs	r3, r3
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006974:	4641      	mov	r1, r8
 8006976:	1851      	adds	r1, r2, r1
 8006978:	6039      	str	r1, [r7, #0]
 800697a:	4649      	mov	r1, r9
 800697c:	414b      	adcs	r3, r1
 800697e:	607b      	str	r3, [r7, #4]
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800698c:	4659      	mov	r1, fp
 800698e:	00cb      	lsls	r3, r1, #3
 8006990:	4651      	mov	r1, sl
 8006992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006996:	4651      	mov	r1, sl
 8006998:	00ca      	lsls	r2, r1, #3
 800699a:	4610      	mov	r0, r2
 800699c:	4619      	mov	r1, r3
 800699e:	4603      	mov	r3, r0
 80069a0:	4642      	mov	r2, r8
 80069a2:	189b      	adds	r3, r3, r2
 80069a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069a6:	464b      	mov	r3, r9
 80069a8:	460a      	mov	r2, r1
 80069aa:	eb42 0303 	adc.w	r3, r2, r3
 80069ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80069ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069c8:	4649      	mov	r1, r9
 80069ca:	008b      	lsls	r3, r1, #2
 80069cc:	4641      	mov	r1, r8
 80069ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069d2:	4641      	mov	r1, r8
 80069d4:	008a      	lsls	r2, r1, #2
 80069d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069da:	f7f9 fbf5 	bl	80001c8 <__aeabi_uldivmod>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <UART_SetConfig+0x4e4>)
 80069e4:	fba3 1302 	umull	r1, r3, r3, r2
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	2164      	movs	r1, #100	@ 0x64
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	3332      	adds	r3, #50	@ 0x32
 80069f6:	4a08      	ldr	r2, [pc, #32]	@ (8006a18 <UART_SetConfig+0x4e4>)
 80069f8:	fba2 2303 	umull	r2, r3, r2, r3
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	f003 020f 	and.w	r2, r3, #15
 8006a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4422      	add	r2, r4
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a12:	46bd      	mov	sp, r7
 8006a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a18:	51eb851f 	.word	0x51eb851f

08006a1c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	f023 0101 	bic.w	r1, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d102      	bne.n	8006a4c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006a46:	2340      	movs	r3, #64	@ 0x40
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	e001      	b.n	8006a50 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006a5c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006a62:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006a68:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006a6e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006a74:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006a7a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006a80:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006a86:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006a8c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006aaa:	4b10      	ldr	r3, [pc, #64]	@ (8006aec <FSMC_NORSRAM_Init+0xd0>)
 8006aac:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ab4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006abc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	43db      	mvns	r3, r3
 8006acc:	ea02 0103 	and.w	r1, r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	4319      	orrs	r1, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	0008fb7f 	.word	0x0008fb7f

08006af0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b06:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	431a      	orrs	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	431a      	orrs	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	051b      	lsls	r3, r3, #20
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	3b02      	subs	r3, #2
 8006b36:	061b      	lsls	r3, r3, #24
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	3201      	adds	r2, #1
 8006b44:	4319      	orrs	r1, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b70:	d11d      	bne.n	8006bae <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b7a:	4b13      	ldr	r3, [pc, #76]	@ (8006bc8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	6811      	ldr	r1, [r2, #0]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	6852      	ldr	r2, [r2, #4]
 8006b86:	0112      	lsls	r2, r2, #4
 8006b88:	4311      	orrs	r1, r2
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	6892      	ldr	r2, [r2, #8]
 8006b8e:	0212      	lsls	r2, r2, #8
 8006b90:	4311      	orrs	r1, r2
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	6992      	ldr	r2, [r2, #24]
 8006b96:	4311      	orrs	r1, r2
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	68d2      	ldr	r2, [r2, #12]
 8006b9c:	0412      	lsls	r2, r2, #16
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	ea43 0102 	orr.w	r1, r3, r2
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006bac:	e005      	b.n	8006bba <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	cff00000 	.word	0xcff00000

08006bcc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006bcc:	b084      	sub	sp, #16
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	f107 001c 	add.w	r0, r7, #28
 8006bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006be2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006be4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006be6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8006bea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006bee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8006bf2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8006bf6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8006c06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	b004      	add	sp, #16
 8006c20:	4770      	bx	lr

08006c22 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2203      	movs	r2, #3
 8006c6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0303 	and.w	r3, r3, #3
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cb4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006cba:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006cc0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006cd0:	f023 030f 	bic.w	r3, r3, #15
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	b2db      	uxtb	r3, r3
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3314      	adds	r3, #20
 8006d12:	461a      	mov	r2, r3
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	4413      	add	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
}  
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d50:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006d56:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006d5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d68:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0

}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b088      	sub	sp, #32
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006d90:	2310      	movs	r3, #16
 8006d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d94:	2340      	movs	r3, #64	@ 0x40
 8006d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006da0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006da2:	f107 0308 	add.w	r3, r7, #8
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff ff74 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006db2:	2110      	movs	r1, #16
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fa19 	bl	80071ec <SDMMC_GetCmdResp1>
 8006dba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b088      	sub	sp, #32
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006dd4:	2311      	movs	r3, #17
 8006dd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dd8:	2340      	movs	r3, #64	@ 0x40
 8006dda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006de0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006de4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006de6:	f107 0308 	add.w	r3, r7, #8
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff ff52 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df6:	2111      	movs	r1, #17
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f9f7 	bl	80071ec <SDMMC_GetCmdResp1>
 8006dfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e00:	69fb      	ldr	r3, [r7, #28]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3720      	adds	r7, #32
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b088      	sub	sp, #32
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006e18:	2312      	movs	r3, #18
 8006e1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e1c:	2340      	movs	r3, #64	@ 0x40
 8006e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e2a:	f107 0308 	add.w	r3, r7, #8
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff ff30 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e3a:	2112      	movs	r1, #18
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f9d5 	bl	80071ec <SDMMC_GetCmdResp1>
 8006e42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e44:	69fb      	ldr	r3, [r7, #28]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3720      	adds	r7, #32
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b088      	sub	sp, #32
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006e5c:	2318      	movs	r3, #24
 8006e5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e60:	2340      	movs	r3, #64	@ 0x40
 8006e62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e64:	2300      	movs	r3, #0
 8006e66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e6e:	f107 0308 	add.w	r3, r7, #8
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff ff0e 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e7e:	2118      	movs	r1, #24
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f9b3 	bl	80071ec <SDMMC_GetCmdResp1>
 8006e86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e88:	69fb      	ldr	r3, [r7, #28]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3720      	adds	r7, #32
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b088      	sub	sp, #32
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006ea0:	2319      	movs	r3, #25
 8006ea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ea4:	2340      	movs	r3, #64	@ 0x40
 8006ea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006eac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006eb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006eb2:	f107 0308 	add.w	r3, r7, #8
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff feec 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec2:	2119      	movs	r1, #25
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f991 	bl	80071ec <SDMMC_GetCmdResp1>
 8006eca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3720      	adds	r7, #32
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006ee4:	230c      	movs	r3, #12
 8006ee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ee8:	2340      	movs	r3, #64	@ 0x40
 8006eea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ef4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ef6:	f107 0308 	add.w	r3, r7, #8
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff feca 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006f02:	4a05      	ldr	r2, [pc, #20]	@ (8006f18 <SDMMC_CmdStopTransfer+0x40>)
 8006f04:	210c      	movs	r1, #12
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f970 	bl	80071ec <SDMMC_GetCmdResp1>
 8006f0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3720      	adds	r7, #32
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	05f5e100 	.word	0x05f5e100

08006f1c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	@ 0x28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006f2c:	2307      	movs	r3, #7
 8006f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f30:	2340      	movs	r3, #64	@ 0x40
 8006f32:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f3c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f3e:	f107 0310 	add.w	r3, r7, #16
 8006f42:	4619      	mov	r1, r3
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff fea6 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f4e:	2107      	movs	r1, #7
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 f94b 	bl	80071ec <SDMMC_GetCmdResp1>
 8006f56:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3728      	adds	r7, #40	@ 0x28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b088      	sub	sp, #32
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006f72:	2300      	movs	r3, #0
 8006f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f76:	2300      	movs	r3, #0
 8006f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f80:	f107 0308 	add.w	r3, r7, #8
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff fe85 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fb65 	bl	800765c <SDMMC_GetCmdError>
 8006f92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f94:	69fb      	ldr	r3, [r7, #28]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3720      	adds	r7, #32
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b088      	sub	sp, #32
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006fa6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006faa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006fac:	2308      	movs	r3, #8
 8006fae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fb0:	2340      	movs	r3, #64	@ 0x40
 8006fb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fbe:	f107 0308 	add.w	r3, r7, #8
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff fe66 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 faf8 	bl	80075c0 <SDMMC_GetCmdResp7>
 8006fd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fd2:	69fb      	ldr	r3, [r7, #28]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3720      	adds	r7, #32
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006fea:	2337      	movs	r3, #55	@ 0x37
 8006fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fee:	2340      	movs	r3, #64	@ 0x40
 8006ff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ffa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ffc:	f107 0308 	add.w	r3, r7, #8
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff fe47 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800700c:	2137      	movs	r1, #55	@ 0x37
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8ec 	bl	80071ec <SDMMC_GetCmdResp1>
 8007014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007016:	69fb      	ldr	r3, [r7, #28]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3720      	adds	r7, #32
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007030:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007036:	2329      	movs	r3, #41	@ 0x29
 8007038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800703a:	2340      	movs	r3, #64	@ 0x40
 800703c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007046:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007048:	f107 0308 	add.w	r3, r7, #8
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff fe21 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f9ff 	bl	8007458 <SDMMC_GetCmdResp3>
 800705a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800705c:	69fb      	ldr	r3, [r7, #28]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b088      	sub	sp, #32
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007074:	2306      	movs	r3, #6
 8007076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007078:	2340      	movs	r3, #64	@ 0x40
 800707a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800707c:	2300      	movs	r3, #0
 800707e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007080:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007084:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007086:	f107 0308 	add.w	r3, r7, #8
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff fe02 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007096:	2106      	movs	r1, #6
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f8a7 	bl	80071ec <SDMMC_GetCmdResp1>
 800709e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070a0:	69fb      	ldr	r3, [r7, #28]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b088      	sub	sp, #32
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80070b6:	2333      	movs	r3, #51	@ 0x33
 80070b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070ba:	2340      	movs	r3, #64	@ 0x40
 80070bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070c8:	f107 0308 	add.w	r3, r7, #8
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff fde1 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80070d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d8:	2133      	movs	r1, #51	@ 0x33
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f886 	bl	80071ec <SDMMC_GetCmdResp1>
 80070e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070e2:	69fb      	ldr	r3, [r7, #28]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80070f8:	2302      	movs	r3, #2
 80070fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80070fc:	23c0      	movs	r3, #192	@ 0xc0
 80070fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007108:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800710a:	f107 0308 	add.w	r3, r7, #8
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff fdc0 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f956 	bl	80073c8 <SDMMC_GetCmdResp2>
 800711c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800711e:	69fb      	ldr	r3, [r7, #28]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007136:	2309      	movs	r3, #9
 8007138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800713a:	23c0      	movs	r3, #192	@ 0xc0
 800713c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007142:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007146:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fda1 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f937 	bl	80073c8 <SDMMC_GetCmdResp2>
 800715a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800715c:	69fb      	ldr	r3, [r7, #28]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3720      	adds	r7, #32
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b088      	sub	sp, #32
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007174:	2303      	movs	r3, #3
 8007176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007178:	2340      	movs	r3, #64	@ 0x40
 800717a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007184:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007186:	f107 0308 	add.w	r3, r7, #8
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fd82 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	2103      	movs	r1, #3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f99c 	bl	80074d4 <SDMMC_GetCmdResp6>
 800719c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800719e:	69fb      	ldr	r3, [r7, #28]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80071b6:	230d      	movs	r3, #13
 80071b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071ba:	2340      	movs	r3, #64	@ 0x40
 80071bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071c8:	f107 0308 	add.w	r3, r7, #8
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff fd61 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80071d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071d8:	210d      	movs	r1, #13
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f806 	bl	80071ec <SDMMC_GetCmdResp1>
 80071e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071e2:	69fb      	ldr	r3, [r7, #28]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	460b      	mov	r3, r1
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071fa:	4b70      	ldr	r3, [pc, #448]	@ (80073bc <SDMMC_GetCmdResp1+0x1d0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a70      	ldr	r2, [pc, #448]	@ (80073c0 <SDMMC_GetCmdResp1+0x1d4>)
 8007200:	fba2 2303 	umull	r2, r3, r2, r3
 8007204:	0a5a      	lsrs	r2, r3, #9
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	fb02 f303 	mul.w	r3, r2, r3
 800720c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	1e5a      	subs	r2, r3, #1
 8007212:	61fa      	str	r2, [r7, #28]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007218:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800721c:	e0c9      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007222:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0ef      	beq.n	800720e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1ea      	bne.n	800720e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2204      	movs	r2, #4
 8007248:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800724a:	2304      	movs	r3, #4
 800724c:	e0b1      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d004      	beq.n	8007264 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007260:	2301      	movs	r3, #1
 8007262:	e0a6      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	22c5      	movs	r2, #197	@ 0xc5
 8007268:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff fd3d 	bl	8006cea <SDIO_GetCommandResponse>
 8007270:	4603      	mov	r3, r0
 8007272:	461a      	mov	r2, r3
 8007274:	7afb      	ldrb	r3, [r7, #11]
 8007276:	4293      	cmp	r3, r2
 8007278:	d001      	beq.n	800727e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800727a:	2301      	movs	r3, #1
 800727c:	e099      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800727e:	2100      	movs	r1, #0
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f7ff fd3f 	bl	8006d04 <SDIO_GetResponse>
 8007286:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4b4e      	ldr	r3, [pc, #312]	@ (80073c4 <SDMMC_GetCmdResp1+0x1d8>)
 800728c:	4013      	ands	r3, r2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007292:	2300      	movs	r3, #0
 8007294:	e08d      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	da02      	bge.n	80072a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800729c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80072a0:	e087      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80072ac:	2340      	movs	r3, #64	@ 0x40
 80072ae:	e080      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80072ba:	2380      	movs	r3, #128	@ 0x80
 80072bc:	e079      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80072c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80072cc:	e071      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80072d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072dc:	e069      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80072e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072ec:	e061      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80072f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80072fc:	e059      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800730c:	e051      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800731c:	e049      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007328:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800732c:	e041      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007338:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800733c:	e039      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007348:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800734c:	e031      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007358:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800735c:	e029      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007368:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800736c:	e021      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007378:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800737c:	e019      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007388:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800738c:	e011      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007398:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800739c:	e009      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80073a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80073ac:	e001      	b.n	80073b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80073ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3720      	adds	r7, #32
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000000 	.word	0x20000000
 80073c0:	10624dd3 	.word	0x10624dd3
 80073c4:	fdffe008 	.word	0xfdffe008

080073c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007450 <SDMMC_GetCmdResp2+0x88>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1f      	ldr	r2, [pc, #124]	@ (8007454 <SDMMC_GetCmdResp2+0x8c>)
 80073d6:	fba2 2303 	umull	r2, r3, r2, r3
 80073da:	0a5b      	lsrs	r3, r3, #9
 80073dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073e0:	fb02 f303 	mul.w	r3, r2, r3
 80073e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	1e5a      	subs	r2, r3, #1
 80073ea:	60fa      	str	r2, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80073f4:	e026      	b.n	8007444 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0ef      	beq.n	80073e6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1ea      	bne.n	80073e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2204      	movs	r2, #4
 8007420:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007422:	2304      	movs	r3, #4
 8007424:	e00e      	b.n	8007444 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007438:	2301      	movs	r3, #1
 800743a:	e003      	b.n	8007444 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	22c5      	movs	r2, #197	@ 0xc5
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	20000000 	.word	0x20000000
 8007454:	10624dd3 	.word	0x10624dd3

08007458 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007460:	4b1a      	ldr	r3, [pc, #104]	@ (80074cc <SDMMC_GetCmdResp3+0x74>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1a      	ldr	r2, [pc, #104]	@ (80074d0 <SDMMC_GetCmdResp3+0x78>)
 8007466:	fba2 2303 	umull	r2, r3, r2, r3
 800746a:	0a5b      	lsrs	r3, r3, #9
 800746c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007470:	fb02 f303 	mul.w	r3, r2, r3
 8007474:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	1e5a      	subs	r2, r3, #1
 800747a:	60fa      	str	r2, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007480:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007484:	e01b      	b.n	80074be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800748a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0ef      	beq.n	8007476 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1ea      	bne.n	8007476 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2204      	movs	r2, #4
 80074b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074b2:	2304      	movs	r3, #4
 80074b4:	e003      	b.n	80074be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	22c5      	movs	r2, #197	@ 0xc5
 80074ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20000000 	.word	0x20000000
 80074d0:	10624dd3 	.word	0x10624dd3

080074d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	460b      	mov	r3, r1
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074e2:	4b35      	ldr	r3, [pc, #212]	@ (80075b8 <SDMMC_GetCmdResp6+0xe4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a35      	ldr	r2, [pc, #212]	@ (80075bc <SDMMC_GetCmdResp6+0xe8>)
 80074e8:	fba2 2303 	umull	r2, r3, r2, r3
 80074ec:	0a5b      	lsrs	r3, r3, #9
 80074ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
 80074f6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	1e5a      	subs	r2, r3, #1
 80074fc:	61fa      	str	r2, [r7, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007502:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007506:	e052      	b.n	80075ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800750c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0ef      	beq.n	80074f8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1ea      	bne.n	80074f8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	d004      	beq.n	8007538 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2204      	movs	r2, #4
 8007532:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007534:	2304      	movs	r3, #4
 8007536:	e03a      	b.n	80075ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800754a:	2301      	movs	r3, #1
 800754c:	e02f      	b.n	80075ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f7ff fbcb 	bl	8006cea <SDIO_GetCommandResponse>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	7afb      	ldrb	r3, [r7, #11]
 800755a:	4293      	cmp	r3, r2
 800755c:	d001      	beq.n	8007562 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800755e:	2301      	movs	r3, #1
 8007560:	e025      	b.n	80075ae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	22c5      	movs	r2, #197	@ 0xc5
 8007566:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007568:	2100      	movs	r1, #0
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff fbca 	bl	8006d04 <SDIO_GetResponse>
 8007570:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	b29a      	uxth	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007586:	2300      	movs	r3, #0
 8007588:	e011      	b.n	80075ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007598:	e009      	b.n	80075ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80075a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075a8:	e001      	b.n	80075ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80075aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3720      	adds	r7, #32
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000000 	.word	0x20000000
 80075bc:	10624dd3 	.word	0x10624dd3

080075c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075c8:	4b22      	ldr	r3, [pc, #136]	@ (8007654 <SDMMC_GetCmdResp7+0x94>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a22      	ldr	r2, [pc, #136]	@ (8007658 <SDMMC_GetCmdResp7+0x98>)
 80075ce:	fba2 2303 	umull	r2, r3, r2, r3
 80075d2:	0a5b      	lsrs	r3, r3, #9
 80075d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1e5a      	subs	r2, r3, #1
 80075e2:	60fa      	str	r2, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80075ec:	e02c      	b.n	8007648 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0ef      	beq.n	80075de <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1ea      	bne.n	80075de <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2204      	movs	r2, #4
 8007618:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800761a:	2304      	movs	r3, #4
 800761c:	e014      	b.n	8007648 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007630:	2301      	movs	r3, #1
 8007632:	e009      	b.n	8007648 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2240      	movs	r2, #64	@ 0x40
 8007644:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007646:	2300      	movs	r3, #0
  
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	20000000 	.word	0x20000000
 8007658:	10624dd3 	.word	0x10624dd3

0800765c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007664:	4b11      	ldr	r3, [pc, #68]	@ (80076ac <SDMMC_GetCmdError+0x50>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a11      	ldr	r2, [pc, #68]	@ (80076b0 <SDMMC_GetCmdError+0x54>)
 800766a:	fba2 2303 	umull	r2, r3, r2, r3
 800766e:	0a5b      	lsrs	r3, r3, #9
 8007670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007674:	fb02 f303 	mul.w	r3, r2, r3
 8007678:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1e5a      	subs	r2, r3, #1
 800767e:	60fa      	str	r2, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007684:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007688:	e009      	b.n	800769e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800768e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0f1      	beq.n	800767a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	22c5      	movs	r2, #197	@ 0xc5
 800769a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000000 	.word	0x20000000
 80076b0:	10624dd3 	.word	0x10624dd3

080076b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076b4:	b084      	sub	sp, #16
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	f107 001c 	add.w	r0, r7, #28
 80076c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d123      	bne.n	8007716 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80076e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d105      	bne.n	800770a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f001 fae2 	bl	8008cd4 <USB_CoreReset>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
 8007714:	e01b      	b.n	800774e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fad6 	bl	8008cd4 <USB_CoreReset>
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800772c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007738:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007740:	e005      	b.n	800774e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800774e:	7fbb      	ldrb	r3, [r7, #30]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d10b      	bne.n	800776c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f043 0206 	orr.w	r2, r3, #6
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f043 0220 	orr.w	r2, r3, #32
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007778:	b004      	add	sp, #16
 800777a:	4770      	bx	lr

0800777c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	4613      	mov	r3, r2
 8007788:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	2b02      	cmp	r3, #2
 800778e:	d165      	bne.n	800785c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	4a41      	ldr	r2, [pc, #260]	@ (8007898 <USB_SetTurnaroundTime+0x11c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d906      	bls.n	80077a6 <USB_SetTurnaroundTime+0x2a>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4a40      	ldr	r2, [pc, #256]	@ (800789c <USB_SetTurnaroundTime+0x120>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d202      	bcs.n	80077a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80077a0:	230f      	movs	r3, #15
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e062      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4a3c      	ldr	r2, [pc, #240]	@ (800789c <USB_SetTurnaroundTime+0x120>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d306      	bcc.n	80077bc <USB_SetTurnaroundTime+0x40>
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	4a3b      	ldr	r2, [pc, #236]	@ (80078a0 <USB_SetTurnaroundTime+0x124>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d202      	bcs.n	80077bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80077b6:	230e      	movs	r3, #14
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	e057      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4a38      	ldr	r2, [pc, #224]	@ (80078a0 <USB_SetTurnaroundTime+0x124>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d306      	bcc.n	80077d2 <USB_SetTurnaroundTime+0x56>
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	4a37      	ldr	r2, [pc, #220]	@ (80078a4 <USB_SetTurnaroundTime+0x128>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d202      	bcs.n	80077d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80077cc:	230d      	movs	r3, #13
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e04c      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	4a33      	ldr	r2, [pc, #204]	@ (80078a4 <USB_SetTurnaroundTime+0x128>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d306      	bcc.n	80077e8 <USB_SetTurnaroundTime+0x6c>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	4a32      	ldr	r2, [pc, #200]	@ (80078a8 <USB_SetTurnaroundTime+0x12c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d802      	bhi.n	80077e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80077e2:	230c      	movs	r3, #12
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	e041      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	4a2f      	ldr	r2, [pc, #188]	@ (80078a8 <USB_SetTurnaroundTime+0x12c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d906      	bls.n	80077fe <USB_SetTurnaroundTime+0x82>
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	4a2e      	ldr	r2, [pc, #184]	@ (80078ac <USB_SetTurnaroundTime+0x130>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d802      	bhi.n	80077fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80077f8:	230b      	movs	r3, #11
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	e036      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4a2a      	ldr	r2, [pc, #168]	@ (80078ac <USB_SetTurnaroundTime+0x130>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d906      	bls.n	8007814 <USB_SetTurnaroundTime+0x98>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	4a29      	ldr	r2, [pc, #164]	@ (80078b0 <USB_SetTurnaroundTime+0x134>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d802      	bhi.n	8007814 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800780e:	230a      	movs	r3, #10
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	e02b      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	4a26      	ldr	r2, [pc, #152]	@ (80078b0 <USB_SetTurnaroundTime+0x134>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d906      	bls.n	800782a <USB_SetTurnaroundTime+0xae>
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	4a25      	ldr	r2, [pc, #148]	@ (80078b4 <USB_SetTurnaroundTime+0x138>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d202      	bcs.n	800782a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007824:	2309      	movs	r3, #9
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e020      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4a21      	ldr	r2, [pc, #132]	@ (80078b4 <USB_SetTurnaroundTime+0x138>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d306      	bcc.n	8007840 <USB_SetTurnaroundTime+0xc4>
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	4a20      	ldr	r2, [pc, #128]	@ (80078b8 <USB_SetTurnaroundTime+0x13c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d802      	bhi.n	8007840 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800783a:	2308      	movs	r3, #8
 800783c:	617b      	str	r3, [r7, #20]
 800783e:	e015      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4a1d      	ldr	r2, [pc, #116]	@ (80078b8 <USB_SetTurnaroundTime+0x13c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d906      	bls.n	8007856 <USB_SetTurnaroundTime+0xda>
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4a1c      	ldr	r2, [pc, #112]	@ (80078bc <USB_SetTurnaroundTime+0x140>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d202      	bcs.n	8007856 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007850:	2307      	movs	r3, #7
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	e00a      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007856:	2306      	movs	r3, #6
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	e007      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007862:	2309      	movs	r3, #9
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	e001      	b.n	800786c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007868:	2309      	movs	r3, #9
 800786a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	029b      	lsls	r3, r3, #10
 8007880:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007884:	431a      	orrs	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	371c      	adds	r7, #28
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	00d8acbf 	.word	0x00d8acbf
 800789c:	00e4e1c0 	.word	0x00e4e1c0
 80078a0:	00f42400 	.word	0x00f42400
 80078a4:	01067380 	.word	0x01067380
 80078a8:	011a499f 	.word	0x011a499f
 80078ac:	01312cff 	.word	0x01312cff
 80078b0:	014ca43f 	.word	0x014ca43f
 80078b4:	016e3600 	.word	0x016e3600
 80078b8:	01a6ab1f 	.word	0x01a6ab1f
 80078bc:	01e84800 	.word	0x01e84800

080078c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f043 0201 	orr.w	r2, r3, #1
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f023 0201 	bic.w	r2, r3, #1
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d115      	bne.n	8007952 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007932:	200a      	movs	r0, #10
 8007934:	f7f9 fed8 	bl	80016e8 <HAL_Delay>
      ms += 10U;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	330a      	adds	r3, #10
 800793c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 f939 	bl	8008bb6 <USB_GetMode>
 8007944:	4603      	mov	r3, r0
 8007946:	2b01      	cmp	r3, #1
 8007948:	d01e      	beq.n	8007988 <USB_SetCurrentMode+0x84>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2bc7      	cmp	r3, #199	@ 0xc7
 800794e:	d9f0      	bls.n	8007932 <USB_SetCurrentMode+0x2e>
 8007950:	e01a      	b.n	8007988 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007952:	78fb      	ldrb	r3, [r7, #3]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d115      	bne.n	8007984 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007964:	200a      	movs	r0, #10
 8007966:	f7f9 febf 	bl	80016e8 <HAL_Delay>
      ms += 10U;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	330a      	adds	r3, #10
 800796e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 f920 	bl	8008bb6 <USB_GetMode>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <USB_SetCurrentMode+0x84>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007980:	d9f0      	bls.n	8007964 <USB_SetCurrentMode+0x60>
 8007982:	e001      	b.n	8007988 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e005      	b.n	8007994 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2bc8      	cmp	r3, #200	@ 0xc8
 800798c:	d101      	bne.n	8007992 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800799c:	b084      	sub	sp, #16
 800799e:	b580      	push	{r7, lr}
 80079a0:	b086      	sub	sp, #24
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80079aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	e009      	b.n	80079d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	3340      	adds	r3, #64	@ 0x40
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	2200      	movs	r2, #0
 80079c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	3301      	adds	r3, #1
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	2b0e      	cmp	r3, #14
 80079d4:	d9f2      	bls.n	80079bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80079d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d11c      	bne.n	8007a18 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079ec:	f043 0302 	orr.w	r3, r3, #2
 80079f0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a02:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a16:	e00b      	b.n	8007a30 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a28:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a36:	461a      	mov	r2, r3
 8007a38:	2300      	movs	r3, #0
 8007a3a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a3c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d10d      	bne.n	8007a60 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d104      	bne.n	8007a56 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f968 	bl	8007d24 <USB_SetDevSpeed>
 8007a54:	e008      	b.n	8007a68 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a56:	2101      	movs	r1, #1
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f963 	bl	8007d24 <USB_SetDevSpeed>
 8007a5e:	e003      	b.n	8007a68 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a60:	2103      	movs	r1, #3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f95e 	bl	8007d24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a68:	2110      	movs	r1, #16
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f8fa 	bl	8007c64 <USB_FlushTxFifo>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f924 	bl	8007cc8 <USB_FlushRxFifo>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a90:	461a      	mov	r2, r3
 8007a92:	2300      	movs	r3, #0
 8007a94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aae:	2300      	movs	r3, #0
 8007ab0:	613b      	str	r3, [r7, #16]
 8007ab2:	e043      	b.n	8007b3c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aca:	d118      	bne.n	8007afe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	e013      	b.n	8007b10 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af4:	461a      	mov	r2, r3
 8007af6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	e008      	b.n	8007b10 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	2300      	movs	r3, #0
 8007b20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b40:	461a      	mov	r2, r3
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d3b5      	bcc.n	8007ab4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	e043      	b.n	8007bd6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b64:	d118      	bne.n	8007b98 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	e013      	b.n	8007baa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	e008      	b.n	8007baa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	2300      	movs	r3, #0
 8007bba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007bce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007bda:	461a      	mov	r2, r3
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d3b5      	bcc.n	8007b4e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bf4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007c02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d105      	bne.n	8007c18 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	f043 0210 	orr.w	r2, r3, #16
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	4b10      	ldr	r3, [pc, #64]	@ (8007c60 <USB_DevInit+0x2c4>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	f043 0208 	orr.w	r2, r3, #8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d107      	bne.n	8007c50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c48:	f043 0304 	orr.w	r3, r3, #4
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c5c:	b004      	add	sp, #16
 8007c5e:	4770      	bx	lr
 8007c60:	803c3800 	.word	0x803c3800

08007c64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3301      	adds	r3, #1
 8007c76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c7e:	d901      	bls.n	8007c84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e01b      	b.n	8007cbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	daf2      	bge.n	8007c72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	019b      	lsls	r3, r3, #6
 8007c94:	f043 0220 	orr.w	r2, r3, #32
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ca8:	d901      	bls.n	8007cae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e006      	b.n	8007cbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d0f0      	beq.n	8007c9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ce0:	d901      	bls.n	8007ce6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e018      	b.n	8007d18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	daf2      	bge.n	8007cd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2210      	movs	r2, #16
 8007cf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d04:	d901      	bls.n	8007d0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e006      	b.n	8007d18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	d0f0      	beq.n	8007cf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	68f9      	ldr	r1, [r7, #12]
 8007d40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d44:	4313      	orrs	r3, r2
 8007d46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f003 0306 	and.w	r3, r3, #6
 8007d6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d76:	2300      	movs	r3, #0
 8007d78:	75fb      	strb	r3, [r7, #23]
 8007d7a:	e00a      	b.n	8007d92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d002      	beq.n	8007d88 <USB_GetDevSpeed+0x32>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b06      	cmp	r3, #6
 8007d86:	d102      	bne.n	8007d8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	75fb      	strb	r3, [r7, #23]
 8007d8c:	e001      	b.n	8007d92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d8e:	230f      	movs	r3, #15
 8007d90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	371c      	adds	r7, #28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	785b      	ldrb	r3, [r3, #1]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d13a      	bne.n	8007e32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f003 030f 	and.w	r3, r3, #15
 8007dcc:	2101      	movs	r1, #1
 8007dce:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	68f9      	ldr	r1, [r7, #12]
 8007dd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d155      	bne.n	8007ea0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	791b      	ldrb	r3, [r3, #4]
 8007e0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	059b      	lsls	r3, r3, #22
 8007e16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	0151      	lsls	r1, r2, #5
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	440a      	add	r2, r1
 8007e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	e036      	b.n	8007ea0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e38:	69da      	ldr	r2, [r3, #28]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	2101      	movs	r1, #1
 8007e44:	fa01 f303 	lsl.w	r3, r1, r3
 8007e48:	041b      	lsls	r3, r3, #16
 8007e4a:	68f9      	ldr	r1, [r7, #12]
 8007e4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e50:	4313      	orrs	r3, r2
 8007e52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d11a      	bne.n	8007ea0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	791b      	ldrb	r3, [r3, #4]
 8007e84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e86:	430b      	orrs	r3, r1
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	0151      	lsls	r1, r2, #5
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	440a      	add	r2, r1
 8007e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
	...

08007eb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	785b      	ldrb	r3, [r3, #1]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d161      	bne.n	8007f90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ee2:	d11f      	bne.n	8007f24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007efe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	2101      	movs	r1, #1
 8007f36:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	43db      	mvns	r3, r3
 8007f3e:	68f9      	ldr	r1, [r7, #12]
 8007f40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f44:	4013      	ands	r3, r2
 8007f46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	2101      	movs	r1, #1
 8007f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	43db      	mvns	r3, r3
 8007f62:	68f9      	ldr	r1, [r7, #12]
 8007f64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f68:	4013      	ands	r3, r2
 8007f6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	0159      	lsls	r1, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	440b      	add	r3, r1
 8007f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f86:	4619      	mov	r1, r3
 8007f88:	4b35      	ldr	r3, [pc, #212]	@ (8008060 <USB_DeactivateEndpoint+0x1b0>)
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	600b      	str	r3, [r1, #0]
 8007f8e:	e060      	b.n	8008052 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fa6:	d11f      	bne.n	8007fe8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	0151      	lsls	r1, r2, #5
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007fc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	0151      	lsls	r1, r2, #5
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	440a      	add	r2, r1
 8007fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fe2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffe:	041b      	lsls	r3, r3, #16
 8008000:	43db      	mvns	r3, r3
 8008002:	68f9      	ldr	r1, [r7, #12]
 8008004:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008008:	4013      	ands	r3, r2
 800800a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	f003 030f 	and.w	r3, r3, #15
 800801c:	2101      	movs	r1, #1
 800801e:	fa01 f303 	lsl.w	r3, r1, r3
 8008022:	041b      	lsls	r3, r3, #16
 8008024:	43db      	mvns	r3, r3
 8008026:	68f9      	ldr	r1, [r7, #12]
 8008028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800802c:	4013      	ands	r3, r2
 800802e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	0159      	lsls	r1, r3, #5
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	440b      	add	r3, r1
 8008046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800804a:	4619      	mov	r1, r3
 800804c:	4b05      	ldr	r3, [pc, #20]	@ (8008064 <USB_DeactivateEndpoint+0x1b4>)
 800804e:	4013      	ands	r3, r2
 8008050:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	ec337800 	.word	0xec337800
 8008064:	eff37800 	.word	0xeff37800

08008068 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	@ 0x28
 800806c:	af02      	add	r7, sp, #8
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	785b      	ldrb	r3, [r3, #1]
 8008084:	2b01      	cmp	r3, #1
 8008086:	f040 817a 	bne.w	800837e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d132      	bne.n	80080f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80080b0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80080b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	0151      	lsls	r1, r2, #5
 80080c8:	69fa      	ldr	r2, [r7, #28]
 80080ca:	440a      	add	r2, r1
 80080cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	69fa      	ldr	r2, [r7, #28]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080f0:	0cdb      	lsrs	r3, r3, #19
 80080f2:	04db      	lsls	r3, r3, #19
 80080f4:	6113      	str	r3, [r2, #16]
 80080f6:	e092      	b.n	800821e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	440a      	add	r2, r1
 800810e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008112:	0cdb      	lsrs	r3, r3, #19
 8008114:	04db      	lsls	r3, r3, #19
 8008116:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	440a      	add	r2, r1
 800812e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008132:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008136:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800813a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d11a      	bne.n	8008178 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	691a      	ldr	r2, [r3, #16]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	429a      	cmp	r2, r3
 800814c:	d903      	bls.n	8008156 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	0151      	lsls	r1, r2, #5
 8008168:	69fa      	ldr	r2, [r7, #28]
 800816a:	440a      	add	r2, r1
 800816c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008170:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008174:	6113      	str	r3, [r2, #16]
 8008176:	e01b      	b.n	80081b0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008184:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6919      	ldr	r1, [r3, #16]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	440b      	add	r3, r1
 8008190:	1e59      	subs	r1, r3, #1
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	fbb1 f3f3 	udiv	r3, r1, r3
 800819a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800819c:	4ba2      	ldr	r3, [pc, #648]	@ (8008428 <USB_EPStartXfer+0x3c0>)
 800819e:	400b      	ands	r3, r1
 80081a0:	69b9      	ldr	r1, [r7, #24]
 80081a2:	0148      	lsls	r0, r1, #5
 80081a4:	69f9      	ldr	r1, [r7, #28]
 80081a6:	4401      	add	r1, r0
 80081a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80081ac:	4313      	orrs	r3, r2
 80081ae:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081bc:	691a      	ldr	r2, [r3, #16]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081c6:	69b9      	ldr	r1, [r7, #24]
 80081c8:	0148      	lsls	r0, r1, #5
 80081ca:	69f9      	ldr	r1, [r7, #28]
 80081cc:	4401      	add	r1, r0
 80081ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80081d2:	4313      	orrs	r3, r2
 80081d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	791b      	ldrb	r3, [r3, #4]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d11f      	bne.n	800821e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	0151      	lsls	r1, r2, #5
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	440a      	add	r2, r1
 80081f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081f8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80081fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	4413      	add	r3, r2
 8008206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	0151      	lsls	r1, r2, #5
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	440a      	add	r2, r1
 8008214:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008218:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800821c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d14b      	bne.n	80082bc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d009      	beq.n	8008240 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008238:	461a      	mov	r2, r3
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	791b      	ldrb	r3, [r3, #4]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d128      	bne.n	800829a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008254:	2b00      	cmp	r3, #0
 8008256:	d110      	bne.n	800827a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	0151      	lsls	r1, r2, #5
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	440a      	add	r2, r1
 800826e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008272:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	e00f      	b.n	800829a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	0151      	lsls	r1, r2, #5
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	440a      	add	r2, r1
 8008290:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008298:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	0151      	lsls	r1, r2, #5
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	440a      	add	r2, r1
 80082b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	e165      	b.n	8008588 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80082da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	791b      	ldrb	r3, [r3, #4]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d015      	beq.n	8008310 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 814d 	beq.w	8008588 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	2101      	movs	r1, #1
 8008300:	fa01 f303 	lsl.w	r3, r1, r3
 8008304:	69f9      	ldr	r1, [r7, #28]
 8008306:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800830a:	4313      	orrs	r3, r2
 800830c:	634b      	str	r3, [r1, #52]	@ 0x34
 800830e:	e13b      	b.n	8008588 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800831c:	2b00      	cmp	r3, #0
 800831e:	d110      	bne.n	8008342 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	440a      	add	r2, r1
 8008336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800833a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	e00f      	b.n	8008362 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	0151      	lsls	r1, r2, #5
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	440a      	add	r2, r1
 8008358:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800835c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008360:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	68d9      	ldr	r1, [r3, #12]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	781a      	ldrb	r2, [r3, #0]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	b298      	uxth	r0, r3
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	4603      	mov	r3, r0
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 f9b8 	bl	80086ec <USB_WritePacket>
 800837c:	e104      	b.n	8008588 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	0151      	lsls	r1, r2, #5
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	440a      	add	r2, r1
 8008394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008398:	0cdb      	lsrs	r3, r3, #19
 800839a:	04db      	lsls	r3, r3, #19
 800839c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	0151      	lsls	r1, r2, #5
 80083b0:	69fa      	ldr	r2, [r7, #28]
 80083b2:	440a      	add	r2, r1
 80083b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80083bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80083c0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d131      	bne.n	800842c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ec:	691a      	ldr	r2, [r3, #16]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f6:	69b9      	ldr	r1, [r7, #24]
 80083f8:	0148      	lsls	r0, r1, #5
 80083fa:	69f9      	ldr	r1, [r7, #28]
 80083fc:	4401      	add	r1, r0
 80083fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008402:	4313      	orrs	r3, r2
 8008404:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	0151      	lsls	r1, r2, #5
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	440a      	add	r2, r1
 800841c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008420:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008424:	6113      	str	r3, [r2, #16]
 8008426:	e061      	b.n	80084ec <USB_EPStartXfer+0x484>
 8008428:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d123      	bne.n	800847c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008440:	691a      	ldr	r2, [r3, #16]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800844a:	69b9      	ldr	r1, [r7, #24]
 800844c:	0148      	lsls	r0, r1, #5
 800844e:	69f9      	ldr	r1, [r7, #28]
 8008450:	4401      	add	r1, r0
 8008452:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008456:	4313      	orrs	r3, r2
 8008458:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008474:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008478:	6113      	str	r3, [r2, #16]
 800847a:	e037      	b.n	80084ec <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	691a      	ldr	r2, [r3, #16]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	4413      	add	r3, r2
 8008486:	1e5a      	subs	r2, r3, #1
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008490:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	8afa      	ldrh	r2, [r7, #22]
 8008498:	fb03 f202 	mul.w	r2, r3, r2
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ac:	691a      	ldr	r2, [r3, #16]
 80084ae:	8afb      	ldrh	r3, [r7, #22]
 80084b0:	04d9      	lsls	r1, r3, #19
 80084b2:	4b38      	ldr	r3, [pc, #224]	@ (8008594 <USB_EPStartXfer+0x52c>)
 80084b4:	400b      	ands	r3, r1
 80084b6:	69b9      	ldr	r1, [r7, #24]
 80084b8:	0148      	lsls	r0, r1, #5
 80084ba:	69f9      	ldr	r1, [r7, #28]
 80084bc:	4401      	add	r1, r0
 80084be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80084c2:	4313      	orrs	r3, r2
 80084c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084dc:	69b9      	ldr	r1, [r7, #24]
 80084de:	0148      	lsls	r0, r1, #5
 80084e0:	69f9      	ldr	r1, [r7, #28]
 80084e2:	4401      	add	r1, r0
 80084e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80084e8:	4313      	orrs	r3, r2
 80084ea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d10d      	bne.n	800850e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d009      	beq.n	800850e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	68d9      	ldr	r1, [r3, #12]
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800850a:	460a      	mov	r2, r1
 800850c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	791b      	ldrb	r3, [r3, #4]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d128      	bne.n	8008568 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008522:	2b00      	cmp	r3, #0
 8008524:	d110      	bne.n	8008548 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	0151      	lsls	r1, r2, #5
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	440a      	add	r2, r1
 800853c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008540:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	e00f      	b.n	8008568 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	0151      	lsls	r1, r2, #5
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	440a      	add	r2, r1
 800855e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008566:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	440a      	add	r2, r1
 800857e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008582:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3720      	adds	r7, #32
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	1ff80000 	.word	0x1ff80000

08008598 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d14a      	bne.n	800864c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085ce:	f040 8086 	bne.w	80086de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	7812      	ldrb	r2, [r2, #0]
 80085e6:	0151      	lsls	r1, r2, #5
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	440a      	add	r2, r1
 80085ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	7812      	ldrb	r2, [r2, #0]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	440a      	add	r2, r1
 8008610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008614:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008618:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3301      	adds	r3, #1
 800861e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008626:	4293      	cmp	r3, r2
 8008628:	d902      	bls.n	8008630 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	75fb      	strb	r3, [r7, #23]
          break;
 800862e:	e056      	b.n	80086de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008644:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008648:	d0e7      	beq.n	800861a <USB_EPStopXfer+0x82>
 800864a:	e048      	b.n	80086de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	4413      	add	r3, r2
 8008656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008660:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008664:	d13b      	bne.n	80086de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	4413      	add	r3, r2
 8008670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	7812      	ldrb	r2, [r2, #0]
 800867a:	0151      	lsls	r1, r2, #5
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	440a      	add	r2, r1
 8008680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008684:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008688:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	7812      	ldrb	r2, [r2, #0]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3301      	adds	r3, #1
 80086b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d902      	bls.n	80086c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	75fb      	strb	r3, [r7, #23]
          break;
 80086c2:	e00c      	b.n	80086de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086dc:	d0e7      	beq.n	80086ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b089      	sub	sp, #36	@ 0x24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	4611      	mov	r1, r2
 80086f8:	461a      	mov	r2, r3
 80086fa:	460b      	mov	r3, r1
 80086fc:	71fb      	strb	r3, [r7, #7]
 80086fe:	4613      	mov	r3, r2
 8008700:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800870a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800870e:	2b00      	cmp	r3, #0
 8008710:	d123      	bne.n	800875a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008712:	88bb      	ldrh	r3, [r7, #4]
 8008714:	3303      	adds	r3, #3
 8008716:	089b      	lsrs	r3, r3, #2
 8008718:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800871a:	2300      	movs	r3, #0
 800871c:	61bb      	str	r3, [r7, #24]
 800871e:	e018      	b.n	8008752 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	031a      	lsls	r2, r3, #12
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	4413      	add	r3, r2
 8008728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800872c:	461a      	mov	r2, r3
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	3301      	adds	r3, #1
 8008738:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	3301      	adds	r3, #1
 800873e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	3301      	adds	r3, #1
 8008744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	3301      	adds	r3, #1
 800874a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	3301      	adds	r3, #1
 8008750:	61bb      	str	r3, [r7, #24]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	429a      	cmp	r2, r3
 8008758:	d3e2      	bcc.n	8008720 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3724      	adds	r7, #36	@ 0x24
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008768:	b480      	push	{r7}
 800876a:	b08b      	sub	sp, #44	@ 0x2c
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	4613      	mov	r3, r2
 8008774:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800877e:	88fb      	ldrh	r3, [r7, #6]
 8008780:	089b      	lsrs	r3, r3, #2
 8008782:	b29b      	uxth	r3, r3
 8008784:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008786:	88fb      	ldrh	r3, [r7, #6]
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800878e:	2300      	movs	r3, #0
 8008790:	623b      	str	r3, [r7, #32]
 8008792:	e014      	b.n	80087be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879e:	601a      	str	r2, [r3, #0]
    pDest++;
 80087a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a2:	3301      	adds	r3, #1
 80087a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	3301      	adds	r3, #1
 80087aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80087ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ae:	3301      	adds	r3, #1
 80087b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80087b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b4:	3301      	adds	r3, #1
 80087b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	3301      	adds	r3, #1
 80087bc:	623b      	str	r3, [r7, #32]
 80087be:	6a3a      	ldr	r2, [r7, #32]
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d3e6      	bcc.n	8008794 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087c6:	8bfb      	ldrh	r3, [r7, #30]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01e      	beq.n	800880a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087d6:	461a      	mov	r2, r3
 80087d8:	f107 0310 	add.w	r3, r7, #16
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f0:	701a      	strb	r2, [r3, #0]
      i++;
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	3301      	adds	r3, #1
 80087f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80087f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fa:	3301      	adds	r3, #1
 80087fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80087fe:	8bfb      	ldrh	r3, [r7, #30]
 8008800:	3b01      	subs	r3, #1
 8008802:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008804:	8bfb      	ldrh	r3, [r7, #30]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1ea      	bne.n	80087e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800880a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800880c:	4618      	mov	r0, r3
 800880e:	372c      	adds	r7, #44	@ 0x2c
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	785b      	ldrb	r3, [r3, #1]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d12c      	bne.n	800888e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	db12      	blt.n	800886c <USB_EPSetStall+0x54>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00f      	beq.n	800886c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	440a      	add	r2, r1
 8008862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008866:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800886a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	0151      	lsls	r1, r2, #5
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	440a      	add	r2, r1
 8008882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008886:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	e02b      	b.n	80088e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	db12      	blt.n	80088c6 <USB_EPSetStall+0xae>
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00f      	beq.n	80088c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	0151      	lsls	r1, r2, #5
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	440a      	add	r2, r1
 80088bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80088c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	0151      	lsls	r1, r2, #5
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	440a      	add	r2, r1
 80088dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80088e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	785b      	ldrb	r3, [r3, #1]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d128      	bne.n	8008962 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	0151      	lsls	r1, r2, #5
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	440a      	add	r2, r1
 8008926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800892a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800892e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	791b      	ldrb	r3, [r3, #4]
 8008934:	2b03      	cmp	r3, #3
 8008936:	d003      	beq.n	8008940 <USB_EPClearStall+0x4c>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	791b      	ldrb	r3, [r3, #4]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d138      	bne.n	80089b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	440a      	add	r2, r1
 8008956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800895a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	e027      	b.n	80089b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	0151      	lsls	r1, r2, #5
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	440a      	add	r2, r1
 8008978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800897c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008980:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	791b      	ldrb	r3, [r3, #4]
 8008986:	2b03      	cmp	r3, #3
 8008988:	d003      	beq.n	8008992 <USB_EPClearStall+0x9e>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	791b      	ldrb	r3, [r3, #4]
 800898e:	2b02      	cmp	r3, #2
 8008990:	d10f      	bne.n	80089b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80089e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	78fb      	ldrb	r3, [r7, #3]
 80089ee:	011b      	lsls	r3, r3, #4
 80089f0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80089f4:	68f9      	ldr	r1, [r7, #12]
 80089f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089fa:	4313      	orrs	r3, r2
 80089fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008a26:	f023 0303 	bic.w	r3, r3, #3
 8008a2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a3a:	f023 0302 	bic.w	r3, r3, #2
 8008a3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b085      	sub	sp, #20
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008a68:	f023 0303 	bic.w	r3, r3, #3
 8008a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a7c:	f043 0302 	orr.w	r3, r3, #2
 8008a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b085      	sub	sp, #20
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	0c1b      	lsrs	r3, r3, #16
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b085      	sub	sp, #20
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	b29b      	uxth	r3, r3
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b085      	sub	sp, #20
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	4013      	ands	r3, r2
 8008b4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b087      	sub	sp, #28
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	460b      	mov	r3, r1
 8008b64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	f003 030f 	and.w	r3, r3, #15
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8a:	01db      	lsls	r3, r3, #7
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ba8:	68bb      	ldr	r3, [r7, #8]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	371c      	adds	r7, #28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008bf0:	f023 0307 	bic.w	r3, r3, #7
 8008bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	460b      	mov	r3, r1
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	333c      	adds	r3, #60	@ 0x3c
 8008c2e:	3304      	adds	r3, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	4a26      	ldr	r2, [pc, #152]	@ (8008cd0 <USB_EP0_OutStart+0xb8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d90a      	bls.n	8008c52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c4c:	d101      	bne.n	8008c52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	e037      	b.n	8008cc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c58:	461a      	mov	r2, r3
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c80:	f043 0318 	orr.w	r3, r3, #24
 8008c84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c94:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008c98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c9a:	7afb      	ldrb	r3, [r7, #11]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10f      	bne.n	8008cc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008cbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	4f54300a 	.word	0x4f54300a

08008cd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cec:	d901      	bls.n	8008cf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e01b      	b.n	8008d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	daf2      	bge.n	8008ce0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	f043 0201 	orr.w	r2, r3, #1
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d16:	d901      	bls.n	8008d1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e006      	b.n	8008d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d0f0      	beq.n	8008d0a <USB_CoreReset+0x36>

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
	...

08008d38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008d3c:	4904      	ldr	r1, [pc, #16]	@ (8008d50 <MX_FATFS_Init+0x18>)
 8008d3e:	4805      	ldr	r0, [pc, #20]	@ (8008d54 <MX_FATFS_Init+0x1c>)
 8008d40:	f002 f98a 	bl	800b058 <FATFS_LinkDriver>
 8008d44:	4603      	mov	r3, r0
 8008d46:	461a      	mov	r2, r3
 8008d48:	4b03      	ldr	r3, [pc, #12]	@ (8008d58 <MX_FATFS_Init+0x20>)
 8008d4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d4c:	bf00      	nop
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	2000037c 	.word	0x2000037c
 8008d54:	0800bb38 	.word	0x0800bb38
 8008d58:	20000378 	.word	0x20000378

08008d5c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008d66:	f000 f8ac 	bl	8008ec2 <BSP_SD_IsDetected>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d001      	beq.n	8008d74 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e012      	b.n	8008d9a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008d74:	480b      	ldr	r0, [pc, #44]	@ (8008da4 <BSP_SD_Init+0x48>)
 8008d76:	f7fb fe75 	bl	8004a64 <HAL_SD_Init>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d109      	bne.n	8008d98 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008d84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008d88:	4806      	ldr	r0, [pc, #24]	@ (8008da4 <BSP_SD_Init+0x48>)
 8008d8a:	f7fc fdef 	bl	800596c <HAL_SD_ConfigWideBusOperation>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008d98:	79fb      	ldrb	r3, [r7, #7]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000144 	.word	0x20000144

08008da8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	4806      	ldr	r0, [pc, #24]	@ (8008de0 <BSP_SD_ReadBlocks+0x38>)
 8008dc6:	f7fb fefd 	bl	8004bc4 <HAL_SD_ReadBlocks>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000144 	.word	0x20000144

08008de4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	4806      	ldr	r0, [pc, #24]	@ (8008e1c <BSP_SD_WriteBlocks+0x38>)
 8008e02:	f7fc f8c5 	bl	8004f90 <HAL_SD_WriteBlocks>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000144 	.word	0x20000144

08008e20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008e24:	4805      	ldr	r0, [pc, #20]	@ (8008e3c <BSP_SD_GetCardState+0x1c>)
 8008e26:	f7fc fe3b 	bl	8005aa0 <HAL_SD_GetCardState>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	bf14      	ite	ne
 8008e30:	2301      	movne	r3, #1
 8008e32:	2300      	moveq	r3, #0
 8008e34:	b2db      	uxtb	r3, r3
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20000144 	.word	0x20000144

08008e40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	4803      	ldr	r0, [pc, #12]	@ (8008e58 <BSP_SD_GetCardInfo+0x18>)
 8008e4c:	f7fc fd62 	bl	8005914 <HAL_SD_GetCardInfo>
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20000144 	.word	0x20000144

08008e5c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008e64:	f000 f818 	bl	8008e98 <BSP_SD_AbortCallback>
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008e78:	f000 f815 	bl	8008ea6 <BSP_SD_WriteCpltCallback>
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008e8c:	f000 f812 	bl	8008eb4 <BSP_SD_ReadCpltCallback>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0

}
 8008e9c:	bf00      	nop
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	af00      	add	r7, sp, #0

}
 8008eaa:	bf00      	nop
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0

}
 8008eb8:	bf00      	nop
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	b2db      	uxtb	r3, r3
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8008f14 <SD_CheckStatus+0x38>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008eec:	f7ff ff98 	bl	8008e20 <BSP_SD_GetCardState>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d107      	bne.n	8008f06 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008ef6:	4b07      	ldr	r3, [pc, #28]	@ (8008f14 <SD_CheckStatus+0x38>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	f023 0301 	bic.w	r3, r3, #1
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	4b04      	ldr	r3, [pc, #16]	@ (8008f14 <SD_CheckStatus+0x38>)
 8008f04:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008f06:	4b03      	ldr	r3, [pc, #12]	@ (8008f14 <SD_CheckStatus+0x38>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	b2db      	uxtb	r3, r3
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000009 	.word	0x20000009

08008f18 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008f22:	4b0b      	ldr	r3, [pc, #44]	@ (8008f50 <SD_initialize+0x38>)
 8008f24:	2201      	movs	r2, #1
 8008f26:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008f28:	f7ff ff18 	bl	8008d5c <BSP_SD_Init>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d107      	bne.n	8008f42 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff ffd1 	bl	8008edc <SD_CheckStatus>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4b04      	ldr	r3, [pc, #16]	@ (8008f50 <SD_initialize+0x38>)
 8008f40:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008f42:	4b03      	ldr	r3, [pc, #12]	@ (8008f50 <SD_initialize+0x38>)
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	b2db      	uxtb	r3, r3
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20000009 	.word	0x20000009

08008f54 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff ffbb 	bl	8008edc <SD_CheckStatus>
 8008f66:	4603      	mov	r3, r0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
 8008f7a:	603b      	str	r3, [r7, #0]
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008f84:	f04f 33ff 	mov.w	r3, #4294967295
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	68b8      	ldr	r0, [r7, #8]
 8008f8e:	f7ff ff0b 	bl	8008da8 <BSP_SD_ReadBlocks>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d107      	bne.n	8008fa8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008f98:	bf00      	nop
 8008f9a:	f7ff ff41 	bl	8008e20 <BSP_SD_GetCardState>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1fa      	bne.n	8008f9a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b086      	sub	sp, #24
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	603b      	str	r3, [r7, #0]
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	68b8      	ldr	r0, [r7, #8]
 8008fd0:	f7ff ff08 	bl	8008de4 <BSP_SD_WriteBlocks>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d107      	bne.n	8008fea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008fda:	bf00      	nop
 8008fdc:	f7ff ff20 	bl	8008e20 <BSP_SD_GetCardState>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1fa      	bne.n	8008fdc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08c      	sub	sp, #48	@ 0x30
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	603a      	str	r2, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
 8009000:	460b      	mov	r3, r1
 8009002:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800900a:	4b25      	ldr	r3, [pc, #148]	@ (80090a0 <SD_ioctl+0xac>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	b2db      	uxtb	r3, r3
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <SD_ioctl+0x28>
 8009018:	2303      	movs	r3, #3
 800901a:	e03c      	b.n	8009096 <SD_ioctl+0xa2>

  switch (cmd)
 800901c:	79bb      	ldrb	r3, [r7, #6]
 800901e:	2b03      	cmp	r3, #3
 8009020:	d834      	bhi.n	800908c <SD_ioctl+0x98>
 8009022:	a201      	add	r2, pc, #4	@ (adr r2, 8009028 <SD_ioctl+0x34>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009039 	.word	0x08009039
 800902c:	08009041 	.word	0x08009041
 8009030:	08009059 	.word	0x08009059
 8009034:	08009073 	.word	0x08009073
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800903e:	e028      	b.n	8009092 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009040:	f107 030c 	add.w	r3, r7, #12
 8009044:	4618      	mov	r0, r3
 8009046:	f7ff fefb 	bl	8008e40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800904a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009056:	e01c      	b.n	8009092 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009058:	f107 030c 	add.w	r3, r7, #12
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff feef 	bl	8008e40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009064:	b29a      	uxth	r2, r3
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009070:	e00f      	b.n	8009092 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009072:	f107 030c 	add.w	r3, r7, #12
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff fee2 	bl	8008e40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800907c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907e:	0a5a      	lsrs	r2, r3, #9
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800908a:	e002      	b.n	8009092 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800908c:	2304      	movs	r3, #4
 800908e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009096:	4618      	mov	r0, r3
 8009098:	3730      	adds	r7, #48	@ 0x30
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	20000009 	.word	0x20000009

080090a4 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80090a8:	bf00      	nop
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
	...

080090b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80090c4:	f002 fc88 	bl	800b9d8 <USBD_static_malloc>
 80090c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d109      	bne.n	80090e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	32b0      	adds	r2, #176	@ 0xb0
 80090da:	2100      	movs	r1, #0
 80090dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80090e0:	2302      	movs	r3, #2
 80090e2:	e0d4      	b.n	800928e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80090e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80090e8:	2100      	movs	r1, #0
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f002 fcb8 	bl	800ba60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	32b0      	adds	r2, #176	@ 0xb0
 80090fa:	68f9      	ldr	r1, [r7, #12]
 80090fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	32b0      	adds	r2, #176	@ 0xb0
 800910a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	7c1b      	ldrb	r3, [r3, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d138      	bne.n	800918e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800911c:	4b5e      	ldr	r3, [pc, #376]	@ (8009298 <USBD_CDC_Init+0x1e4>)
 800911e:	7819      	ldrb	r1, [r3, #0]
 8009120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009124:	2202      	movs	r2, #2
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f002 fb33 	bl	800b792 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800912c:	4b5a      	ldr	r3, [pc, #360]	@ (8009298 <USBD_CDC_Init+0x1e4>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 020f 	and.w	r2, r3, #15
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	440b      	add	r3, r1
 8009140:	3324      	adds	r3, #36	@ 0x24
 8009142:	2201      	movs	r2, #1
 8009144:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009146:	4b55      	ldr	r3, [pc, #340]	@ (800929c <USBD_CDC_Init+0x1e8>)
 8009148:	7819      	ldrb	r1, [r3, #0]
 800914a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800914e:	2202      	movs	r2, #2
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f002 fb1e 	bl	800b792 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009156:	4b51      	ldr	r3, [pc, #324]	@ (800929c <USBD_CDC_Init+0x1e8>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f003 020f 	and.w	r2, r3, #15
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800916e:	2201      	movs	r2, #1
 8009170:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009172:	4b4b      	ldr	r3, [pc, #300]	@ (80092a0 <USBD_CDC_Init+0x1ec>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	f003 020f 	and.w	r2, r3, #15
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	4613      	mov	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	440b      	add	r3, r1
 8009186:	3326      	adds	r3, #38	@ 0x26
 8009188:	2210      	movs	r2, #16
 800918a:	801a      	strh	r2, [r3, #0]
 800918c:	e035      	b.n	80091fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800918e:	4b42      	ldr	r3, [pc, #264]	@ (8009298 <USBD_CDC_Init+0x1e4>)
 8009190:	7819      	ldrb	r1, [r3, #0]
 8009192:	2340      	movs	r3, #64	@ 0x40
 8009194:	2202      	movs	r2, #2
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f002 fafb 	bl	800b792 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800919c:	4b3e      	ldr	r3, [pc, #248]	@ (8009298 <USBD_CDC_Init+0x1e4>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	f003 020f 	and.w	r2, r3, #15
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	4613      	mov	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	440b      	add	r3, r1
 80091b0:	3324      	adds	r3, #36	@ 0x24
 80091b2:	2201      	movs	r2, #1
 80091b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091b6:	4b39      	ldr	r3, [pc, #228]	@ (800929c <USBD_CDC_Init+0x1e8>)
 80091b8:	7819      	ldrb	r1, [r3, #0]
 80091ba:	2340      	movs	r3, #64	@ 0x40
 80091bc:	2202      	movs	r2, #2
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f002 fae7 	bl	800b792 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80091c4:	4b35      	ldr	r3, [pc, #212]	@ (800929c <USBD_CDC_Init+0x1e8>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	f003 020f 	and.w	r2, r3, #15
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80091dc:	2201      	movs	r2, #1
 80091de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091e0:	4b2f      	ldr	r3, [pc, #188]	@ (80092a0 <USBD_CDC_Init+0x1ec>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	f003 020f 	and.w	r2, r3, #15
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	3326      	adds	r3, #38	@ 0x26
 80091f6:	2210      	movs	r2, #16
 80091f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091fa:	4b29      	ldr	r3, [pc, #164]	@ (80092a0 <USBD_CDC_Init+0x1ec>)
 80091fc:	7819      	ldrb	r1, [r3, #0]
 80091fe:	2308      	movs	r3, #8
 8009200:	2203      	movs	r2, #3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f002 fac5 	bl	800b792 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009208:	4b25      	ldr	r3, [pc, #148]	@ (80092a0 <USBD_CDC_Init+0x1ec>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	f003 020f 	and.w	r2, r3, #15
 8009210:	6879      	ldr	r1, [r7, #4]
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	3324      	adds	r3, #36	@ 0x24
 800921e:	2201      	movs	r2, #1
 8009220:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	33b0      	adds	r3, #176	@ 0xb0
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009258:	2302      	movs	r3, #2
 800925a:	e018      	b.n	800928e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7c1b      	ldrb	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10a      	bne.n	800927a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009264:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <USBD_CDC_Init+0x1e8>)
 8009266:	7819      	ldrb	r1, [r3, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800926e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f002 fb7c 	bl	800b970 <USBD_LL_PrepareReceive>
 8009278:	e008      	b.n	800928c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800927a:	4b08      	ldr	r3, [pc, #32]	@ (800929c <USBD_CDC_Init+0x1e8>)
 800927c:	7819      	ldrb	r1, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009284:	2340      	movs	r3, #64	@ 0x40
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f002 fb72 	bl	800b970 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20000093 	.word	0x20000093
 800929c:	20000094 	.word	0x20000094
 80092a0:	20000095 	.word	0x20000095

080092a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80092b0:	4b3a      	ldr	r3, [pc, #232]	@ (800939c <USBD_CDC_DeInit+0xf8>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f002 fa91 	bl	800b7de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80092bc:	4b37      	ldr	r3, [pc, #220]	@ (800939c <USBD_CDC_DeInit+0xf8>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f003 020f 	and.w	r2, r3, #15
 80092c4:	6879      	ldr	r1, [r7, #4]
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	440b      	add	r3, r1
 80092d0:	3324      	adds	r3, #36	@ 0x24
 80092d2:	2200      	movs	r2, #0
 80092d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80092d6:	4b32      	ldr	r3, [pc, #200]	@ (80093a0 <USBD_CDC_DeInit+0xfc>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f002 fa7e 	bl	800b7de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80092e2:	4b2f      	ldr	r3, [pc, #188]	@ (80093a0 <USBD_CDC_DeInit+0xfc>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	f003 020f 	and.w	r2, r3, #15
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092fa:	2200      	movs	r2, #0
 80092fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80092fe:	4b29      	ldr	r3, [pc, #164]	@ (80093a4 <USBD_CDC_DeInit+0x100>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f002 fa6a 	bl	800b7de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800930a:	4b26      	ldr	r3, [pc, #152]	@ (80093a4 <USBD_CDC_DeInit+0x100>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f003 020f 	and.w	r2, r3, #15
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	3324      	adds	r3, #36	@ 0x24
 8009320:	2200      	movs	r2, #0
 8009322:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009324:	4b1f      	ldr	r3, [pc, #124]	@ (80093a4 <USBD_CDC_DeInit+0x100>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 020f 	and.w	r2, r3, #15
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	4613      	mov	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	440b      	add	r3, r1
 8009338:	3326      	adds	r3, #38	@ 0x26
 800933a:	2200      	movs	r2, #0
 800933c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	32b0      	adds	r2, #176	@ 0xb0
 8009348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d01f      	beq.n	8009390 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	33b0      	adds	r3, #176	@ 0xb0
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	32b0      	adds	r2, #176	@ 0xb0
 800936e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009372:	4618      	mov	r0, r3
 8009374:	f002 fb3e 	bl	800b9f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	32b0      	adds	r2, #176	@ 0xb0
 8009382:	2100      	movs	r1, #0
 8009384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20000093 	.word	0x20000093
 80093a0:	20000094 	.word	0x20000094
 80093a4:	20000095 	.word	0x20000095

080093a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	32b0      	adds	r2, #176	@ 0xb0
 80093bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e0bf      	b.n	8009558 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d050      	beq.n	8009486 <USBD_CDC_Setup+0xde>
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	f040 80af 	bne.w	8009548 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	88db      	ldrh	r3, [r3, #6]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d03a      	beq.n	8009468 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	b25b      	sxtb	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	da1b      	bge.n	8009434 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	33b0      	adds	r3, #176	@ 0xb0
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009412:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	88d2      	ldrh	r2, [r2, #6]
 8009418:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	88db      	ldrh	r3, [r3, #6]
 800941e:	2b07      	cmp	r3, #7
 8009420:	bf28      	it	cs
 8009422:	2307      	movcs	r3, #7
 8009424:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	89fa      	ldrh	r2, [r7, #14]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 fd47 	bl	800aec0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009432:	e090      	b.n	8009556 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	785a      	ldrb	r2, [r3, #1]
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	88db      	ldrh	r3, [r3, #6]
 8009442:	2b3f      	cmp	r3, #63	@ 0x3f
 8009444:	d803      	bhi.n	800944e <USBD_CDC_Setup+0xa6>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	88db      	ldrh	r3, [r3, #6]
 800944a:	b2da      	uxtb	r2, r3
 800944c:	e000      	b.n	8009450 <USBD_CDC_Setup+0xa8>
 800944e:	2240      	movs	r2, #64	@ 0x40
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009456:	6939      	ldr	r1, [r7, #16]
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800945e:	461a      	mov	r2, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 fd59 	bl	800af18 <USBD_CtlPrepareRx>
      break;
 8009466:	e076      	b.n	8009556 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	33b0      	adds	r3, #176	@ 0xb0
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	7850      	ldrb	r0, [r2, #1]
 800947e:	2200      	movs	r2, #0
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	4798      	blx	r3
      break;
 8009484:	e067      	b.n	8009556 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	785b      	ldrb	r3, [r3, #1]
 800948a:	2b0b      	cmp	r3, #11
 800948c:	d851      	bhi.n	8009532 <USBD_CDC_Setup+0x18a>
 800948e:	a201      	add	r2, pc, #4	@ (adr r2, 8009494 <USBD_CDC_Setup+0xec>)
 8009490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009494:	080094c5 	.word	0x080094c5
 8009498:	08009541 	.word	0x08009541
 800949c:	08009533 	.word	0x08009533
 80094a0:	08009533 	.word	0x08009533
 80094a4:	08009533 	.word	0x08009533
 80094a8:	08009533 	.word	0x08009533
 80094ac:	08009533 	.word	0x08009533
 80094b0:	08009533 	.word	0x08009533
 80094b4:	08009533 	.word	0x08009533
 80094b8:	08009533 	.word	0x08009533
 80094bc:	080094ef 	.word	0x080094ef
 80094c0:	08009519 	.word	0x08009519
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	d107      	bne.n	80094e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094d0:	f107 030a 	add.w	r3, r7, #10
 80094d4:	2202      	movs	r2, #2
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 fcf1 	bl	800aec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094de:	e032      	b.n	8009546 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 fc7b 	bl	800adde <USBD_CtlError>
            ret = USBD_FAIL;
 80094e8:	2303      	movs	r3, #3
 80094ea:	75fb      	strb	r3, [r7, #23]
          break;
 80094ec:	e02b      	b.n	8009546 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d107      	bne.n	800950a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80094fa:	f107 030d 	add.w	r3, r7, #13
 80094fe:	2201      	movs	r2, #1
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f001 fcdc 	bl	800aec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009508:	e01d      	b.n	8009546 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 fc66 	bl	800adde <USBD_CtlError>
            ret = USBD_FAIL;
 8009512:	2303      	movs	r3, #3
 8009514:	75fb      	strb	r3, [r7, #23]
          break;
 8009516:	e016      	b.n	8009546 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b03      	cmp	r3, #3
 8009522:	d00f      	beq.n	8009544 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f001 fc59 	bl	800adde <USBD_CtlError>
            ret = USBD_FAIL;
 800952c:	2303      	movs	r3, #3
 800952e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009530:	e008      	b.n	8009544 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 fc52 	bl	800adde <USBD_CtlError>
          ret = USBD_FAIL;
 800953a:	2303      	movs	r3, #3
 800953c:	75fb      	strb	r3, [r7, #23]
          break;
 800953e:	e002      	b.n	8009546 <USBD_CDC_Setup+0x19e>
          break;
 8009540:	bf00      	nop
 8009542:	e008      	b.n	8009556 <USBD_CDC_Setup+0x1ae>
          break;
 8009544:	bf00      	nop
      }
      break;
 8009546:	e006      	b.n	8009556 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 fc47 	bl	800adde <USBD_CtlError>
      ret = USBD_FAIL;
 8009550:	2303      	movs	r3, #3
 8009552:	75fb      	strb	r3, [r7, #23]
      break;
 8009554:	bf00      	nop
  }

  return (uint8_t)ret;
 8009556:	7dfb      	ldrb	r3, [r7, #23]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009572:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	32b0      	adds	r2, #176	@ 0xb0
 800957e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009586:	2303      	movs	r3, #3
 8009588:	e065      	b.n	8009656 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	32b0      	adds	r2, #176	@ 0xb0
 8009594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009598:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800959a:	78fb      	ldrb	r3, [r7, #3]
 800959c:	f003 020f 	and.w	r2, r3, #15
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	440b      	add	r3, r1
 80095ac:	3318      	adds	r3, #24
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d02f      	beq.n	8009614 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	f003 020f 	and.w	r2, r3, #15
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	440b      	add	r3, r1
 80095c6:	3318      	adds	r3, #24
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	f003 010f 	and.w	r1, r3, #15
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	460b      	mov	r3, r1
 80095d4:	00db      	lsls	r3, r3, #3
 80095d6:	440b      	add	r3, r1
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4403      	add	r3, r0
 80095dc:	331c      	adds	r3, #28
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80095e4:	fb01 f303 	mul.w	r3, r1, r3
 80095e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d112      	bne.n	8009614 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	f003 020f 	and.w	r2, r3, #15
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	440b      	add	r3, r1
 8009600:	3318      	adds	r3, #24
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009606:	78f9      	ldrb	r1, [r7, #3]
 8009608:	2300      	movs	r3, #0
 800960a:	2200      	movs	r2, #0
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f002 f98e 	bl	800b92e <USBD_LL_Transmit>
 8009612:	e01f      	b.n	8009654 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2200      	movs	r2, #0
 8009618:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	33b0      	adds	r3, #176	@ 0xb0
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d010      	beq.n	8009654 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	33b0      	adds	r3, #176	@ 0xb0
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009650:	78fa      	ldrb	r2, [r7, #3]
 8009652:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	32b0      	adds	r2, #176	@ 0xb0
 8009674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009678:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	32b0      	adds	r2, #176	@ 0xb0
 8009684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800968c:	2303      	movs	r3, #3
 800968e:	e01a      	b.n	80096c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f002 f98c 	bl	800b9b2 <USBD_LL_GetRxDataSize>
 800969a:	4602      	mov	r2, r0
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	33b0      	adds	r3, #176	@ 0xb0
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80096c0:	4611      	mov	r1, r2
 80096c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b084      	sub	sp, #16
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	32b0      	adds	r2, #176	@ 0xb0
 80096e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e024      	b.n	800973a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	33b0      	adds	r3, #176	@ 0xb0
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d019      	beq.n	8009738 <USBD_CDC_EP0_RxReady+0x6a>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800970a:	2bff      	cmp	r3, #255	@ 0xff
 800970c:	d014      	beq.n	8009738 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	33b0      	adds	r3, #176	@ 0xb0
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009726:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800972e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	22ff      	movs	r2, #255	@ 0xff
 8009734:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800974c:	2182      	movs	r1, #130	@ 0x82
 800974e:	4818      	ldr	r0, [pc, #96]	@ (80097b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009750:	f000 fd0f 	bl	800a172 <USBD_GetEpDesc>
 8009754:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009756:	2101      	movs	r1, #1
 8009758:	4815      	ldr	r0, [pc, #84]	@ (80097b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800975a:	f000 fd0a 	bl	800a172 <USBD_GetEpDesc>
 800975e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009760:	2181      	movs	r1, #129	@ 0x81
 8009762:	4813      	ldr	r0, [pc, #76]	@ (80097b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009764:	f000 fd05 	bl	800a172 <USBD_GetEpDesc>
 8009768:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2210      	movs	r2, #16
 8009774:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d006      	beq.n	800978a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2200      	movs	r2, #0
 8009780:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009784:	711a      	strb	r2, [r3, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d006      	beq.n	800979e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009798:	711a      	strb	r2, [r3, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2243      	movs	r2, #67	@ 0x43
 80097a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097a4:	4b02      	ldr	r3, [pc, #8]	@ (80097b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20000050 	.word	0x20000050

080097b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097bc:	2182      	movs	r1, #130	@ 0x82
 80097be:	4818      	ldr	r0, [pc, #96]	@ (8009820 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097c0:	f000 fcd7 	bl	800a172 <USBD_GetEpDesc>
 80097c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097c6:	2101      	movs	r1, #1
 80097c8:	4815      	ldr	r0, [pc, #84]	@ (8009820 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097ca:	f000 fcd2 	bl	800a172 <USBD_GetEpDesc>
 80097ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097d0:	2181      	movs	r1, #129	@ 0x81
 80097d2:	4813      	ldr	r0, [pc, #76]	@ (8009820 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097d4:	f000 fccd 	bl	800a172 <USBD_GetEpDesc>
 80097d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2210      	movs	r2, #16
 80097e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d006      	beq.n	80097fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	2200      	movs	r2, #0
 80097f0:	711a      	strb	r2, [r3, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f042 0202 	orr.w	r2, r2, #2
 80097f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d006      	beq.n	800980e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	711a      	strb	r2, [r3, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f042 0202 	orr.w	r2, r2, #2
 800980c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2243      	movs	r2, #67	@ 0x43
 8009812:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009814:	4b02      	ldr	r3, [pc, #8]	@ (8009820 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000050 	.word	0x20000050

08009824 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800982c:	2182      	movs	r1, #130	@ 0x82
 800982e:	4818      	ldr	r0, [pc, #96]	@ (8009890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009830:	f000 fc9f 	bl	800a172 <USBD_GetEpDesc>
 8009834:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009836:	2101      	movs	r1, #1
 8009838:	4815      	ldr	r0, [pc, #84]	@ (8009890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800983a:	f000 fc9a 	bl	800a172 <USBD_GetEpDesc>
 800983e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009840:	2181      	movs	r1, #129	@ 0x81
 8009842:	4813      	ldr	r0, [pc, #76]	@ (8009890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009844:	f000 fc95 	bl	800a172 <USBD_GetEpDesc>
 8009848:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2210      	movs	r2, #16
 8009854:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d006      	beq.n	800986a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	2200      	movs	r2, #0
 8009860:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009864:	711a      	strb	r2, [r3, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d006      	beq.n	800987e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009878:	711a      	strb	r2, [r3, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2243      	movs	r2, #67	@ 0x43
 8009882:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009884:	4b02      	ldr	r3, [pc, #8]	@ (8009890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000050 	.word	0x20000050

08009894 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	220a      	movs	r2, #10
 80098a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80098a2:	4b03      	ldr	r3, [pc, #12]	@ (80098b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	2000000c 	.word	0x2000000c

080098b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e009      	b.n	80098dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	33b0      	adds	r3, #176	@ 0xb0
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	32b0      	adds	r2, #176	@ 0xb0
 80098fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009902:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800990a:	2303      	movs	r3, #3
 800990c:	e008      	b.n	8009920 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	371c      	adds	r7, #28
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	32b0      	adds	r2, #176	@ 0xb0
 8009940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009944:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800994c:	2303      	movs	r3, #3
 800994e:	e004      	b.n	800995a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
	...

08009968 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	32b0      	adds	r2, #176	@ 0xb0
 800997a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	32b0      	adds	r2, #176	@ 0xb0
 800998a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009992:	2303      	movs	r3, #3
 8009994:	e018      	b.n	80099c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	7c1b      	ldrb	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10a      	bne.n	80099b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800999e:	4b0c      	ldr	r3, [pc, #48]	@ (80099d0 <USBD_CDC_ReceivePacket+0x68>)
 80099a0:	7819      	ldrb	r1, [r3, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 ffdf 	bl	800b970 <USBD_LL_PrepareReceive>
 80099b2:	e008      	b.n	80099c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099b4:	4b06      	ldr	r3, [pc, #24]	@ (80099d0 <USBD_CDC_ReceivePacket+0x68>)
 80099b6:	7819      	ldrb	r1, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099be:	2340      	movs	r3, #64	@ 0x40
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f001 ffd5 	bl	800b970 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20000094 	.word	0x20000094

080099d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	4613      	mov	r3, r2
 80099e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e01f      	b.n	8009a2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	79fa      	ldrb	r2, [r7, #7]
 8009a1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f001 fe4f 	bl	800b6c4 <USBD_LL_Init>
 8009a26:	4603      	mov	r3, r0
 8009a28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e025      	b.n	8009a98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	32ae      	adds	r2, #174	@ 0xae
 8009a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00f      	beq.n	8009a88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	32ae      	adds	r2, #174	@ 0xae
 8009a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	f107 020e 	add.w	r2, r7, #14
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	4798      	blx	r3
 8009a80:	4602      	mov	r2, r0
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 fe57 	bl	800b75c <USBD_LL_Start>
 8009aae:	4603      	mov	r3, r0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d009      	beq.n	8009afc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	78fa      	ldrb	r2, [r7, #3]
 8009af2:	4611      	mov	r1, r2
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	4798      	blx	r3
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	78fa      	ldrb	r2, [r7, #3]
 8009b20:	4611      	mov	r1, r2
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	4798      	blx	r3
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 f90c 	bl	800ad6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009b60:	461a      	mov	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009b6e:	f003 031f 	and.w	r3, r3, #31
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d01a      	beq.n	8009bac <USBD_LL_SetupStage+0x72>
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d822      	bhi.n	8009bc0 <USBD_LL_SetupStage+0x86>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <USBD_LL_SetupStage+0x4a>
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d00a      	beq.n	8009b98 <USBD_LL_SetupStage+0x5e>
 8009b82:	e01d      	b.n	8009bc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fb63 	bl	800a258 <USBD_StdDevReq>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]
      break;
 8009b96:	e020      	b.n	8009bda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fbcb 	bl	800a33c <USBD_StdItfReq>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8009baa:	e016      	b.n	8009bda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fc2d 	bl	800a414 <USBD_StdEPReq>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8009bbe:	e00c      	b.n	8009bda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009bc6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f001 fe24 	bl	800b81c <USBD_LL_StallEP>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8009bd8:	bf00      	nop
  }

  return ret;
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	460b      	mov	r3, r1
 8009bee:	607a      	str	r2, [r7, #4]
 8009bf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009bf6:	7afb      	ldrb	r3, [r7, #11]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d16e      	bne.n	8009cda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009c02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	f040 8098 	bne.w	8009d40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d913      	bls.n	8009c44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	689a      	ldr	r2, [r3, #8]
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	1ad2      	subs	r2, r2, r3
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	4293      	cmp	r3, r2
 8009c34:	bf28      	it	cs
 8009c36:	4613      	movcs	r3, r2
 8009c38:	461a      	mov	r2, r3
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f001 f988 	bl	800af52 <USBD_CtlContinueRx>
 8009c42:	e07d      	b.n	8009d40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009c4a:	f003 031f 	and.w	r3, r3, #31
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d014      	beq.n	8009c7c <USBD_LL_DataOutStage+0x98>
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d81d      	bhi.n	8009c92 <USBD_LL_DataOutStage+0xae>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <USBD_LL_DataOutStage+0x7c>
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d003      	beq.n	8009c66 <USBD_LL_DataOutStage+0x82>
 8009c5e:	e018      	b.n	8009c92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	75bb      	strb	r3, [r7, #22]
            break;
 8009c64:	e018      	b.n	8009c98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	4619      	mov	r1, r3
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 fa64 	bl	800a13e <USBD_CoreFindIF>
 8009c76:	4603      	mov	r3, r0
 8009c78:	75bb      	strb	r3, [r7, #22]
            break;
 8009c7a:	e00d      	b.n	8009c98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	4619      	mov	r1, r3
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 fa66 	bl	800a158 <USBD_CoreFindEP>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	75bb      	strb	r3, [r7, #22]
            break;
 8009c90:	e002      	b.n	8009c98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	75bb      	strb	r3, [r7, #22]
            break;
 8009c96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009c98:	7dbb      	ldrb	r3, [r7, #22]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d119      	bne.n	8009cd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d113      	bne.n	8009cd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009caa:	7dba      	ldrb	r2, [r7, #22]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	32ae      	adds	r2, #174	@ 0xae
 8009cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00b      	beq.n	8009cd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009cba:	7dba      	ldrb	r2, [r7, #22]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009cc2:	7dba      	ldrb	r2, [r7, #22]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	32ae      	adds	r2, #174	@ 0xae
 8009cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f001 f94e 	bl	800af74 <USBD_CtlSendStatus>
 8009cd8:	e032      	b.n	8009d40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009cda:	7afb      	ldrb	r3, [r7, #11]
 8009cdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fa37 	bl	800a158 <USBD_CoreFindEP>
 8009cea:	4603      	mov	r3, r0
 8009cec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cee:	7dbb      	ldrb	r3, [r7, #22]
 8009cf0:	2bff      	cmp	r3, #255	@ 0xff
 8009cf2:	d025      	beq.n	8009d40 <USBD_LL_DataOutStage+0x15c>
 8009cf4:	7dbb      	ldrb	r3, [r7, #22]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d122      	bne.n	8009d40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d117      	bne.n	8009d36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009d06:	7dba      	ldrb	r2, [r7, #22]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	32ae      	adds	r2, #174	@ 0xae
 8009d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00f      	beq.n	8009d36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009d16:	7dba      	ldrb	r2, [r7, #22]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009d1e:	7dba      	ldrb	r2, [r7, #22]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	32ae      	adds	r2, #174	@ 0xae
 8009d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	7afa      	ldrb	r2, [r7, #11]
 8009d2c:	4611      	mov	r1, r2
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	4798      	blx	r3
 8009d32:	4603      	mov	r3, r0
 8009d34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d001      	beq.n	8009d40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	e000      	b.n	8009d42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b086      	sub	sp, #24
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	460b      	mov	r3, r1
 8009d54:	607a      	str	r2, [r7, #4]
 8009d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d16f      	bne.n	8009e3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3314      	adds	r3, #20
 8009d62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d15a      	bne.n	8009e24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d914      	bls.n	8009da4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	689a      	ldr	r2, [r3, #8]
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	1ad2      	subs	r2, r2, r3
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f001 f8b0 	bl	800aef6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d96:	2300      	movs	r3, #0
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f001 fde7 	bl	800b970 <USBD_LL_PrepareReceive>
 8009da2:	e03f      	b.n	8009e24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	68da      	ldr	r2, [r3, #12]
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d11c      	bne.n	8009dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d316      	bcc.n	8009dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d20f      	bcs.n	8009dea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009dca:	2200      	movs	r2, #0
 8009dcc:	2100      	movs	r1, #0
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f001 f891 	bl	800aef6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ddc:	2300      	movs	r3, #0
 8009dde:	2200      	movs	r2, #0
 8009de0:	2100      	movs	r1, #0
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f001 fdc4 	bl	800b970 <USBD_LL_PrepareReceive>
 8009de8:	e01c      	b.n	8009e24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d10f      	bne.n	8009e16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d009      	beq.n	8009e16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e16:	2180      	movs	r1, #128	@ 0x80
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f001 fcff 	bl	800b81c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f001 f8bb 	bl	800af9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d03a      	beq.n	8009ea4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f7ff fe42 	bl	8009ab8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009e3c:	e032      	b.n	8009ea4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009e3e:	7afb      	ldrb	r3, [r7, #11]
 8009e40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	4619      	mov	r1, r3
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 f985 	bl	800a158 <USBD_CoreFindEP>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	2bff      	cmp	r3, #255	@ 0xff
 8009e56:	d025      	beq.n	8009ea4 <USBD_LL_DataInStage+0x15a>
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d122      	bne.n	8009ea4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d11c      	bne.n	8009ea4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009e6a:	7dfa      	ldrb	r2, [r7, #23]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	32ae      	adds	r2, #174	@ 0xae
 8009e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d014      	beq.n	8009ea4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009e7a:	7dfa      	ldrb	r2, [r7, #23]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009e82:	7dfa      	ldrb	r2, [r7, #23]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	32ae      	adds	r2, #174	@ 0xae
 8009e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	7afa      	ldrb	r2, [r7, #11]
 8009e90:	4611      	mov	r1, r2
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	4798      	blx	r3
 8009e96:	4603      	mov	r3, r0
 8009e98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009e9a:	7dbb      	ldrb	r3, [r7, #22]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009ea0:	7dbb      	ldrb	r3, [r7, #22]
 8009ea2:	e000      	b.n	8009ea6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d014      	beq.n	8009f14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00e      	beq.n	8009f14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	6852      	ldr	r2, [r2, #4]
 8009f02:	b2d2      	uxtb	r2, r2
 8009f04:	4611      	mov	r1, r2
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	4798      	blx	r3
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009f10:	2303      	movs	r3, #3
 8009f12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f14:	2340      	movs	r3, #64	@ 0x40
 8009f16:	2200      	movs	r2, #0
 8009f18:	2100      	movs	r1, #0
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 fc39 	bl	800b792 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2240      	movs	r2, #64	@ 0x40
 8009f2c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f30:	2340      	movs	r3, #64	@ 0x40
 8009f32:	2200      	movs	r2, #0
 8009f34:	2180      	movs	r1, #128	@ 0x80
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 fc2b 	bl	800b792 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2240      	movs	r2, #64	@ 0x40
 8009f46:	621a      	str	r2, [r3, #32]

  return ret;
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b083      	sub	sp, #12
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	78fa      	ldrb	r2, [r7, #3]
 8009f62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b083      	sub	sp, #12
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	d006      	beq.n	8009f94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2204      	movs	r2, #4
 8009f98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b083      	sub	sp, #12
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d106      	bne.n	8009fcc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d110      	bne.n	800a010 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00b      	beq.n	800a010 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d005      	beq.n	800a010 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	460b      	mov	r3, r1
 800a024:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	32ae      	adds	r2, #174	@ 0xae
 800a030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a038:	2303      	movs	r3, #3
 800a03a:	e01c      	b.n	800a076 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b03      	cmp	r3, #3
 800a046:	d115      	bne.n	800a074 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	32ae      	adds	r2, #174	@ 0xae
 800a052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00b      	beq.n	800a074 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	32ae      	adds	r2, #174	@ 0xae
 800a066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	78fa      	ldrb	r2, [r7, #3]
 800a06e:	4611      	mov	r1, r2
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b082      	sub	sp, #8
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	460b      	mov	r3, r1
 800a088:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	32ae      	adds	r2, #174	@ 0xae
 800a094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e01c      	b.n	800a0da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b03      	cmp	r3, #3
 800a0aa:	d115      	bne.n	800a0d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	32ae      	adds	r2, #174	@ 0xae
 800a0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	32ae      	adds	r2, #174	@ 0xae
 800a0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b083      	sub	sp, #12
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00e      	beq.n	800a134 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	6852      	ldr	r2, [r2, #4]
 800a122:	b2d2      	uxtb	r2, r2
 800a124:	4611      	mov	r1, r2
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	4798      	blx	r3
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a130:	2303      	movs	r3, #3
 800a132:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a134:	7bfb      	ldrb	r3, [r7, #15]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a14a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	460b      	mov	r3, r1
 800a162:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a164:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a166:	4618      	mov	r0, r3
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a186:	2300      	movs	r3, #0
 800a188:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	885b      	ldrh	r3, [r3, #2]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	7812      	ldrb	r2, [r2, #0]
 800a194:	4293      	cmp	r3, r2
 800a196:	d91f      	bls.n	800a1d8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a19e:	e013      	b.n	800a1c8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a1a0:	f107 030a 	add.w	r3, r7, #10
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6978      	ldr	r0, [r7, #20]
 800a1a8:	f000 f81b 	bl	800a1e2 <USBD_GetNextDesc>
 800a1ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	785b      	ldrb	r3, [r3, #1]
 800a1b2:	2b05      	cmp	r3, #5
 800a1b4:	d108      	bne.n	800a1c8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	789b      	ldrb	r3, [r3, #2]
 800a1be:	78fa      	ldrb	r2, [r7, #3]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d008      	beq.n	800a1d6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	885b      	ldrh	r3, [r3, #2]
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	897b      	ldrh	r3, [r7, #10]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d8e5      	bhi.n	800a1a0 <USBD_GetEpDesc+0x2e>
 800a1d4:	e000      	b.n	800a1d8 <USBD_GetEpDesc+0x66>
          break;
 800a1d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a1d8:	693b      	ldr	r3, [r7, #16]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	7812      	ldrb	r2, [r2, #0]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4413      	add	r3, r2
 800a20a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a20c:	68fb      	ldr	r3, [r7, #12]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b087      	sub	sp, #28
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	3301      	adds	r3, #1
 800a230:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a238:	8a3b      	ldrh	r3, [r7, #16]
 800a23a:	021b      	lsls	r3, r3, #8
 800a23c:	b21a      	sxth	r2, r3
 800a23e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a242:	4313      	orrs	r3, r2
 800a244:	b21b      	sxth	r3, r3
 800a246:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a248:	89fb      	ldrh	r3, [r7, #14]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
	...

0800a258 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a26e:	2b40      	cmp	r3, #64	@ 0x40
 800a270:	d005      	beq.n	800a27e <USBD_StdDevReq+0x26>
 800a272:	2b40      	cmp	r3, #64	@ 0x40
 800a274:	d857      	bhi.n	800a326 <USBD_StdDevReq+0xce>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00f      	beq.n	800a29a <USBD_StdDevReq+0x42>
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	d153      	bne.n	800a326 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	32ae      	adds	r2, #174	@ 0xae
 800a288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	4798      	blx	r3
 800a294:	4603      	mov	r3, r0
 800a296:	73fb      	strb	r3, [r7, #15]
      break;
 800a298:	e04a      	b.n	800a330 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	785b      	ldrb	r3, [r3, #1]
 800a29e:	2b09      	cmp	r3, #9
 800a2a0:	d83b      	bhi.n	800a31a <USBD_StdDevReq+0xc2>
 800a2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a8 <USBD_StdDevReq+0x50>)
 800a2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a8:	0800a2fd 	.word	0x0800a2fd
 800a2ac:	0800a311 	.word	0x0800a311
 800a2b0:	0800a31b 	.word	0x0800a31b
 800a2b4:	0800a307 	.word	0x0800a307
 800a2b8:	0800a31b 	.word	0x0800a31b
 800a2bc:	0800a2db 	.word	0x0800a2db
 800a2c0:	0800a2d1 	.word	0x0800a2d1
 800a2c4:	0800a31b 	.word	0x0800a31b
 800a2c8:	0800a2f3 	.word	0x0800a2f3
 800a2cc:	0800a2e5 	.word	0x0800a2e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fa3c 	bl	800a750 <USBD_GetDescriptor>
          break;
 800a2d8:	e024      	b.n	800a324 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fba1 	bl	800aa24 <USBD_SetAddress>
          break;
 800a2e2:	e01f      	b.n	800a324 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fbe0 	bl	800aaac <USBD_SetConfig>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	73fb      	strb	r3, [r7, #15]
          break;
 800a2f0:	e018      	b.n	800a324 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fc83 	bl	800ac00 <USBD_GetConfig>
          break;
 800a2fa:	e013      	b.n	800a324 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fcb4 	bl	800ac6c <USBD_GetStatus>
          break;
 800a304:	e00e      	b.n	800a324 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fce3 	bl	800acd4 <USBD_SetFeature>
          break;
 800a30e:	e009      	b.n	800a324 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fd07 	bl	800ad26 <USBD_ClrFeature>
          break;
 800a318:	e004      	b.n	800a324 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fd5e 	bl	800adde <USBD_CtlError>
          break;
 800a322:	bf00      	nop
      }
      break;
 800a324:	e004      	b.n	800a330 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fd58 	bl	800adde <USBD_CtlError>
      break;
 800a32e:	bf00      	nop
  }

  return ret;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop

0800a33c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a352:	2b40      	cmp	r3, #64	@ 0x40
 800a354:	d005      	beq.n	800a362 <USBD_StdItfReq+0x26>
 800a356:	2b40      	cmp	r3, #64	@ 0x40
 800a358:	d852      	bhi.n	800a400 <USBD_StdItfReq+0xc4>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <USBD_StdItfReq+0x26>
 800a35e:	2b20      	cmp	r3, #32
 800a360:	d14e      	bne.n	800a400 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	3b01      	subs	r3, #1
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d840      	bhi.n	800a3f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	889b      	ldrh	r3, [r3, #4]
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b01      	cmp	r3, #1
 800a378:	d836      	bhi.n	800a3e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	889b      	ldrh	r3, [r3, #4]
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	4619      	mov	r1, r3
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7ff fedb 	bl	800a13e <USBD_CoreFindIF>
 800a388:	4603      	mov	r3, r0
 800a38a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a38c:	7bbb      	ldrb	r3, [r7, #14]
 800a38e:	2bff      	cmp	r3, #255	@ 0xff
 800a390:	d01d      	beq.n	800a3ce <USBD_StdItfReq+0x92>
 800a392:	7bbb      	ldrb	r3, [r7, #14]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d11a      	bne.n	800a3ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a398:	7bba      	ldrb	r2, [r7, #14]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	32ae      	adds	r2, #174	@ 0xae
 800a39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00f      	beq.n	800a3c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a3a8:	7bba      	ldrb	r2, [r7, #14]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a3b0:	7bba      	ldrb	r2, [r7, #14]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	32ae      	adds	r2, #174	@ 0xae
 800a3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	4798      	blx	r3
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a3c6:	e004      	b.n	800a3d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a3cc:	e001      	b.n	800a3d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	88db      	ldrh	r3, [r3, #6]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d110      	bne.n	800a3fc <USBD_StdItfReq+0xc0>
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10d      	bne.n	800a3fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fdc7 	bl	800af74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a3e6:	e009      	b.n	800a3fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fcf7 	bl	800adde <USBD_CtlError>
          break;
 800a3f0:	e004      	b.n	800a3fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fcf2 	bl	800adde <USBD_CtlError>
          break;
 800a3fa:	e000      	b.n	800a3fe <USBD_StdItfReq+0xc2>
          break;
 800a3fc:	bf00      	nop
      }
      break;
 800a3fe:	e004      	b.n	800a40a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fceb 	bl	800adde <USBD_CtlError>
      break;
 800a408:	bf00      	nop
  }

  return ret;
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	889b      	ldrh	r3, [r3, #4]
 800a426:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a430:	2b40      	cmp	r3, #64	@ 0x40
 800a432:	d007      	beq.n	800a444 <USBD_StdEPReq+0x30>
 800a434:	2b40      	cmp	r3, #64	@ 0x40
 800a436:	f200 817f 	bhi.w	800a738 <USBD_StdEPReq+0x324>
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d02a      	beq.n	800a494 <USBD_StdEPReq+0x80>
 800a43e:	2b20      	cmp	r3, #32
 800a440:	f040 817a 	bne.w	800a738 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a444:	7bbb      	ldrb	r3, [r7, #14]
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff fe85 	bl	800a158 <USBD_CoreFindEP>
 800a44e:	4603      	mov	r3, r0
 800a450:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a452:	7b7b      	ldrb	r3, [r7, #13]
 800a454:	2bff      	cmp	r3, #255	@ 0xff
 800a456:	f000 8174 	beq.w	800a742 <USBD_StdEPReq+0x32e>
 800a45a:	7b7b      	ldrb	r3, [r7, #13]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f040 8170 	bne.w	800a742 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a462:	7b7a      	ldrb	r2, [r7, #13]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a46a:	7b7a      	ldrb	r2, [r7, #13]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	32ae      	adds	r2, #174	@ 0xae
 800a470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	f000 8163 	beq.w	800a742 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a47c:	7b7a      	ldrb	r2, [r7, #13]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	32ae      	adds	r2, #174	@ 0xae
 800a482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	4798      	blx	r3
 800a48e:	4603      	mov	r3, r0
 800a490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a492:	e156      	b.n	800a742 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	785b      	ldrb	r3, [r3, #1]
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d008      	beq.n	800a4ae <USBD_StdEPReq+0x9a>
 800a49c:	2b03      	cmp	r3, #3
 800a49e:	f300 8145 	bgt.w	800a72c <USBD_StdEPReq+0x318>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 809b 	beq.w	800a5de <USBD_StdEPReq+0x1ca>
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d03c      	beq.n	800a526 <USBD_StdEPReq+0x112>
 800a4ac:	e13e      	b.n	800a72c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d002      	beq.n	800a4c0 <USBD_StdEPReq+0xac>
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d016      	beq.n	800a4ec <USBD_StdEPReq+0xd8>
 800a4be:	e02c      	b.n	800a51a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00d      	beq.n	800a4e2 <USBD_StdEPReq+0xce>
 800a4c6:	7bbb      	ldrb	r3, [r7, #14]
 800a4c8:	2b80      	cmp	r3, #128	@ 0x80
 800a4ca:	d00a      	beq.n	800a4e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4cc:	7bbb      	ldrb	r3, [r7, #14]
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 f9a3 	bl	800b81c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4d6:	2180      	movs	r1, #128	@ 0x80
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f001 f99f 	bl	800b81c <USBD_LL_StallEP>
 800a4de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4e0:	e020      	b.n	800a524 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fc7a 	bl	800adde <USBD_CtlError>
              break;
 800a4ea:	e01b      	b.n	800a524 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	885b      	ldrh	r3, [r3, #2]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10e      	bne.n	800a512 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4f4:	7bbb      	ldrb	r3, [r7, #14]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00b      	beq.n	800a512 <USBD_StdEPReq+0xfe>
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	2b80      	cmp	r3, #128	@ 0x80
 800a4fe:	d008      	beq.n	800a512 <USBD_StdEPReq+0xfe>
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	88db      	ldrh	r3, [r3, #6]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d104      	bne.n	800a512 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	4619      	mov	r1, r3
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 f985 	bl	800b81c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fd2e 	bl	800af74 <USBD_CtlSendStatus>

              break;
 800a518:	e004      	b.n	800a524 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a51a:	6839      	ldr	r1, [r7, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fc5e 	bl	800adde <USBD_CtlError>
              break;
 800a522:	bf00      	nop
          }
          break;
 800a524:	e107      	b.n	800a736 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d002      	beq.n	800a538 <USBD_StdEPReq+0x124>
 800a532:	2b03      	cmp	r3, #3
 800a534:	d016      	beq.n	800a564 <USBD_StdEPReq+0x150>
 800a536:	e04b      	b.n	800a5d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a538:	7bbb      	ldrb	r3, [r7, #14]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00d      	beq.n	800a55a <USBD_StdEPReq+0x146>
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	2b80      	cmp	r3, #128	@ 0x80
 800a542:	d00a      	beq.n	800a55a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a544:	7bbb      	ldrb	r3, [r7, #14]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f001 f967 	bl	800b81c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a54e:	2180      	movs	r1, #128	@ 0x80
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f001 f963 	bl	800b81c <USBD_LL_StallEP>
 800a556:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a558:	e040      	b.n	800a5dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fc3e 	bl	800adde <USBD_CtlError>
              break;
 800a562:	e03b      	b.n	800a5dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	885b      	ldrh	r3, [r3, #2]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d136      	bne.n	800a5da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a576:	7bbb      	ldrb	r3, [r7, #14]
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f001 f96d 	bl	800b85a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fcf7 	bl	800af74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7ff fde4 	bl	800a158 <USBD_CoreFindEP>
 800a590:	4603      	mov	r3, r0
 800a592:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a594:	7b7b      	ldrb	r3, [r7, #13]
 800a596:	2bff      	cmp	r3, #255	@ 0xff
 800a598:	d01f      	beq.n	800a5da <USBD_StdEPReq+0x1c6>
 800a59a:	7b7b      	ldrb	r3, [r7, #13]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d11c      	bne.n	800a5da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a5a0:	7b7a      	ldrb	r2, [r7, #13]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a5a8:	7b7a      	ldrb	r2, [r7, #13]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	32ae      	adds	r2, #174	@ 0xae
 800a5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d010      	beq.n	800a5da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a5b8:	7b7a      	ldrb	r2, [r7, #13]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	32ae      	adds	r2, #174	@ 0xae
 800a5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	4798      	blx	r3
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a5ce:	e004      	b.n	800a5da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fc03 	bl	800adde <USBD_CtlError>
              break;
 800a5d8:	e000      	b.n	800a5dc <USBD_StdEPReq+0x1c8>
              break;
 800a5da:	bf00      	nop
          }
          break;
 800a5dc:	e0ab      	b.n	800a736 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d002      	beq.n	800a5f0 <USBD_StdEPReq+0x1dc>
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	d032      	beq.n	800a654 <USBD_StdEPReq+0x240>
 800a5ee:	e097      	b.n	800a720 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5f0:	7bbb      	ldrb	r3, [r7, #14]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d007      	beq.n	800a606 <USBD_StdEPReq+0x1f2>
 800a5f6:	7bbb      	ldrb	r3, [r7, #14]
 800a5f8:	2b80      	cmp	r3, #128	@ 0x80
 800a5fa:	d004      	beq.n	800a606 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fbed 	bl	800adde <USBD_CtlError>
                break;
 800a604:	e091      	b.n	800a72a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	da0b      	bge.n	800a626 <USBD_StdEPReq+0x212>
 800a60e:	7bbb      	ldrb	r3, [r7, #14]
 800a610:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a614:	4613      	mov	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	3310      	adds	r3, #16
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	4413      	add	r3, r2
 800a622:	3304      	adds	r3, #4
 800a624:	e00b      	b.n	800a63e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	4413      	add	r3, r2
 800a63c:	3304      	adds	r3, #4
 800a63e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2200      	movs	r2, #0
 800a644:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	2202      	movs	r2, #2
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fc37 	bl	800aec0 <USBD_CtlSendData>
              break;
 800a652:	e06a      	b.n	800a72a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	da11      	bge.n	800a680 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
 800a65e:	f003 020f 	and.w	r2, r3, #15
 800a662:	6879      	ldr	r1, [r7, #4]
 800a664:	4613      	mov	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	440b      	add	r3, r1
 800a66e:	3324      	adds	r3, #36	@ 0x24
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d117      	bne.n	800a6a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 fbb0 	bl	800adde <USBD_CtlError>
                  break;
 800a67e:	e054      	b.n	800a72a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a680:	7bbb      	ldrb	r3, [r7, #14]
 800a682:	f003 020f 	and.w	r2, r3, #15
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	4613      	mov	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4413      	add	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	440b      	add	r3, r1
 800a692:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d104      	bne.n	800a6a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fb9d 	bl	800adde <USBD_CtlError>
                  break;
 800a6a4:	e041      	b.n	800a72a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	da0b      	bge.n	800a6c6 <USBD_StdEPReq+0x2b2>
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	3310      	adds	r3, #16
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	e00b      	b.n	800a6de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
 800a6c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	4413      	add	r3, r2
 800a6dc:	3304      	adds	r3, #4
 800a6de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <USBD_StdEPReq+0x2d8>
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	2b80      	cmp	r3, #128	@ 0x80
 800a6ea:	d103      	bne.n	800a6f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	e00e      	b.n	800a712 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a6f4:	7bbb      	ldrb	r3, [r7, #14]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f001 f8cd 	bl	800b898 <USBD_LL_IsStallEP>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d003      	beq.n	800a70c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2201      	movs	r2, #1
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	e002      	b.n	800a712 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	2200      	movs	r2, #0
 800a710:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2202      	movs	r2, #2
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fbd1 	bl	800aec0 <USBD_CtlSendData>
              break;
 800a71e:	e004      	b.n	800a72a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fb5b 	bl	800adde <USBD_CtlError>
              break;
 800a728:	bf00      	nop
          }
          break;
 800a72a:	e004      	b.n	800a736 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fb55 	bl	800adde <USBD_CtlError>
          break;
 800a734:	bf00      	nop
      }
      break;
 800a736:	e005      	b.n	800a744 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fb4f 	bl	800adde <USBD_CtlError>
      break;
 800a740:	e000      	b.n	800a744 <USBD_StdEPReq+0x330>
      break;
 800a742:	bf00      	nop
  }

  return ret;
 800a744:	7bfb      	ldrb	r3, [r7, #15]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
	...

0800a750 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a75e:	2300      	movs	r3, #0
 800a760:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a762:	2300      	movs	r3, #0
 800a764:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	885b      	ldrh	r3, [r3, #2]
 800a76a:	0a1b      	lsrs	r3, r3, #8
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	3b01      	subs	r3, #1
 800a770:	2b06      	cmp	r3, #6
 800a772:	f200 8128 	bhi.w	800a9c6 <USBD_GetDescriptor+0x276>
 800a776:	a201      	add	r2, pc, #4	@ (adr r2, 800a77c <USBD_GetDescriptor+0x2c>)
 800a778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77c:	0800a799 	.word	0x0800a799
 800a780:	0800a7b1 	.word	0x0800a7b1
 800a784:	0800a7f1 	.word	0x0800a7f1
 800a788:	0800a9c7 	.word	0x0800a9c7
 800a78c:	0800a9c7 	.word	0x0800a9c7
 800a790:	0800a967 	.word	0x0800a967
 800a794:	0800a993 	.word	0x0800a993
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	7c12      	ldrb	r2, [r2, #16]
 800a7a4:	f107 0108 	add.w	r1, r7, #8
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	4798      	blx	r3
 800a7ac:	60f8      	str	r0, [r7, #12]
      break;
 800a7ae:	e112      	b.n	800a9d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	7c1b      	ldrb	r3, [r3, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10d      	bne.n	800a7d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c0:	f107 0208 	add.w	r2, r7, #8
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	4798      	blx	r3
 800a7c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a7d2:	e100      	b.n	800a9d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7dc:	f107 0208 	add.w	r2, r7, #8
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	4798      	blx	r3
 800a7e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	701a      	strb	r2, [r3, #0]
      break;
 800a7ee:	e0f2      	b.n	800a9d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	885b      	ldrh	r3, [r3, #2]
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b05      	cmp	r3, #5
 800a7f8:	f200 80ac 	bhi.w	800a954 <USBD_GetDescriptor+0x204>
 800a7fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a804 <USBD_GetDescriptor+0xb4>)
 800a7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a802:	bf00      	nop
 800a804:	0800a81d 	.word	0x0800a81d
 800a808:	0800a851 	.word	0x0800a851
 800a80c:	0800a885 	.word	0x0800a885
 800a810:	0800a8b9 	.word	0x0800a8b9
 800a814:	0800a8ed 	.word	0x0800a8ed
 800a818:	0800a921 	.word	0x0800a921
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00b      	beq.n	800a840 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	7c12      	ldrb	r2, [r2, #16]
 800a834:	f107 0108 	add.w	r1, r7, #8
 800a838:	4610      	mov	r0, r2
 800a83a:	4798      	blx	r3
 800a83c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a83e:	e091      	b.n	800a964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 facb 	bl	800adde <USBD_CtlError>
            err++;
 800a848:	7afb      	ldrb	r3, [r7, #11]
 800a84a:	3301      	adds	r3, #1
 800a84c:	72fb      	strb	r3, [r7, #11]
          break;
 800a84e:	e089      	b.n	800a964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00b      	beq.n	800a874 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	7c12      	ldrb	r2, [r2, #16]
 800a868:	f107 0108 	add.w	r1, r7, #8
 800a86c:	4610      	mov	r0, r2
 800a86e:	4798      	blx	r3
 800a870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a872:	e077      	b.n	800a964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fab1 	bl	800adde <USBD_CtlError>
            err++;
 800a87c:	7afb      	ldrb	r3, [r7, #11]
 800a87e:	3301      	adds	r3, #1
 800a880:	72fb      	strb	r3, [r7, #11]
          break;
 800a882:	e06f      	b.n	800a964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00b      	beq.n	800a8a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	7c12      	ldrb	r2, [r2, #16]
 800a89c:	f107 0108 	add.w	r1, r7, #8
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	4798      	blx	r3
 800a8a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8a6:	e05d      	b.n	800a964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fa97 	bl	800adde <USBD_CtlError>
            err++;
 800a8b0:	7afb      	ldrb	r3, [r7, #11]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8b6:	e055      	b.n	800a964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00b      	beq.n	800a8dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	7c12      	ldrb	r2, [r2, #16]
 800a8d0:	f107 0108 	add.w	r1, r7, #8
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4798      	blx	r3
 800a8d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8da:	e043      	b.n	800a964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fa7d 	bl	800adde <USBD_CtlError>
            err++;
 800a8e4:	7afb      	ldrb	r3, [r7, #11]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a8ea:	e03b      	b.n	800a964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00b      	beq.n	800a910 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	7c12      	ldrb	r2, [r2, #16]
 800a904:	f107 0108 	add.w	r1, r7, #8
 800a908:	4610      	mov	r0, r2
 800a90a:	4798      	blx	r3
 800a90c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a90e:	e029      	b.n	800a964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fa63 	bl	800adde <USBD_CtlError>
            err++;
 800a918:	7afb      	ldrb	r3, [r7, #11]
 800a91a:	3301      	adds	r3, #1
 800a91c:	72fb      	strb	r3, [r7, #11]
          break;
 800a91e:	e021      	b.n	800a964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00b      	beq.n	800a944 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	7c12      	ldrb	r2, [r2, #16]
 800a938:	f107 0108 	add.w	r1, r7, #8
 800a93c:	4610      	mov	r0, r2
 800a93e:	4798      	blx	r3
 800a940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a942:	e00f      	b.n	800a964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fa49 	bl	800adde <USBD_CtlError>
            err++;
 800a94c:	7afb      	ldrb	r3, [r7, #11]
 800a94e:	3301      	adds	r3, #1
 800a950:	72fb      	strb	r3, [r7, #11]
          break;
 800a952:	e007      	b.n	800a964 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fa41 	bl	800adde <USBD_CtlError>
          err++;
 800a95c:	7afb      	ldrb	r3, [r7, #11]
 800a95e:	3301      	adds	r3, #1
 800a960:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a962:	bf00      	nop
      }
      break;
 800a964:	e037      	b.n	800a9d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	7c1b      	ldrb	r3, [r3, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d109      	bne.n	800a982 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a976:	f107 0208 	add.w	r2, r7, #8
 800a97a:	4610      	mov	r0, r2
 800a97c:	4798      	blx	r3
 800a97e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a980:	e029      	b.n	800a9d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fa2a 	bl	800adde <USBD_CtlError>
        err++;
 800a98a:	7afb      	ldrb	r3, [r7, #11]
 800a98c:	3301      	adds	r3, #1
 800a98e:	72fb      	strb	r3, [r7, #11]
      break;
 800a990:	e021      	b.n	800a9d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	7c1b      	ldrb	r3, [r3, #16]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10d      	bne.n	800a9b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9a2:	f107 0208 	add.w	r2, r7, #8
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	4798      	blx	r3
 800a9aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	2207      	movs	r2, #7
 800a9b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9b4:	e00f      	b.n	800a9d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fa10 	bl	800adde <USBD_CtlError>
        err++;
 800a9be:	7afb      	ldrb	r3, [r7, #11]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a9c4:	e007      	b.n	800a9d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fa08 	bl	800adde <USBD_CtlError>
      err++;
 800a9ce:	7afb      	ldrb	r3, [r7, #11]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a9d4:	bf00      	nop
  }

  if (err != 0U)
 800a9d6:	7afb      	ldrb	r3, [r7, #11]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d11e      	bne.n	800aa1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	88db      	ldrh	r3, [r3, #6]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d016      	beq.n	800aa12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a9e4:	893b      	ldrh	r3, [r7, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00e      	beq.n	800aa08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	88da      	ldrh	r2, [r3, #6]
 800a9ee:	893b      	ldrh	r3, [r7, #8]
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	bf28      	it	cs
 800a9f4:	4613      	movcs	r3, r2
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a9fa:	893b      	ldrh	r3, [r7, #8]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	68f9      	ldr	r1, [r7, #12]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fa5d 	bl	800aec0 <USBD_CtlSendData>
 800aa06:	e009      	b.n	800aa1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f9e7 	bl	800adde <USBD_CtlError>
 800aa10:	e004      	b.n	800aa1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 faae 	bl	800af74 <USBD_CtlSendStatus>
 800aa18:	e000      	b.n	800aa1c <USBD_GetDescriptor+0x2cc>
    return;
 800aa1a:	bf00      	nop
  }
}
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop

0800aa24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	889b      	ldrh	r3, [r3, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d131      	bne.n	800aa9a <USBD_SetAddress+0x76>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	88db      	ldrh	r3, [r3, #6]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d12d      	bne.n	800aa9a <USBD_SetAddress+0x76>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	885b      	ldrh	r3, [r3, #2]
 800aa42:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa44:	d829      	bhi.n	800aa9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	885b      	ldrh	r3, [r3, #2]
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d104      	bne.n	800aa68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f9bc 	bl	800adde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa66:	e01d      	b.n	800aaa4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	7bfa      	ldrb	r2, [r7, #15]
 800aa6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 ff3b 	bl	800b8f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fa7a 	bl	800af74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d004      	beq.n	800aa90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2202      	movs	r2, #2
 800aa8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa8e:	e009      	b.n	800aaa4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa98:	e004      	b.n	800aaa4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f99e 	bl	800adde <USBD_CtlError>
  }
}
 800aaa2:	bf00      	nop
 800aaa4:	bf00      	nop
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	885b      	ldrh	r3, [r3, #2]
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	4b4e      	ldr	r3, [pc, #312]	@ (800abfc <USBD_SetConfig+0x150>)
 800aac2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aac4:	4b4d      	ldr	r3, [pc, #308]	@ (800abfc <USBD_SetConfig+0x150>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d905      	bls.n	800aad8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f985 	bl	800adde <USBD_CtlError>
    return USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e08c      	b.n	800abf2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	d002      	beq.n	800aaea <USBD_SetConfig+0x3e>
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	d029      	beq.n	800ab3c <USBD_SetConfig+0x90>
 800aae8:	e075      	b.n	800abd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aaea:	4b44      	ldr	r3, [pc, #272]	@ (800abfc <USBD_SetConfig+0x150>)
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d020      	beq.n	800ab34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aaf2:	4b42      	ldr	r3, [pc, #264]	@ (800abfc <USBD_SetConfig+0x150>)
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aafc:	4b3f      	ldr	r3, [pc, #252]	@ (800abfc <USBD_SetConfig+0x150>)
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7fe ffe3 	bl	8009ace <USBD_SetClassConfig>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d008      	beq.n	800ab24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f962 	bl	800adde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab22:	e065      	b.n	800abf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fa25 	bl	800af74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2203      	movs	r2, #3
 800ab2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ab32:	e05d      	b.n	800abf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fa1d 	bl	800af74 <USBD_CtlSendStatus>
      break;
 800ab3a:	e059      	b.n	800abf0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab3c:	4b2f      	ldr	r3, [pc, #188]	@ (800abfc <USBD_SetConfig+0x150>)
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d112      	bne.n	800ab6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ab4c:	4b2b      	ldr	r3, [pc, #172]	@ (800abfc <USBD_SetConfig+0x150>)
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	461a      	mov	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab56:	4b29      	ldr	r3, [pc, #164]	@ (800abfc <USBD_SetConfig+0x150>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7fe ffd2 	bl	8009b06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fa06 	bl	800af74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab68:	e042      	b.n	800abf0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ab6a:	4b24      	ldr	r3, [pc, #144]	@ (800abfc <USBD_SetConfig+0x150>)
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d02a      	beq.n	800abce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7fe ffc0 	bl	8009b06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab86:	4b1d      	ldr	r3, [pc, #116]	@ (800abfc <USBD_SetConfig+0x150>)
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab90:	4b1a      	ldr	r3, [pc, #104]	@ (800abfc <USBD_SetConfig+0x150>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	4619      	mov	r1, r3
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7fe ff99 	bl	8009ace <USBD_SetClassConfig>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00f      	beq.n	800abc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f918 	bl	800adde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7fe ffa5 	bl	8009b06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2202      	movs	r2, #2
 800abc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800abc4:	e014      	b.n	800abf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 f9d4 	bl	800af74 <USBD_CtlSendStatus>
      break;
 800abcc:	e010      	b.n	800abf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f9d0 	bl	800af74 <USBD_CtlSendStatus>
      break;
 800abd4:	e00c      	b.n	800abf0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f900 	bl	800adde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abde:	4b07      	ldr	r3, [pc, #28]	@ (800abfc <USBD_SetConfig+0x150>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7fe ff8e 	bl	8009b06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800abea:	2303      	movs	r3, #3
 800abec:	73fb      	strb	r3, [r7, #15]
      break;
 800abee:	bf00      	nop
  }

  return ret;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	20000380 	.word	0x20000380

0800ac00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	88db      	ldrh	r3, [r3, #6]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d004      	beq.n	800ac1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f8e2 	bl	800adde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac1a:	e023      	b.n	800ac64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	dc02      	bgt.n	800ac2e <USBD_GetConfig+0x2e>
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	dc03      	bgt.n	800ac34 <USBD_GetConfig+0x34>
 800ac2c:	e015      	b.n	800ac5a <USBD_GetConfig+0x5a>
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d00b      	beq.n	800ac4a <USBD_GetConfig+0x4a>
 800ac32:	e012      	b.n	800ac5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	3308      	adds	r3, #8
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f93c 	bl	800aec0 <USBD_CtlSendData>
        break;
 800ac48:	e00c      	b.n	800ac64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f934 	bl	800aec0 <USBD_CtlSendData>
        break;
 800ac58:	e004      	b.n	800ac64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f8be 	bl	800adde <USBD_CtlError>
        break;
 800ac62:	bf00      	nop
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d81e      	bhi.n	800acc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	88db      	ldrh	r3, [r3, #6]
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d004      	beq.n	800ac96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f8a5 	bl	800adde <USBD_CtlError>
        break;
 800ac94:	e01a      	b.n	800accc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d005      	beq.n	800acb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	f043 0202 	orr.w	r2, r3, #2
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	330c      	adds	r3, #12
 800acb6:	2202      	movs	r2, #2
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f900 	bl	800aec0 <USBD_CtlSendData>
      break;
 800acc0:	e004      	b.n	800accc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f88a 	bl	800adde <USBD_CtlError>
      break;
 800acca:	bf00      	nop
  }
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	885b      	ldrh	r3, [r3, #2]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d107      	bne.n	800acf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f940 	bl	800af74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800acf4:	e013      	b.n	800ad1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	885b      	ldrh	r3, [r3, #2]
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d10b      	bne.n	800ad16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	889b      	ldrh	r3, [r3, #4]
 800ad02:	0a1b      	lsrs	r3, r3, #8
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f930 	bl	800af74 <USBD_CtlSendStatus>
}
 800ad14:	e003      	b.n	800ad1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f860 	bl	800adde <USBD_CtlError>
}
 800ad1e:	bf00      	nop
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d80b      	bhi.n	800ad56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	885b      	ldrh	r3, [r3, #2]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d10c      	bne.n	800ad60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f910 	bl	800af74 <USBD_CtlSendStatus>
      }
      break;
 800ad54:	e004      	b.n	800ad60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f840 	bl	800adde <USBD_CtlError>
      break;
 800ad5e:	e000      	b.n	800ad62 <USBD_ClrFeature+0x3c>
      break;
 800ad60:	bf00      	nop
  }
}
 800ad62:	bf00      	nop
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	781a      	ldrb	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	3301      	adds	r3, #1
 800ad84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	781a      	ldrb	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3301      	adds	r3, #1
 800ad92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f7ff fa40 	bl	800a21a <SWAPBYTE>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	3301      	adds	r3, #1
 800ada6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	3301      	adds	r3, #1
 800adac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f7ff fa33 	bl	800a21a <SWAPBYTE>
 800adb4:	4603      	mov	r3, r0
 800adb6:	461a      	mov	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3301      	adds	r3, #1
 800adc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f7ff fa26 	bl	800a21a <SWAPBYTE>
 800adce:	4603      	mov	r3, r0
 800add0:	461a      	mov	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	80da      	strh	r2, [r3, #6]
}
 800add6:	bf00      	nop
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ade8:	2180      	movs	r1, #128	@ 0x80
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fd16 	bl	800b81c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800adf0:	2100      	movs	r1, #0
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fd12 	bl	800b81c <USBD_LL_StallEP>
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d036      	beq.n	800ae84 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ae1a:	6938      	ldr	r0, [r7, #16]
 800ae1c:	f000 f836 	bl	800ae8c <USBD_GetLen>
 800ae20:	4603      	mov	r3, r0
 800ae22:	3301      	adds	r3, #1
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	005b      	lsls	r3, r3, #1
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ae2e:	7dfb      	ldrb	r3, [r7, #23]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	4413      	add	r3, r2
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	7812      	ldrb	r2, [r2, #0]
 800ae38:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae40:	7dfb      	ldrb	r3, [r7, #23]
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	4413      	add	r3, r2
 800ae46:	2203      	movs	r2, #3
 800ae48:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae50:	e013      	b.n	800ae7a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae52:	7dfb      	ldrb	r3, [r7, #23]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	4413      	add	r3, r2
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	7812      	ldrb	r2, [r2, #0]
 800ae5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	3301      	adds	r3, #1
 800ae62:	613b      	str	r3, [r7, #16]
    idx++;
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	3301      	adds	r3, #1
 800ae68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	4413      	add	r3, r2
 800ae70:	2200      	movs	r2, #0
 800ae72:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	3301      	adds	r3, #1
 800ae78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1e7      	bne.n	800ae52 <USBD_GetString+0x52>
 800ae82:	e000      	b.n	800ae86 <USBD_GetString+0x86>
    return;
 800ae84:	bf00      	nop
  }
}
 800ae86:	3718      	adds	r7, #24
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae9c:	e005      	b.n	800aeaa <USBD_GetLen+0x1e>
  {
    len++;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
 800aea0:	3301      	adds	r3, #1
 800aea2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	3301      	adds	r3, #1
 800aea8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f5      	bne.n	800ae9e <USBD_GetLen+0x12>
  }

  return len;
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2202      	movs	r2, #2
 800aed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	2100      	movs	r1, #0
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f000 fd21 	bl	800b92e <USBD_LL_Transmit>

  return USBD_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b084      	sub	sp, #16
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	60f8      	str	r0, [r7, #12]
 800aefe:	60b9      	str	r1, [r7, #8]
 800af00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	2100      	movs	r1, #0
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f000 fd10 	bl	800b92e <USBD_LL_Transmit>

  return USBD_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2203      	movs	r2, #3
 800af28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	2100      	movs	r1, #0
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f000 fd14 	bl	800b970 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	60f8      	str	r0, [r7, #12]
 800af5a:	60b9      	str	r1, [r7, #8]
 800af5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	2100      	movs	r1, #0
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 fd03 	bl	800b970 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2204      	movs	r2, #4
 800af80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af84:	2300      	movs	r3, #0
 800af86:	2200      	movs	r2, #0
 800af88:	2100      	movs	r1, #0
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fccf 	bl	800b92e <USBD_LL_Transmit>

  return USBD_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2205      	movs	r2, #5
 800afa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afaa:	2300      	movs	r3, #0
 800afac:	2200      	movs	r2, #0
 800afae:	2100      	movs	r1, #0
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fcdd 	bl	800b970 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	4613      	mov	r3, r2
 800afcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800afce:	2301      	movs	r3, #1
 800afd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800afd6:	4b1f      	ldr	r3, [pc, #124]	@ (800b054 <FATFS_LinkDriverEx+0x94>)
 800afd8:	7a5b      	ldrb	r3, [r3, #9]
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d131      	bne.n	800b044 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800afe0:	4b1c      	ldr	r3, [pc, #112]	@ (800b054 <FATFS_LinkDriverEx+0x94>)
 800afe2:	7a5b      	ldrb	r3, [r3, #9]
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	461a      	mov	r2, r3
 800afe8:	4b1a      	ldr	r3, [pc, #104]	@ (800b054 <FATFS_LinkDriverEx+0x94>)
 800afea:	2100      	movs	r1, #0
 800afec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800afee:	4b19      	ldr	r3, [pc, #100]	@ (800b054 <FATFS_LinkDriverEx+0x94>)
 800aff0:	7a5b      	ldrb	r3, [r3, #9]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	4a17      	ldr	r2, [pc, #92]	@ (800b054 <FATFS_LinkDriverEx+0x94>)
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800affe:	4b15      	ldr	r3, [pc, #84]	@ (800b054 <FATFS_LinkDriverEx+0x94>)
 800b000:	7a5b      	ldrb	r3, [r3, #9]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	461a      	mov	r2, r3
 800b006:	4b13      	ldr	r3, [pc, #76]	@ (800b054 <FATFS_LinkDriverEx+0x94>)
 800b008:	4413      	add	r3, r2
 800b00a:	79fa      	ldrb	r2, [r7, #7]
 800b00c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b00e:	4b11      	ldr	r3, [pc, #68]	@ (800b054 <FATFS_LinkDriverEx+0x94>)
 800b010:	7a5b      	ldrb	r3, [r3, #9]
 800b012:	b2db      	uxtb	r3, r3
 800b014:	1c5a      	adds	r2, r3, #1
 800b016:	b2d1      	uxtb	r1, r2
 800b018:	4a0e      	ldr	r2, [pc, #56]	@ (800b054 <FATFS_LinkDriverEx+0x94>)
 800b01a:	7251      	strb	r1, [r2, #9]
 800b01c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b01e:	7dbb      	ldrb	r3, [r7, #22]
 800b020:	3330      	adds	r3, #48	@ 0x30
 800b022:	b2da      	uxtb	r2, r3
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	3301      	adds	r3, #1
 800b02c:	223a      	movs	r2, #58	@ 0x3a
 800b02e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	3302      	adds	r3, #2
 800b034:	222f      	movs	r2, #47	@ 0x2f
 800b036:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	3303      	adds	r3, #3
 800b03c:	2200      	movs	r2, #0
 800b03e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b040:	2300      	movs	r3, #0
 800b042:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b044:	7dfb      	ldrb	r3, [r7, #23]
}
 800b046:	4618      	mov	r0, r3
 800b048:	371c      	adds	r7, #28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	20000384 	.word	0x20000384

0800b058 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b062:	2200      	movs	r2, #0
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff ffaa 	bl	800afc0 <FATFS_LinkDriverEx>
 800b06c:	4603      	mov	r3, r0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
	...

0800b078 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b07c:	2200      	movs	r2, #0
 800b07e:	4912      	ldr	r1, [pc, #72]	@ (800b0c8 <MX_USB_DEVICE_Init+0x50>)
 800b080:	4812      	ldr	r0, [pc, #72]	@ (800b0cc <MX_USB_DEVICE_Init+0x54>)
 800b082:	f7fe fca7 	bl	80099d4 <USBD_Init>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b08c:	f7f5 ff60 	bl	8000f50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b090:	490f      	ldr	r1, [pc, #60]	@ (800b0d0 <MX_USB_DEVICE_Init+0x58>)
 800b092:	480e      	ldr	r0, [pc, #56]	@ (800b0cc <MX_USB_DEVICE_Init+0x54>)
 800b094:	f7fe fcce 	bl	8009a34 <USBD_RegisterClass>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b09e:	f7f5 ff57 	bl	8000f50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b0a2:	490c      	ldr	r1, [pc, #48]	@ (800b0d4 <MX_USB_DEVICE_Init+0x5c>)
 800b0a4:	4809      	ldr	r0, [pc, #36]	@ (800b0cc <MX_USB_DEVICE_Init+0x54>)
 800b0a6:	f7fe fc05 	bl	80098b4 <USBD_CDC_RegisterInterface>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d001      	beq.n	800b0b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b0b0:	f7f5 ff4e 	bl	8000f50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b0b4:	4805      	ldr	r0, [pc, #20]	@ (800b0cc <MX_USB_DEVICE_Init+0x54>)
 800b0b6:	f7fe fcf3 	bl	8009aa0 <USBD_Start>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b0c0:	f7f5 ff46 	bl	8000f50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b0c4:	bf00      	nop
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	200000ac 	.word	0x200000ac
 800b0cc:	20000390 	.word	0x20000390
 800b0d0:	20000018 	.word	0x20000018
 800b0d4:	20000098 	.word	0x20000098

0800b0d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0dc:	2200      	movs	r2, #0
 800b0de:	4905      	ldr	r1, [pc, #20]	@ (800b0f4 <CDC_Init_FS+0x1c>)
 800b0e0:	4805      	ldr	r0, [pc, #20]	@ (800b0f8 <CDC_Init_FS+0x20>)
 800b0e2:	f7fe fc01 	bl	80098e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b0e6:	4905      	ldr	r1, [pc, #20]	@ (800b0fc <CDC_Init_FS+0x24>)
 800b0e8:	4803      	ldr	r0, [pc, #12]	@ (800b0f8 <CDC_Init_FS+0x20>)
 800b0ea:	f7fe fc1f 	bl	800992c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b0ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	20000e6c 	.word	0x20000e6c
 800b0f8:	20000390 	.word	0x20000390
 800b0fc:	2000066c 	.word	0x2000066c

0800b100 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b100:	b480      	push	{r7}
 800b102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b104:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b106:	4618      	mov	r0, r3
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	4603      	mov	r3, r0
 800b118:	6039      	str	r1, [r7, #0]
 800b11a:	71fb      	strb	r3, [r7, #7]
 800b11c:	4613      	mov	r3, r2
 800b11e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b120:	79fb      	ldrb	r3, [r7, #7]
 800b122:	2b23      	cmp	r3, #35	@ 0x23
 800b124:	d84a      	bhi.n	800b1bc <CDC_Control_FS+0xac>
 800b126:	a201      	add	r2, pc, #4	@ (adr r2, 800b12c <CDC_Control_FS+0x1c>)
 800b128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12c:	0800b1bd 	.word	0x0800b1bd
 800b130:	0800b1bd 	.word	0x0800b1bd
 800b134:	0800b1bd 	.word	0x0800b1bd
 800b138:	0800b1bd 	.word	0x0800b1bd
 800b13c:	0800b1bd 	.word	0x0800b1bd
 800b140:	0800b1bd 	.word	0x0800b1bd
 800b144:	0800b1bd 	.word	0x0800b1bd
 800b148:	0800b1bd 	.word	0x0800b1bd
 800b14c:	0800b1bd 	.word	0x0800b1bd
 800b150:	0800b1bd 	.word	0x0800b1bd
 800b154:	0800b1bd 	.word	0x0800b1bd
 800b158:	0800b1bd 	.word	0x0800b1bd
 800b15c:	0800b1bd 	.word	0x0800b1bd
 800b160:	0800b1bd 	.word	0x0800b1bd
 800b164:	0800b1bd 	.word	0x0800b1bd
 800b168:	0800b1bd 	.word	0x0800b1bd
 800b16c:	0800b1bd 	.word	0x0800b1bd
 800b170:	0800b1bd 	.word	0x0800b1bd
 800b174:	0800b1bd 	.word	0x0800b1bd
 800b178:	0800b1bd 	.word	0x0800b1bd
 800b17c:	0800b1bd 	.word	0x0800b1bd
 800b180:	0800b1bd 	.word	0x0800b1bd
 800b184:	0800b1bd 	.word	0x0800b1bd
 800b188:	0800b1bd 	.word	0x0800b1bd
 800b18c:	0800b1bd 	.word	0x0800b1bd
 800b190:	0800b1bd 	.word	0x0800b1bd
 800b194:	0800b1bd 	.word	0x0800b1bd
 800b198:	0800b1bd 	.word	0x0800b1bd
 800b19c:	0800b1bd 	.word	0x0800b1bd
 800b1a0:	0800b1bd 	.word	0x0800b1bd
 800b1a4:	0800b1bd 	.word	0x0800b1bd
 800b1a8:	0800b1bd 	.word	0x0800b1bd
 800b1ac:	0800b1bd 	.word	0x0800b1bd
 800b1b0:	0800b1bd 	.word	0x0800b1bd
 800b1b4:	0800b1bd 	.word	0x0800b1bd
 800b1b8:	0800b1bd 	.word	0x0800b1bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b1bc:	bf00      	nop
  }

  return (USBD_OK);
 800b1be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b1d6:	6879      	ldr	r1, [r7, #4]
 800b1d8:	4805      	ldr	r0, [pc, #20]	@ (800b1f0 <CDC_Receive_FS+0x24>)
 800b1da:	f7fe fba7 	bl	800992c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b1de:	4804      	ldr	r0, [pc, #16]	@ (800b1f0 <CDC_Receive_FS+0x24>)
 800b1e0:	f7fe fbc2 	bl	8009968 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b1e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20000390 	.word	0x20000390

0800b1f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	4613      	mov	r3, r2
 800b200:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	371c      	adds	r7, #28
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
	...

0800b218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	6039      	str	r1, [r7, #0]
 800b222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2212      	movs	r2, #18
 800b228:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b22a:	4b03      	ldr	r3, [pc, #12]	@ (800b238 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	200000c8 	.word	0x200000c8

0800b23c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	4603      	mov	r3, r0
 800b244:	6039      	str	r1, [r7, #0]
 800b246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	2204      	movs	r2, #4
 800b24c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b24e:	4b03      	ldr	r3, [pc, #12]	@ (800b25c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	200000dc 	.word	0x200000dc

0800b260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	6039      	str	r1, [r7, #0]
 800b26a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d105      	bne.n	800b27e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	4907      	ldr	r1, [pc, #28]	@ (800b294 <USBD_FS_ProductStrDescriptor+0x34>)
 800b276:	4808      	ldr	r0, [pc, #32]	@ (800b298 <USBD_FS_ProductStrDescriptor+0x38>)
 800b278:	f7ff fdc2 	bl	800ae00 <USBD_GetString>
 800b27c:	e004      	b.n	800b288 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	4904      	ldr	r1, [pc, #16]	@ (800b294 <USBD_FS_ProductStrDescriptor+0x34>)
 800b282:	4805      	ldr	r0, [pc, #20]	@ (800b298 <USBD_FS_ProductStrDescriptor+0x38>)
 800b284:	f7ff fdbc 	bl	800ae00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b288:	4b02      	ldr	r3, [pc, #8]	@ (800b294 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	2000166c 	.word	0x2000166c
 800b298:	0800bad0 	.word	0x0800bad0

0800b29c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	6039      	str	r1, [r7, #0]
 800b2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	4904      	ldr	r1, [pc, #16]	@ (800b2bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2ac:	4804      	ldr	r0, [pc, #16]	@ (800b2c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2ae:	f7ff fda7 	bl	800ae00 <USBD_GetString>
  return USBD_StrDesc;
 800b2b2:	4b02      	ldr	r3, [pc, #8]	@ (800b2bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	2000166c 	.word	0x2000166c
 800b2c0:	0800bae8 	.word	0x0800bae8

0800b2c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	6039      	str	r1, [r7, #0]
 800b2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	221a      	movs	r2, #26
 800b2d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2d6:	f000 f843 	bl	800b360 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b2da:	4b02      	ldr	r3, [pc, #8]	@ (800b2e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	200000e0 	.word	0x200000e0

0800b2e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	6039      	str	r1, [r7, #0]
 800b2f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b2f4:	79fb      	ldrb	r3, [r7, #7]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d105      	bne.n	800b306 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	4907      	ldr	r1, [pc, #28]	@ (800b31c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b2fe:	4808      	ldr	r0, [pc, #32]	@ (800b320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b300:	f7ff fd7e 	bl	800ae00 <USBD_GetString>
 800b304:	e004      	b.n	800b310 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b306:	683a      	ldr	r2, [r7, #0]
 800b308:	4904      	ldr	r1, [pc, #16]	@ (800b31c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b30a:	4805      	ldr	r0, [pc, #20]	@ (800b320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b30c:	f7ff fd78 	bl	800ae00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b310:	4b02      	ldr	r3, [pc, #8]	@ (800b31c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	2000166c 	.word	0x2000166c
 800b320:	0800bafc 	.word	0x0800bafc

0800b324 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	6039      	str	r1, [r7, #0]
 800b32e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b330:	79fb      	ldrb	r3, [r7, #7]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d105      	bne.n	800b342 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	4907      	ldr	r1, [pc, #28]	@ (800b358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b33a:	4808      	ldr	r0, [pc, #32]	@ (800b35c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b33c:	f7ff fd60 	bl	800ae00 <USBD_GetString>
 800b340:	e004      	b.n	800b34c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	4904      	ldr	r1, [pc, #16]	@ (800b358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b346:	4805      	ldr	r0, [pc, #20]	@ (800b35c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b348:	f7ff fd5a 	bl	800ae00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b34c:	4b02      	ldr	r3, [pc, #8]	@ (800b358 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	2000166c 	.word	0x2000166c
 800b35c:	0800bb08 	.word	0x0800bb08

0800b360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b366:	4b0f      	ldr	r3, [pc, #60]	@ (800b3a4 <Get_SerialNum+0x44>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b36c:	4b0e      	ldr	r3, [pc, #56]	@ (800b3a8 <Get_SerialNum+0x48>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b372:	4b0e      	ldr	r3, [pc, #56]	@ (800b3ac <Get_SerialNum+0x4c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4413      	add	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d009      	beq.n	800b39a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b386:	2208      	movs	r2, #8
 800b388:	4909      	ldr	r1, [pc, #36]	@ (800b3b0 <Get_SerialNum+0x50>)
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 f814 	bl	800b3b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b390:	2204      	movs	r2, #4
 800b392:	4908      	ldr	r1, [pc, #32]	@ (800b3b4 <Get_SerialNum+0x54>)
 800b394:	68b8      	ldr	r0, [r7, #8]
 800b396:	f000 f80f 	bl	800b3b8 <IntToUnicode>
  }
}
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	1fff7a10 	.word	0x1fff7a10
 800b3a8:	1fff7a14 	.word	0x1fff7a14
 800b3ac:	1fff7a18 	.word	0x1fff7a18
 800b3b0:	200000e2 	.word	0x200000e2
 800b3b4:	200000f2 	.word	0x200000f2

0800b3b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	75fb      	strb	r3, [r7, #23]
 800b3ce:	e027      	b.n	800b420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	0f1b      	lsrs	r3, r3, #28
 800b3d4:	2b09      	cmp	r3, #9
 800b3d6:	d80b      	bhi.n	800b3f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	0f1b      	lsrs	r3, r3, #28
 800b3dc:	b2da      	uxtb	r2, r3
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
 800b3e0:	005b      	lsls	r3, r3, #1
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	440b      	add	r3, r1
 800b3e8:	3230      	adds	r2, #48	@ 0x30
 800b3ea:	b2d2      	uxtb	r2, r2
 800b3ec:	701a      	strb	r2, [r3, #0]
 800b3ee:	e00a      	b.n	800b406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	0f1b      	lsrs	r3, r3, #28
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	440b      	add	r3, r1
 800b400:	3237      	adds	r2, #55	@ 0x37
 800b402:	b2d2      	uxtb	r2, r2
 800b404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	011b      	lsls	r3, r3, #4
 800b40a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b40c:	7dfb      	ldrb	r3, [r7, #23]
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	3301      	adds	r3, #1
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	4413      	add	r3, r2
 800b416:	2200      	movs	r2, #0
 800b418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b41a:	7dfb      	ldrb	r3, [r7, #23]
 800b41c:	3301      	adds	r3, #1
 800b41e:	75fb      	strb	r3, [r7, #23]
 800b420:	7dfa      	ldrb	r2, [r7, #23]
 800b422:	79fb      	ldrb	r3, [r7, #7]
 800b424:	429a      	cmp	r2, r3
 800b426:	d3d3      	bcc.n	800b3d0 <IntToUnicode+0x18>
  }
}
 800b428:	bf00      	nop
 800b42a:	bf00      	nop
 800b42c:	371c      	adds	r7, #28
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
	...

0800b438 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b08a      	sub	sp, #40	@ 0x28
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b440:	f107 0314 	add.w	r3, r7, #20
 800b444:	2200      	movs	r2, #0
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	605a      	str	r2, [r3, #4]
 800b44a:	609a      	str	r2, [r3, #8]
 800b44c:	60da      	str	r2, [r3, #12]
 800b44e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b458:	d13a      	bne.n	800b4d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b45a:	2300      	movs	r3, #0
 800b45c:	613b      	str	r3, [r7, #16]
 800b45e:	4b1e      	ldr	r3, [pc, #120]	@ (800b4d8 <HAL_PCD_MspInit+0xa0>)
 800b460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b462:	4a1d      	ldr	r2, [pc, #116]	@ (800b4d8 <HAL_PCD_MspInit+0xa0>)
 800b464:	f043 0301 	orr.w	r3, r3, #1
 800b468:	6313      	str	r3, [r2, #48]	@ 0x30
 800b46a:	4b1b      	ldr	r3, [pc, #108]	@ (800b4d8 <HAL_PCD_MspInit+0xa0>)
 800b46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	613b      	str	r3, [r7, #16]
 800b474:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b476:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b47a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b47c:	2302      	movs	r3, #2
 800b47e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b480:	2300      	movs	r3, #0
 800b482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b484:	2303      	movs	r3, #3
 800b486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b488:	230a      	movs	r3, #10
 800b48a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b48c:	f107 0314 	add.w	r3, r7, #20
 800b490:	4619      	mov	r1, r3
 800b492:	4812      	ldr	r0, [pc, #72]	@ (800b4dc <HAL_PCD_MspInit+0xa4>)
 800b494:	f7f6 fd86 	bl	8001fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b498:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d8 <HAL_PCD_MspInit+0xa0>)
 800b49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b49c:	4a0e      	ldr	r2, [pc, #56]	@ (800b4d8 <HAL_PCD_MspInit+0xa0>)
 800b49e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4a2:	6353      	str	r3, [r2, #52]	@ 0x34
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	60fb      	str	r3, [r7, #12]
 800b4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b4d8 <HAL_PCD_MspInit+0xa0>)
 800b4aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ac:	4a0a      	ldr	r2, [pc, #40]	@ (800b4d8 <HAL_PCD_MspInit+0xa0>)
 800b4ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b4b2:	6453      	str	r3, [r2, #68]	@ 0x44
 800b4b4:	4b08      	ldr	r3, [pc, #32]	@ (800b4d8 <HAL_PCD_MspInit+0xa0>)
 800b4b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	2043      	movs	r0, #67	@ 0x43
 800b4c6:	f7f6 fa0e 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b4ca:	2043      	movs	r0, #67	@ 0x43
 800b4cc:	f7f6 fa27 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b4d0:	bf00      	nop
 800b4d2:	3728      	adds	r7, #40	@ 0x28
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	40023800 	.word	0x40023800
 800b4dc:	40020000 	.word	0x40020000

0800b4e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	4610      	mov	r0, r2
 800b4f8:	f7fe fb1f 	bl	8009b3a <USBD_LL_SetupStage>
}
 800b4fc:	bf00      	nop
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b516:	78fa      	ldrb	r2, [r7, #3]
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	4613      	mov	r3, r2
 800b51c:	00db      	lsls	r3, r3, #3
 800b51e:	4413      	add	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	440b      	add	r3, r1
 800b524:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	78fb      	ldrb	r3, [r7, #3]
 800b52c:	4619      	mov	r1, r3
 800b52e:	f7fe fb59 	bl	8009be4 <USBD_LL_DataOutStage>
}
 800b532:	bf00      	nop
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b082      	sub	sp, #8
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b54c:	78fa      	ldrb	r2, [r7, #3]
 800b54e:	6879      	ldr	r1, [r7, #4]
 800b550:	4613      	mov	r3, r2
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	4413      	add	r3, r2
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	440b      	add	r3, r1
 800b55a:	3320      	adds	r3, #32
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	78fb      	ldrb	r3, [r7, #3]
 800b560:	4619      	mov	r1, r3
 800b562:	f7fe fbf2 	bl	8009d4a <USBD_LL_DataInStage>
}
 800b566:	bf00      	nop
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b082      	sub	sp, #8
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fe fd2c 	bl	8009fda <USBD_LL_SOF>
}
 800b582:	bf00      	nop
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b592:	2301      	movs	r3, #1
 800b594:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	79db      	ldrb	r3, [r3, #7]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d102      	bne.n	800b5a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]
 800b5a2:	e008      	b.n	800b5b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	79db      	ldrb	r3, [r3, #7]
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d102      	bne.n	800b5b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	73fb      	strb	r3, [r7, #15]
 800b5b0:	e001      	b.n	800b5b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b5b2:	f7f5 fccd 	bl	8000f50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b5bc:	7bfa      	ldrb	r2, [r7, #15]
 800b5be:	4611      	mov	r1, r2
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fe fcc6 	bl	8009f52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fe fc6e 	bl	8009eae <USBD_LL_Reset>
}
 800b5d2:	bf00      	nop
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fcc1 	bl	8009f72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	6812      	ldr	r2, [r2, #0]
 800b5fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b602:	f043 0301 	orr.w	r3, r3, #1
 800b606:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7adb      	ldrb	r3, [r3, #11]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d005      	beq.n	800b61c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b610:	4b04      	ldr	r3, [pc, #16]	@ (800b624 <HAL_PCD_SuspendCallback+0x48>)
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	4a03      	ldr	r2, [pc, #12]	@ (800b624 <HAL_PCD_SuspendCallback+0x48>)
 800b616:	f043 0306 	orr.w	r3, r3, #6
 800b61a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b61c:	bf00      	nop
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	e000ed00 	.word	0xe000ed00

0800b628 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe fcb7 	bl	8009faa <USBD_LL_Resume>
}
 800b63c:	bf00      	nop
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	460b      	mov	r3, r1
 800b64e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b656:	78fa      	ldrb	r2, [r7, #3]
 800b658:	4611      	mov	r1, r2
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fe fd0f 	bl	800a07e <USBD_LL_IsoOUTIncomplete>
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b67a:	78fa      	ldrb	r2, [r7, #3]
 800b67c:	4611      	mov	r1, r2
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe fccb 	bl	800a01a <USBD_LL_IsoINIncomplete>
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fe fd21 	bl	800a0e2 <USBD_LL_DevConnected>
}
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fe fd1e 	bl	800a0f8 <USBD_LL_DevDisconnected>
}
 800b6bc:	bf00      	nop
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d13c      	bne.n	800b74e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b6d4:	4a20      	ldr	r2, [pc, #128]	@ (800b758 <USBD_LL_Init+0x94>)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a1e      	ldr	r2, [pc, #120]	@ (800b758 <USBD_LL_Init+0x94>)
 800b6e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b6e4:	4b1c      	ldr	r3, [pc, #112]	@ (800b758 <USBD_LL_Init+0x94>)
 800b6e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b6ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b6ec:	4b1a      	ldr	r3, [pc, #104]	@ (800b758 <USBD_LL_Init+0x94>)
 800b6ee:	2204      	movs	r2, #4
 800b6f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b6f2:	4b19      	ldr	r3, [pc, #100]	@ (800b758 <USBD_LL_Init+0x94>)
 800b6f4:	2202      	movs	r2, #2
 800b6f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b6f8:	4b17      	ldr	r3, [pc, #92]	@ (800b758 <USBD_LL_Init+0x94>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b6fe:	4b16      	ldr	r3, [pc, #88]	@ (800b758 <USBD_LL_Init+0x94>)
 800b700:	2202      	movs	r2, #2
 800b702:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b704:	4b14      	ldr	r3, [pc, #80]	@ (800b758 <USBD_LL_Init+0x94>)
 800b706:	2200      	movs	r2, #0
 800b708:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b70a:	4b13      	ldr	r3, [pc, #76]	@ (800b758 <USBD_LL_Init+0x94>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b710:	4b11      	ldr	r3, [pc, #68]	@ (800b758 <USBD_LL_Init+0x94>)
 800b712:	2200      	movs	r2, #0
 800b714:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b716:	4b10      	ldr	r3, [pc, #64]	@ (800b758 <USBD_LL_Init+0x94>)
 800b718:	2200      	movs	r2, #0
 800b71a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b71c:	4b0e      	ldr	r3, [pc, #56]	@ (800b758 <USBD_LL_Init+0x94>)
 800b71e:	2200      	movs	r2, #0
 800b720:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b722:	480d      	ldr	r0, [pc, #52]	@ (800b758 <USBD_LL_Init+0x94>)
 800b724:	f7f6 fdf3 	bl	800230e <HAL_PCD_Init>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b72e:	f7f5 fc0f 	bl	8000f50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b732:	2180      	movs	r1, #128	@ 0x80
 800b734:	4808      	ldr	r0, [pc, #32]	@ (800b758 <USBD_LL_Init+0x94>)
 800b736:	f7f8 f81e 	bl	8003776 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b73a:	2240      	movs	r2, #64	@ 0x40
 800b73c:	2100      	movs	r1, #0
 800b73e:	4806      	ldr	r0, [pc, #24]	@ (800b758 <USBD_LL_Init+0x94>)
 800b740:	f7f7 ffd2 	bl	80036e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b744:	2280      	movs	r2, #128	@ 0x80
 800b746:	2101      	movs	r1, #1
 800b748:	4803      	ldr	r0, [pc, #12]	@ (800b758 <USBD_LL_Init+0x94>)
 800b74a:	f7f7 ffcd 	bl	80036e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	2000186c 	.word	0x2000186c

0800b75c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b764:	2300      	movs	r3, #0
 800b766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b768:	2300      	movs	r3, #0
 800b76a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b772:	4618      	mov	r0, r3
 800b774:	f7f6 feda 	bl	800252c <HAL_PCD_Start>
 800b778:	4603      	mov	r3, r0
 800b77a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
 800b77e:	4618      	mov	r0, r3
 800b780:	f000 f942 	bl	800ba08 <USBD_Get_USB_Status>
 800b784:	4603      	mov	r3, r0
 800b786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b788:	7bbb      	ldrb	r3, [r7, #14]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b084      	sub	sp, #16
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	4608      	mov	r0, r1
 800b79c:	4611      	mov	r1, r2
 800b79e:	461a      	mov	r2, r3
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	70fb      	strb	r3, [r7, #3]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70bb      	strb	r3, [r7, #2]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b7ba:	78bb      	ldrb	r3, [r7, #2]
 800b7bc:	883a      	ldrh	r2, [r7, #0]
 800b7be:	78f9      	ldrb	r1, [r7, #3]
 800b7c0:	f7f7 fbae 	bl	8002f20 <HAL_PCD_EP_Open>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 f91c 	bl	800ba08 <USBD_Get_USB_Status>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b084      	sub	sp, #16
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b7f8:	78fa      	ldrb	r2, [r7, #3]
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7f7 fbf7 	bl	8002ff0 <HAL_PCD_EP_Close>
 800b802:	4603      	mov	r3, r0
 800b804:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 f8fd 	bl	800ba08 <USBD_Get_USB_Status>
 800b80e:	4603      	mov	r3, r0
 800b810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b812:	7bbb      	ldrb	r3, [r7, #14]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b836:	78fa      	ldrb	r2, [r7, #3]
 800b838:	4611      	mov	r1, r2
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7f7 fcaf 	bl	800319e <HAL_PCD_EP_SetStall>
 800b840:	4603      	mov	r3, r0
 800b842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b844:	7bfb      	ldrb	r3, [r7, #15]
 800b846:	4618      	mov	r0, r3
 800b848:	f000 f8de 	bl	800ba08 <USBD_Get_USB_Status>
 800b84c:	4603      	mov	r3, r0
 800b84e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b850:	7bbb      	ldrb	r3, [r7, #14]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b084      	sub	sp, #16
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	460b      	mov	r3, r1
 800b864:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b874:	78fa      	ldrb	r2, [r7, #3]
 800b876:	4611      	mov	r1, r2
 800b878:	4618      	mov	r0, r3
 800b87a:	f7f7 fcf3 	bl	8003264 <HAL_PCD_EP_ClrStall>
 800b87e:	4603      	mov	r3, r0
 800b880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b882:	7bfb      	ldrb	r3, [r7, #15]
 800b884:	4618      	mov	r0, r3
 800b886:	f000 f8bf 	bl	800ba08 <USBD_Get_USB_Status>
 800b88a:	4603      	mov	r3, r0
 800b88c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	da0b      	bge.n	800b8cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8b4:	78fb      	ldrb	r3, [r7, #3]
 800b8b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8ba:	68f9      	ldr	r1, [r7, #12]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	00db      	lsls	r3, r3, #3
 800b8c0:	4413      	add	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	440b      	add	r3, r1
 800b8c6:	3316      	adds	r3, #22
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	e00b      	b.n	800b8e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b8cc:	78fb      	ldrb	r3, [r7, #3]
 800b8ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8d2:	68f9      	ldr	r1, [r7, #12]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	00db      	lsls	r3, r3, #3
 800b8d8:	4413      	add	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	440b      	add	r3, r1
 800b8de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b8e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b90a:	78fa      	ldrb	r2, [r7, #3]
 800b90c:	4611      	mov	r1, r2
 800b90e:	4618      	mov	r0, r3
 800b910:	f7f7 fae2 	bl	8002ed8 <HAL_PCD_SetAddress>
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b918:	7bfb      	ldrb	r3, [r7, #15]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 f874 	bl	800ba08 <USBD_Get_USB_Status>
 800b920:	4603      	mov	r3, r0
 800b922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b924:	7bbb      	ldrb	r3, [r7, #14]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b086      	sub	sp, #24
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
 800b93a:	460b      	mov	r3, r1
 800b93c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b94c:	7af9      	ldrb	r1, [r7, #11]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	f7f7 fbea 	bl	800312a <HAL_PCD_EP_Transmit>
 800b956:	4603      	mov	r3, r0
 800b958:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 f853 	bl	800ba08 <USBD_Get_USB_Status>
 800b962:	4603      	mov	r3, r0
 800b964:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b966:	7dbb      	ldrb	r3, [r7, #22]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	607a      	str	r2, [r7, #4]
 800b97a:	603b      	str	r3, [r7, #0]
 800b97c:	460b      	mov	r3, r1
 800b97e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b98e:	7af9      	ldrb	r1, [r7, #11]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	f7f7 fb76 	bl	8003084 <HAL_PCD_EP_Receive>
 800b998:	4603      	mov	r3, r0
 800b99a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f832 	bl	800ba08 <USBD_Get_USB_Status>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b082      	sub	sp, #8
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9c4:	78fa      	ldrb	r2, [r7, #3]
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7f7 fb96 	bl	80030fa <HAL_PCD_EP_GetRxCount>
 800b9ce:	4603      	mov	r3, r0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b9e0:	4b03      	ldr	r3, [pc, #12]	@ (800b9f0 <USBD_static_malloc+0x18>)
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	20001d50 	.word	0x20001d50

0800b9f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]

}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	4603      	mov	r3, r0
 800ba10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba16:	79fb      	ldrb	r3, [r7, #7]
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	d817      	bhi.n	800ba4c <USBD_Get_USB_Status+0x44>
 800ba1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ba24 <USBD_Get_USB_Status+0x1c>)
 800ba1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba22:	bf00      	nop
 800ba24:	0800ba35 	.word	0x0800ba35
 800ba28:	0800ba3b 	.word	0x0800ba3b
 800ba2c:	0800ba41 	.word	0x0800ba41
 800ba30:	0800ba47 	.word	0x0800ba47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73fb      	strb	r3, [r7, #15]
    break;
 800ba38:	e00b      	b.n	800ba52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba3e:	e008      	b.n	800ba52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba40:	2301      	movs	r3, #1
 800ba42:	73fb      	strb	r3, [r7, #15]
    break;
 800ba44:	e005      	b.n	800ba52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba46:	2303      	movs	r3, #3
 800ba48:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4a:	e002      	b.n	800ba52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba50:	bf00      	nop
  }
  return usb_status;
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <memset>:
 800ba60:	4402      	add	r2, r0
 800ba62:	4603      	mov	r3, r0
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d100      	bne.n	800ba6a <memset+0xa>
 800ba68:	4770      	bx	lr
 800ba6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba6e:	e7f9      	b.n	800ba64 <memset+0x4>

0800ba70 <__libc_init_array>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	4d0d      	ldr	r5, [pc, #52]	@ (800baa8 <__libc_init_array+0x38>)
 800ba74:	4c0d      	ldr	r4, [pc, #52]	@ (800baac <__libc_init_array+0x3c>)
 800ba76:	1b64      	subs	r4, r4, r5
 800ba78:	10a4      	asrs	r4, r4, #2
 800ba7a:	2600      	movs	r6, #0
 800ba7c:	42a6      	cmp	r6, r4
 800ba7e:	d109      	bne.n	800ba94 <__libc_init_array+0x24>
 800ba80:	4d0b      	ldr	r5, [pc, #44]	@ (800bab0 <__libc_init_array+0x40>)
 800ba82:	4c0c      	ldr	r4, [pc, #48]	@ (800bab4 <__libc_init_array+0x44>)
 800ba84:	f000 f818 	bl	800bab8 <_init>
 800ba88:	1b64      	subs	r4, r4, r5
 800ba8a:	10a4      	asrs	r4, r4, #2
 800ba8c:	2600      	movs	r6, #0
 800ba8e:	42a6      	cmp	r6, r4
 800ba90:	d105      	bne.n	800ba9e <__libc_init_array+0x2e>
 800ba92:	bd70      	pop	{r4, r5, r6, pc}
 800ba94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba98:	4798      	blx	r3
 800ba9a:	3601      	adds	r6, #1
 800ba9c:	e7ee      	b.n	800ba7c <__libc_init_array+0xc>
 800ba9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa2:	4798      	blx	r3
 800baa4:	3601      	adds	r6, #1
 800baa6:	e7f2      	b.n	800ba8e <__libc_init_array+0x1e>
 800baa8:	0800bb54 	.word	0x0800bb54
 800baac:	0800bb54 	.word	0x0800bb54
 800bab0:	0800bb54 	.word	0x0800bb54
 800bab4:	0800bb58 	.word	0x0800bb58

0800bab8 <_init>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	bf00      	nop
 800babc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800babe:	bc08      	pop	{r3}
 800bac0:	469e      	mov	lr, r3
 800bac2:	4770      	bx	lr

0800bac4 <_fini>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	bf00      	nop
 800bac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baca:	bc08      	pop	{r3}
 800bacc:	469e      	mov	lr, r3
 800bace:	4770      	bx	lr
