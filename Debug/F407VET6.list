
F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c440  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800c5c8  0800c5c8  0000d5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c654  0800c654  0000e158  2**0
                  CONTENTS
  4 .ARM          00000008  0800c654  0800c654  0000d654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c65c  0800c65c  0000e158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c65c  0800c65c  0000d65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c660  0800c660  0000d660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800c664  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e158  2**0
                  CONTENTS
 10 .bss          00002450  20000158  20000158  0000e158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200025a8  200025a8  0000e158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f1c3  00000000  00000000  0000e188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000529a  00000000  00000000  0002d34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b88  00000000  00000000  000325e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c1  00000000  00000000  00034170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002994c  00000000  00000000  00035631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024f49  00000000  00000000  0005ef7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dce92  00000000  00000000  00083ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00160d58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000076a0  00000000  00000000  00160d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0016843c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000158 	.word	0x20000158
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c5b0 	.word	0x0800c5b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000015c 	.word	0x2000015c
 80001c4:	0800c5b0 	.word	0x0800c5b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <ili9341_reset_ctrl_lines>:
 * ili9341_reset_ctrl_lines () - reset control lines, set them to input to allow auto-init
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_reset_ctrl_lines (void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

    GPIO_InitStructure.GPIO_Pin     =   GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                        GPIO_Pin_14 | GPIO_Pin_15;
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <ili9341_init_ctrl_lines>:
 * ili9341_init_ctrl_lines() - init control lines
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_init_ctrl_lines (void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
    // --------------------------------------------------------------------------------------------------------------------------------------
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource7, GPIO_AF_FSMC);
    */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <ili9341_init_fsmc>:
 * ili9341_init_fsmc () - init FSMC
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_init_fsmc (void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
    fsmc.FSMC_WriteTimingStruct         = &ftime;

    FSMC_NORSRAMInit(&fsmc);
    FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);
    */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <ili9341_soft_reset>:
 * ili9341_soft_reset () - software reset
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ili9341_soft_reset (void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
    ili9341_write_command (ILI9341_SOFT_RESET);
 80004e6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80004ea:	2201      	movs	r2, #1
 80004ec:	801a      	strh	r2, [r3, #0]
    HAL_Delay(10);
 80004ee:	200a      	movs	r0, #10
 80004f0:	f001 f8be 	bl	8001670 <HAL_Delay>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <ili9341_powera>:
 * ili9341_powera ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_powera (void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_POWERA);
 80004fc:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000500:	22cb      	movs	r2, #203	@ 0xcb
 8000502:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x39);
 8000504:	4b09      	ldr	r3, [pc, #36]	@ (800052c <ili9341_powera+0x34>)
 8000506:	2239      	movs	r2, #57	@ 0x39
 8000508:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x2C);
 800050a:	4b08      	ldr	r3, [pc, #32]	@ (800052c <ili9341_powera+0x34>)
 800050c:	222c      	movs	r2, #44	@ 0x2c
 800050e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <ili9341_powera+0x34>)
 8000512:	2200      	movs	r2, #0
 8000514:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x34);
 8000516:	4b05      	ldr	r3, [pc, #20]	@ (800052c <ili9341_powera+0x34>)
 8000518:	2234      	movs	r2, #52	@ 0x34
 800051a:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x02);
 800051c:	4b03      	ldr	r3, [pc, #12]	@ (800052c <ili9341_powera+0x34>)
 800051e:	2202      	movs	r2, #2
 8000520:	801a      	strh	r2, [r3, #0]
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	60080000 	.word	0x60080000

08000530 <ili9341_powerb>:
 * ili9341_powerb ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_powerb (void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_POWERB);
 8000534:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000538:	22cf      	movs	r2, #207	@ 0xcf
 800053a:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <ili9341_powerb+0x28>)
 800053e:	2200      	movs	r2, #0
 8000540:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0xC1);
 8000542:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <ili9341_powerb+0x28>)
 8000544:	22c1      	movs	r2, #193	@ 0xc1
 8000546:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x30);
 8000548:	4b03      	ldr	r3, [pc, #12]	@ (8000558 <ili9341_powerb+0x28>)
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	801a      	strh	r2, [r3, #0]
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	60080000 	.word	0x60080000

0800055c <ili9341_driver_timing_control_a>:
 * ili9341_driver_timing_control_a ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_driver_timing_control_a (void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_DRIVER_TIMING_CONTROL_A);
 8000560:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000564:	22e8      	movs	r2, #232	@ 0xe8
 8000566:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x85);
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <ili9341_driver_timing_control_a+0x28>)
 800056a:	2285      	movs	r2, #133	@ 0x85
 800056c:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 800056e:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <ili9341_driver_timing_control_a+0x28>)
 8000570:	2200      	movs	r2, #0
 8000572:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x78);
 8000574:	4b03      	ldr	r3, [pc, #12]	@ (8000584 <ili9341_driver_timing_control_a+0x28>)
 8000576:	2278      	movs	r2, #120	@ 0x78
 8000578:	801a      	strh	r2, [r3, #0]
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	60080000 	.word	0x60080000

08000588 <ili9341_driver_timing_control_b>:
 * ili9341_driver_timing_control_b ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_driver_timing_control_b (void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_DRIVER_TIMING_CONTROL_B);
 800058c:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000590:	22ea      	movs	r2, #234	@ 0xea
 8000592:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 8000594:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <ili9341_driver_timing_control_b+0x24>)
 8000596:	2200      	movs	r2, #0
 8000598:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 800059a:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <ili9341_driver_timing_control_b+0x24>)
 800059c:	2200      	movs	r2, #0
 800059e:	801a      	strh	r2, [r3, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	60080000 	.word	0x60080000

080005b0 <ili9341_power_on_sequence_control>:
 * ili9341_power_on_sequence_control ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_power_on_sequence_control (void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_POWER_ON_SEQUENCE_CONTROL);
 80005b4:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80005b8:	22ed      	movs	r2, #237	@ 0xed
 80005ba:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x64);
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <ili9341_power_on_sequence_control+0x30>)
 80005be:	2264      	movs	r2, #100	@ 0x64
 80005c0:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x03);
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <ili9341_power_on_sequence_control+0x30>)
 80005c4:	2203      	movs	r2, #3
 80005c6:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x12);
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <ili9341_power_on_sequence_control+0x30>)
 80005ca:	2212      	movs	r2, #18
 80005cc:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x81);
 80005ce:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <ili9341_power_on_sequence_control+0x30>)
 80005d0:	2281      	movs	r2, #129	@ 0x81
 80005d2:	801a      	strh	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	60080000 	.word	0x60080000

080005e4 <ili9341_pump_ration_control>:
 * ili9341_pump_ration_control ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_pump_ration_control (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_PUMP_RATIO_CONTROL);
 80005e8:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80005ec:	22f7      	movs	r2, #247	@ 0xf7
 80005ee:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x20);
 80005f0:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <ili9341_pump_ration_control+0x1c>)
 80005f2:	2220      	movs	r2, #32
 80005f4:	801a      	strh	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	60080000 	.word	0x60080000

08000604 <ili9341_power_control_1>:
 * ili9341_power_control_1 ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_power_control_1 (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_POWER_CONTROL_1);
 8000608:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800060c:	22c0      	movs	r2, #192	@ 0xc0
 800060e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x23);
 8000610:	4b03      	ldr	r3, [pc, #12]	@ (8000620 <ili9341_power_control_1+0x1c>)
 8000612:	2223      	movs	r2, #35	@ 0x23
 8000614:	801a      	strh	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	60080000 	.word	0x60080000

08000624 <ili9341_power_control_2>:
 * ili9341_power_control_2 ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_power_control_2 (void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_POWER_CONTROL_2);
 8000628:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800062c:	22c1      	movs	r2, #193	@ 0xc1
 800062e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x10);
 8000630:	4b03      	ldr	r3, [pc, #12]	@ (8000640 <ili9341_power_control_2+0x1c>)
 8000632:	2210      	movs	r2, #16
 8000634:	801a      	strh	r2, [r3, #0]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	60080000 	.word	0x60080000

08000644 <ili9341_vcom_control_1>:
 * ili9341_vcom_control_1 ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_vcom_control_1 (void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_VCOM_CONTROL_1);
 8000648:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800064c:	22c5      	movs	r2, #197	@ 0xc5
 800064e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x3E);
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <ili9341_vcom_control_1+0x24>)
 8000652:	223e      	movs	r2, #62	@ 0x3e
 8000654:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x28);
 8000656:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <ili9341_vcom_control_1+0x24>)
 8000658:	2228      	movs	r2, #40	@ 0x28
 800065a:	801a      	strh	r2, [r3, #0]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	60080000 	.word	0x60080000

0800066c <ili9341_vcom_control_2>:
 * ili9341_vcom_control_2 ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_vcom_control_2 (void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_VCOM_CONTROL_2);
 8000670:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000674:	22c7      	movs	r2, #199	@ 0xc7
 8000676:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x86);
 8000678:	4b03      	ldr	r3, [pc, #12]	@ (8000688 <ili9341_vcom_control_2+0x1c>)
 800067a:	2286      	movs	r2, #134	@ 0x86
 800067c:	801a      	strh	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	60080000 	.word	0x60080000

0800068c <ili9341_memory_access_control>:
#define ILI9341_MADCTL_FLIP_VERTICAL_ON         0x80
#define ILI9341_MADCTL_FLIP_VERTICAL_OFF        0x00

static void
ili9341_memory_access_control (void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
    uint8_t    madctl = 0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	71fb      	strb	r3, [r7, #7]

    if (ili9341.flags & ILI9341_GLOBAL_FLAGS_RGB_ORDER)
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <ili9341_memory_access_control+0x80>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d103      	bne.n	80006aa <ili9341_memory_access_control+0x1e>
    {
        madctl |= ILI9341_MADCTL_ORDER_RGB;
    }
    else
    {
        madctl |= ILI9341_MADCTL_ORDER_BGR;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f043 0308 	orr.w	r3, r3, #8
 80006a8:	71fb      	strb	r3, [r7, #7]
    }

    if (ili9341.flags & ILI9341_GLOBAL_FLAGS_ROW_COL_EXCHANGE)
 80006aa:	4b18      	ldr	r3, [pc, #96]	@ (800070c <ili9341_memory_access_control+0x80>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f003 0308 	and.w	r3, r3, #8
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <ili9341_memory_access_control+0x32>
    {
        madctl |= ILI9341_MADCTL_ROW_COL_EXCHANGE_ON;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f043 0320 	orr.w	r3, r3, #32
 80006bc:	71fb      	strb	r3, [r7, #7]
    else
    {
        madctl |= ILI9341_MADCTL_ROW_COL_EXCHANGE_OFF;
    }

    if (ili9341.flags & ILI9341_GLOBAL_FLAGS_FLIP_HORIZONTAL)
 80006be:	4b13      	ldr	r3, [pc, #76]	@ (800070c <ili9341_memory_access_control+0x80>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d103      	bne.n	80006d2 <ili9341_memory_access_control+0x46>
    {
        madctl |= ILI9341_MADCTL_FLIP_HORIZONTAL_OFF;                               // we use landscape as default
    }
    else
    {
        madctl |= ILI9341_MADCTL_FLIP_HORIZONTAL_ON;
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006d0:	71fb      	strb	r3, [r7, #7]
    }

    if (ili9341.flags & ILI9341_GLOBAL_FLAGS_FLIP_VERTICAL)
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <ili9341_memory_access_control+0x80>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d003      	beq.n	80006e6 <ili9341_memory_access_control+0x5a>
    {
        madctl |= ILI9341_MADCTL_FLIP_VERTICAL_ON;
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006e4:	71fb      	strb	r3, [r7, #7]
    else
    {
        madctl |= ILI9341_MADCTL_FLIP_VERTICAL_OFF;
    }

    ili9341_write_command(ILI9341_MEMORY_ACCESS_CONTROL);
 80006e6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80006ea:	2236      	movs	r2, #54	@ 0x36
 80006ec:	801a      	strh	r2, [r3, #0]
    ili9341_write_data (madctl);
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <ili9341_memory_access_control+0x84>)
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	b292      	uxth	r2, r2
 80006f4:	801a      	strh	r2, [r3, #0]
    ili9341_write_command(ILI9341_MEMORY_ACCESS_CONTROL);
 80006f6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80006fa:	2236      	movs	r2, #54	@ 0x36
 80006fc:	801a      	strh	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000174 	.word	0x20000174
 8000710:	60080000 	.word	0x60080000

08000714 <ili9341_colmod_pixel_format_set>:
 * ili9341_colmod_pixel_format_set ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_colmod_pixel_format_set (void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_COLMOD_PIXEL_FORMAT_SET);
 8000718:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800071c:	223a      	movs	r2, #58	@ 0x3a
 800071e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x55);                                                               // 16-bit interface & 16-bit format
 8000720:	4b03      	ldr	r3, [pc, #12]	@ (8000730 <ili9341_colmod_pixel_format_set+0x1c>)
 8000722:	2255      	movs	r2, #85	@ 0x55
 8000724:	801a      	strh	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	60080000 	.word	0x60080000

08000734 <ili9341_frame_rate_control_in_normal_mode_full_colors>:
 * ili9341_frame_rate_control_in_normal_mode_full_colors ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_frame_rate_control_in_normal_mode_full_colors (void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_FRAME_RATE_CONTROL_IN_NORMAL_MODE_FULL_COLORS);
 8000738:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800073c:	22b1      	movs	r2, #177	@ 0xb1
 800073e:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <ili9341_frame_rate_control_in_normal_mode_full_colors+0x24>)
 8000742:	2200      	movs	r2, #0
 8000744:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x18);
 8000746:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <ili9341_frame_rate_control_in_normal_mode_full_colors+0x24>)
 8000748:	2218      	movs	r2, #24
 800074a:	801a      	strh	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	60080000 	.word	0x60080000

0800075c <ili9341_display_function_control>:
 * ili9341_display_function_control ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_display_function_control (void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_DISPLAY_FUNCTION_CONTROL);
 8000760:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000764:	22b6      	movs	r2, #182	@ 0xb6
 8000766:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x08);
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <ili9341_display_function_control+0x28>)
 800076a:	2208      	movs	r2, #8
 800076c:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x82);
 800076e:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <ili9341_display_function_control+0x28>)
 8000770:	2282      	movs	r2, #130	@ 0x82
 8000772:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x27);
 8000774:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <ili9341_display_function_control+0x28>)
 8000776:	2227      	movs	r2, #39	@ 0x27
 8000778:	801a      	strh	r2, [r3, #0]
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	60080000 	.word	0x60080000

08000788 <ili9341_enable_g3>:
 * ili9341_enable_g3 ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_enable_g3 (void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_ENABLE_G3);
 800078c:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000790:	22f2      	movs	r2, #242	@ 0xf2
 8000792:	801a      	strh	r2, [r3, #0]
    ili9341_write_data(0x00);
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <ili9341_enable_g3+0x1c>)
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	60080000 	.word	0x60080000

080007a8 <ili9341_sleep_out>:
 * ili9341_sleep_out ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_sleep_out (void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_SLEEP_OUT);
 80007ac:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80007b0:	2211      	movs	r2, #17
 80007b2:	801a      	strh	r2, [r3, #0]
    HAL_Delay(10);
 80007b4:	200a      	movs	r0, #10
 80007b6:	f000 ff5b 	bl	8001670 <HAL_Delay>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}

080007be <ili9341_display_on>:
 * ili9341_display_on ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
ili9341_display_on (void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
    ili9341_write_command(ILI9341_DISPLAY_ON);
 80007c2:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80007c6:	2229      	movs	r2, #41	@ 0x29
 80007c8:	801a      	strh	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <ili9341_init>:
 * ili9341_init ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ili9341_init (void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
    ili9341.flags = 0;
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <ili9341_init+0x68>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]

    ili9341_reset_ctrl_lines ();                                                            // control lines as input
 80007de:	f7ff fe6b 	bl	80004b8 <ili9341_reset_ctrl_lines>
    ili9341_init_ctrl_lines ();
 80007e2:	f7ff fe70 	bl	80004c6 <ili9341_init_ctrl_lines>
    ili9341_init_fsmc ();
 80007e6:	f7ff fe75 	bl	80004d4 <ili9341_init_fsmc>
    HAL_Delay(20);                                                                         // wait for display coming up
 80007ea:	2014      	movs	r0, #20
 80007ec:	f000 ff40 	bl	8001670 <HAL_Delay>

    ili9341_soft_reset ();
 80007f0:	f7ff fe77 	bl	80004e2 <ili9341_soft_reset>
    ili9341_powera ();
 80007f4:	f7ff fe80 	bl	80004f8 <ili9341_powera>
    ili9341_powerb ();
 80007f8:	f7ff fe9a 	bl	8000530 <ili9341_powerb>
    ili9341_driver_timing_control_a ();
 80007fc:	f7ff feae 	bl	800055c <ili9341_driver_timing_control_a>
    ili9341_driver_timing_control_b ();
 8000800:	f7ff fec2 	bl	8000588 <ili9341_driver_timing_control_b>
    ili9341_power_on_sequence_control ();
 8000804:	f7ff fed4 	bl	80005b0 <ili9341_power_on_sequence_control>
    ili9341_pump_ration_control ();
 8000808:	f7ff feec 	bl	80005e4 <ili9341_pump_ration_control>
    ili9341_power_control_1 ();
 800080c:	f7ff fefa 	bl	8000604 <ili9341_power_control_1>
    ili9341_power_control_2 ();
 8000810:	f7ff ff08 	bl	8000624 <ili9341_power_control_2>
    ili9341_vcom_control_1 ();
 8000814:	f7ff ff16 	bl	8000644 <ili9341_vcom_control_1>
    ili9341_vcom_control_2 ();
 8000818:	f7ff ff28 	bl	800066c <ili9341_vcom_control_2>
    ili9341_memory_access_control ();
 800081c:	f7ff ff36 	bl	800068c <ili9341_memory_access_control>
    ili9341_colmod_pixel_format_set ();
 8000820:	f7ff ff78 	bl	8000714 <ili9341_colmod_pixel_format_set>
    ili9341_frame_rate_control_in_normal_mode_full_colors ();
 8000824:	f7ff ff86 	bl	8000734 <ili9341_frame_rate_control_in_normal_mode_full_colors>
    ili9341_display_function_control ();
 8000828:	f7ff ff98 	bl	800075c <ili9341_display_function_control>
    ili9341_enable_g3 ();
 800082c:	f7ff ffac 	bl	8000788 <ili9341_enable_g3>
    ili9341_sleep_out ();
 8000830:	f7ff ffba 	bl	80007a8 <ili9341_sleep_out>
    ili9341_display_on ();
 8000834:	f7ff ffc3 	bl	80007be <ili9341_display_on>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000174 	.word	0x20000174

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fea2 	bl	800158c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f824 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 fa14 	bl	8000c78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000850:	f000 f9f2 	bl	8000c38 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000854:	f00a fc48 	bl	800b0e8 <MX_USB_DEVICE_Init>
  MX_FSMC_Init();
 8000858:	f000 fac4 	bl	8000de4 <MX_FSMC_Init>
  MX_RTC_Init();
 800085c:	f000 f89a 	bl	8000994 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000860:	f000 f932 	bl	8000ac8 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000864:	f000 f952 	bl	8000b0c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000868:	f000 f986 	bl	8000b78 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800086c:	f000 f9ba 	bl	8000be4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000870:	f008 fa3e 	bl	8008cf0 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8000874:	f008 fc0e 	bl	8009094 <MX_LIBJPEG_Init>
  MX_CRC_Init();
 8000878:	f000 f878 	bl	800096c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  tft_init();
 800087c:	f000 fe56 	bl	800152c <tft_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("hello World \n");
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <main+0x50>)
 8000882:	f00b fbaf 	bl	800bfe4 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	transmit_from_buffer();
 8000886:	f00a fd7b 	bl	800b380 <transmit_from_buffer>
	printf("hello World \n");
 800088a:	bf00      	nop
 800088c:	e7f8      	b.n	8000880 <main+0x40>
 800088e:	bf00      	nop
 8000890:	0800c5c8 	.word	0x0800c5c8

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	@ 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	@ 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f00b fc7e 	bl	800c1a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b29      	ldr	r3, [pc, #164]	@ (8000964 <SystemClock_Config+0xd0>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	4a28      	ldr	r2, [pc, #160]	@ (8000964 <SystemClock_Config+0xd0>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c8:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <SystemClock_Config+0xd0>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b23      	ldr	r3, [pc, #140]	@ (8000968 <SystemClock_Config+0xd4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a22      	ldr	r2, [pc, #136]	@ (8000968 <SystemClock_Config+0xd4>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <SystemClock_Config+0xd4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80008f0:	2305      	movs	r3, #5
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008fa:	2301      	movs	r3, #1
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000908:	2308      	movs	r3, #8
 800090a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800090c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000910:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000916:	2307      	movs	r3, #7
 8000918:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	4618      	mov	r0, r3
 8000920:	f002 ff22 	bl	8003768 <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800092a:	f000 fabb 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2302      	movs	r3, #2
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800093a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000944:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2105      	movs	r1, #5
 800094c:	4618      	mov	r0, r3
 800094e:	f003 f983 	bl	8003c58 <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000958:	f000 faa4 	bl	8000ea4 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3750      	adds	r7, #80	@ 0x50
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_CRC_Init+0x20>)
 8000972:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <MX_CRC_Init+0x24>)
 8000974:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_CRC_Init+0x20>)
 8000978:	f000 ffaf 	bl	80018da <HAL_CRC_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000982:	f000 fa8f 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000178 	.word	0x20000178
 8000990:	40023000 	.word	0x40023000

08000994 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b090      	sub	sp, #64	@ 0x40
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800099a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	2228      	movs	r2, #40	@ 0x28
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f00b fbf5 	bl	800c1a4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009ba:	4b41      	ldr	r3, [pc, #260]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 80009bc:	4a41      	ldr	r2, [pc, #260]	@ (8000ac4 <MX_RTC_Init+0x130>)
 80009be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009c0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009c6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 80009c8:	227f      	movs	r2, #127	@ 0x7f
 80009ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009cc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 80009ce:	22ff      	movs	r2, #255	@ 0xff
 80009d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009d8:	4b39      	ldr	r3, [pc, #228]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009de:	4b38      	ldr	r3, [pc, #224]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009e4:	4836      	ldr	r0, [pc, #216]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 80009e6:	f003 fc39 	bl	800425c <HAL_RTC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80009f0:	f000 fa58 	bl	8000ea4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a12:	2201      	movs	r2, #1
 8000a14:	4619      	mov	r1, r3
 8000a16:	482a      	ldr	r0, [pc, #168]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 8000a18:	f003 fca3 	bl	8004362 <HAL_RTC_SetTime>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000a22:	f000 fa3f 	bl	8000ea4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a26:	2301      	movs	r3, #1
 8000a28:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	481e      	ldr	r0, [pc, #120]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 8000a48:	f003 fd25 	bl	8004496 <HAL_RTC_SetDate>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000a52:	f000 fa27 	bl	8000ea4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 8000a8e:	f003 fd87 	bl	80045a0 <HAL_RTC_SetAlarm_IT>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000a98:	f000 fa04 	bl	8000ea4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000a9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_RTC_Init+0x12c>)
 8000aaa:	f003 fd79 	bl	80045a0 <HAL_RTC_SetAlarm_IT>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000ab4:	f000 f9f6 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3740      	adds	r7, #64	@ 0x40
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000180 	.word	0x20000180
 8000ac4:	40002800 	.word	0x40002800

08000ac8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <MX_SDIO_SD_Init+0x3c>)
 8000ace:	4a0e      	ldr	r2, [pc, #56]	@ (8000b08 <MX_SDIO_SD_Init+0x40>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_SDIO_SD_Init+0x3c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <MX_SDIO_SD_Init+0x3c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_SDIO_SD_Init+0x3c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <MX_SDIO_SD_Init+0x3c>)
 8000ae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000aea:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <MX_SDIO_SD_Init+0x3c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000af2:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <MX_SDIO_SD_Init+0x3c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200001a0 	.word	0x200001a0
 8000b08:	40012c00 	.word	0x40012c00

08000b0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b12:	4a18      	ldr	r2, [pc, #96]	@ (8000b74 <MX_SPI1_Init+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b58:	220a      	movs	r2, #10
 8000b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <MX_SPI1_Init+0x64>)
 8000b5e:	f005 fba3 	bl	80062a8 <HAL_SPI_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b68:	f000 f99c 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000284 	.word	0x20000284
 8000b74:	40013000 	.word	0x40013000

08000b78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000b7e:	4a18      	ldr	r2, [pc, #96]	@ (8000be0 <MX_SPI2_Init+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b82:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000b84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000bc2:	220a      	movs	r2, #10
 8000bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_SPI2_Init+0x64>)
 8000bc8:	f005 fb6e 	bl	80062a8 <HAL_SPI_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8000bd2:	f000 f967 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002dc 	.word	0x200002dc
 8000be0:	40003800 	.word	0x40003800

08000be4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART1_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c1c:	f005 fc15 	bl	800644a <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f000 f93d 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000334 	.word	0x20000334
 8000c34:	40011000 	.word	0x40011000

08000c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <MX_DMA_Init+0x3c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a0b      	ldr	r2, [pc, #44]	@ (8000c74 <MX_DMA_Init+0x3c>)
 8000c48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_DMA_Init+0x3c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	203b      	movs	r0, #59	@ 0x3b
 8000c60:	f000 fe05 	bl	800186e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c64:	203b      	movs	r0, #59	@ 0x3b
 8000c66:	f000 fe1e 	bl	80018a6 <HAL_NVIC_EnableIRQ>

}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	@ 0x30
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	4b50      	ldr	r3, [pc, #320]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a4f      	ldr	r2, [pc, #316]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	61bb      	str	r3, [r7, #24]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	4b49      	ldr	r3, [pc, #292]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a48      	ldr	r2, [pc, #288]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b46      	ldr	r3, [pc, #280]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b42      	ldr	r3, [pc, #264]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a41      	ldr	r2, [pc, #260]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a3a      	ldr	r2, [pc, #232]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b38      	ldr	r3, [pc, #224]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b34      	ldr	r3, [pc, #208]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a33      	ldr	r2, [pc, #204]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b31      	ldr	r3, [pc, #196]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <MX_GPIO_Init+0x15c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLASH_CS_Pin|NRF_CE_Pin|NRF_CS_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	21c1      	movs	r1, #193	@ 0xc1
 8000d3a:	4827      	ldr	r0, [pc, #156]	@ (8000dd8 <MX_GPIO_Init+0x160>)
 8000d3c:	f001 faaa 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2102      	movs	r1, #2
 8000d44:	4824      	ldr	r0, [pc, #144]	@ (8000dd8 <MX_GPIO_Init+0x160>)
 8000d46:	f001 faa5 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000d4a:	2318      	movs	r3, #24
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481f      	ldr	r0, [pc, #124]	@ (8000ddc <MX_GPIO_Init+0x164>)
 8000d5e:	f001 f8e5 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_FAKE_Pin */
  GPIO_InitStruct.Pin = SD_FAKE_Pin;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SD_FAKE_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	481a      	ldr	r0, [pc, #104]	@ (8000de0 <MX_GPIO_Init+0x168>)
 8000d76:	f001 f8d9 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 8000d7a:	2320      	movs	r3, #32
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4814      	ldr	r0, [pc, #80]	@ (8000de0 <MX_GPIO_Init+0x168>)
 8000d90:	f001 f8cc 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin LCD_BL_Pin NRF_CE_Pin NRF_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_BL_Pin|NRF_CE_Pin|NRF_CS_Pin;
 8000d94:	23c3      	movs	r3, #195	@ 0xc3
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	480b      	ldr	r0, [pc, #44]	@ (8000dd8 <MX_GPIO_Init+0x160>)
 8000dac:	f001 f8be 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000db0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_GPIO_Init+0x160>)
 8000dc8:	f001 f8b0 	bl	8001f2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	@ 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40020800 	.word	0x40020800

08000de4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000dfe:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000e02:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e04:	4b25      	ldr	r3, [pc, #148]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e06:	4a26      	ldr	r2, [pc, #152]	@ (8000ea0 <MX_FSMC_Init+0xbc>)
 8000e08:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e0a:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000e10:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000e16:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e1e:	2210      	movs	r2, #16
 8000e20:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e40:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000e48:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e60:	230f      	movs	r3, #15
 8000e62:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000e64:	230f      	movs	r3, #15
 8000e66:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 13;
 8000e68:	230d      	movs	r3, #13
 8000e6a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e70:	2310      	movs	r3, #16
 8000e72:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e74:	2311      	movs	r3, #17
 8000e76:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <MX_FSMC_Init+0xb8>)
 8000e84:	f005 fa99 	bl	80063ba <HAL_SRAM_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000e8e:	f000 f809 	bl	8000ea4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000e92:	bf00      	nop
 8000e94:	3720      	adds	r7, #32
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000037c 	.word	0x2000037c
 8000ea0:	a0000104 	.word	0xa0000104

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <Error_Handler+0x8>

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	4a08      	ldr	r2, [pc, #32]	@ (8000efc <HAL_MspInit+0x4c>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f3c <HAL_CRC_MspInit+0x3c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10d      	bne.n	8000f2e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_CRC_MspInit+0x40>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a09      	ldr	r2, [pc, #36]	@ (8000f40 <HAL_CRC_MspInit+0x40>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <HAL_CRC_MspInit+0x40>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023000 	.word	0x40023000
 8000f40:	40023800 	.word	0x40023800

08000f44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <HAL_RTC_MspInit+0x5c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d119      	bne.n	8000f98 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f64:	2302      	movs	r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f6c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 f890 	bl	8004098 <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000f7e:	f7ff ff91 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <HAL_RTC_MspInit+0x60>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2029      	movs	r0, #41	@ 0x29
 8000f8e:	f000 fc6e 	bl	800186e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000f92:	2029      	movs	r0, #41	@ 0x29
 8000f94:	f000 fc87 	bl	80018a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40002800 	.word	0x40002800
 8000fa4:	42470e3c 	.word	0x42470e3c

08000fa8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a4d      	ldr	r2, [pc, #308]	@ (80010fc <HAL_SD_MspInit+0x154>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	f040 8094 	bne.w	80010f4 <HAL_SD_MspInit+0x14c>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8001100 <HAL_SD_MspInit+0x158>)
 8000fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8001100 <HAL_SD_MspInit+0x158>)
 8000fd6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fda:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fdc:	4b48      	ldr	r3, [pc, #288]	@ (8001100 <HAL_SD_MspInit+0x158>)
 8000fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	4b44      	ldr	r3, [pc, #272]	@ (8001100 <HAL_SD_MspInit+0x158>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff0:	4a43      	ldr	r2, [pc, #268]	@ (8001100 <HAL_SD_MspInit+0x158>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff8:	4b41      	ldr	r3, [pc, #260]	@ (8001100 <HAL_SD_MspInit+0x158>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b3d      	ldr	r3, [pc, #244]	@ (8001100 <HAL_SD_MspInit+0x158>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100c:	4a3c      	ldr	r2, [pc, #240]	@ (8001100 <HAL_SD_MspInit+0x158>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	6313      	str	r3, [r2, #48]	@ 0x30
 8001014:	4b3a      	ldr	r3, [pc, #232]	@ (8001100 <HAL_SD_MspInit+0x158>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001020:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001024:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001032:	230c      	movs	r3, #12
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4831      	ldr	r0, [pc, #196]	@ (8001104 <HAL_SD_MspInit+0x15c>)
 800103e:	f000 ff75 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001042:	2304      	movs	r3, #4
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001052:	230c      	movs	r3, #12
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	482a      	ldr	r0, [pc, #168]	@ (8001108 <HAL_SD_MspInit+0x160>)
 800105e:	f000 ff65 	bl	8001f2c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO Init */
    hdma_sdio.Instance = DMA2_Stream3;
 8001062:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <HAL_SD_MspInit+0x164>)
 8001064:	4a2a      	ldr	r2, [pc, #168]	@ (8001110 <HAL_SD_MspInit+0x168>)
 8001066:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8001068:	4b28      	ldr	r3, [pc, #160]	@ (800110c <HAL_SD_MspInit+0x164>)
 800106a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800106e:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001070:	4b26      	ldr	r3, [pc, #152]	@ (800110c <HAL_SD_MspInit+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8001076:	4b25      	ldr	r3, [pc, #148]	@ (800110c <HAL_SD_MspInit+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 800107c:	4b23      	ldr	r3, [pc, #140]	@ (800110c <HAL_SD_MspInit+0x164>)
 800107e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001082:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001084:	4b21      	ldr	r3, [pc, #132]	@ (800110c <HAL_SD_MspInit+0x164>)
 8001086:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800108a:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800108c:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <HAL_SD_MspInit+0x164>)
 800108e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001092:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HAL_SD_MspInit+0x164>)
 8001096:	2220      	movs	r2, #32
 8001098:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 800109a:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <HAL_SD_MspInit+0x164>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <HAL_SD_MspInit+0x164>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010a6:	4b19      	ldr	r3, [pc, #100]	@ (800110c <HAL_SD_MspInit+0x164>)
 80010a8:	2203      	movs	r2, #3
 80010aa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_SD_MspInit+0x164>)
 80010ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_SD_MspInit+0x164>)
 80010b6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80010ba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 80010bc:	4813      	ldr	r0, [pc, #76]	@ (800110c <HAL_SD_MspInit+0x164>)
 80010be:	f000 fc29 	bl	8001914 <HAL_DMA_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80010c8:	f7ff feec 	bl	8000ea4 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <HAL_SD_MspInit+0x164>)
 80010d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80010d2:	4a0e      	ldr	r2, [pc, #56]	@ (800110c <HAL_SD_MspInit+0x164>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <HAL_SD_MspInit+0x164>)
 80010dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010de:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <HAL_SD_MspInit+0x164>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2031      	movs	r0, #49	@ 0x31
 80010ea:	f000 fbc0 	bl	800186e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80010ee:	2031      	movs	r0, #49	@ 0x31
 80010f0:	f000 fbd9 	bl	80018a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	@ 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40012c00 	.word	0x40012c00
 8001100:	40023800 	.word	0x40023800
 8001104:	40020800 	.word	0x40020800
 8001108:	40020c00 	.word	0x40020c00
 800110c:	20000224 	.word	0x20000224
 8001110:	40026458 	.word	0x40026458

08001114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	@ 0x30
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a32      	ldr	r2, [pc, #200]	@ (80011fc <HAL_SPI_MspInit+0xe8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12c      	bne.n	8001190 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a30      	ldr	r2, [pc, #192]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 8001140:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b2e      	ldr	r3, [pc, #184]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a29      	ldr	r2, [pc, #164]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800116e:	2338      	movs	r3, #56	@ 0x38
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117e:	2305      	movs	r3, #5
 8001180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	481e      	ldr	r0, [pc, #120]	@ (8001204 <HAL_SPI_MspInit+0xf0>)
 800118a:	f000 fecf 	bl	8001f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800118e:	e031      	b.n	80011f4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1c      	ldr	r2, [pc, #112]	@ (8001208 <HAL_SPI_MspInit+0xf4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d12c      	bne.n	80011f4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a10      	ldr	r2, [pc, #64]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <HAL_SPI_MspInit+0xec>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011d2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011e4:	2305      	movs	r3, #5
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <HAL_SPI_MspInit+0xf0>)
 80011f0:	f000 fe9c 	bl	8001f2c <HAL_GPIO_Init>
}
 80011f4:	bf00      	nop
 80011f6:	3730      	adds	r7, #48	@ 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40013000 	.word	0x40013000
 8001200:	40023800 	.word	0x40023800
 8001204:	40020400 	.word	0x40020400
 8001208:	40003800 	.word	0x40003800

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a19      	ldr	r2, [pc, #100]	@ (8001290 <HAL_UART_MspInit+0x84>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12c      	bne.n	8001288 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001238:	f043 0310 	orr.w	r3, r3, #16
 800123c:	6453      	str	r3, [r2, #68]	@ 0x44
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a10      	ldr	r2, [pc, #64]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_UART_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001266:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001278:	2307      	movs	r3, #7
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <HAL_UART_MspInit+0x8c>)
 8001284:	f000 fe52 	bl	8001f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40011000 	.word	0x40011000
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <HAL_FSMC_MspInit+0x88>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d131      	bne.n	800131c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <HAL_FSMC_MspInit+0x88>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <HAL_FSMC_MspInit+0x8c>)
 80012c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c6:	4a18      	ldr	r2, [pc, #96]	@ (8001328 <HAL_FSMC_MspInit+0x8c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <HAL_FSMC_MspInit+0x8c>)
 80012d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80012da:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80012de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012ec:	230c      	movs	r3, #12
 80012ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	480d      	ldr	r0, [pc, #52]	@ (800132c <HAL_FSMC_MspInit+0x90>)
 80012f6:	f000 fe19 	bl	8001f2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80012fa:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 80012fe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800130c:	230c      	movs	r3, #12
 800130e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4806      	ldr	r0, [pc, #24]	@ (8001330 <HAL_FSMC_MspInit+0x94>)
 8001316:	f000 fe09 	bl	8001f2c <HAL_GPIO_Init>
 800131a:	e000      	b.n	800131e <HAL_FSMC_MspInit+0x82>
    return;
 800131c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200003cc 	.word	0x200003cc
 8001328:	40023800 	.word	0x40023800
 800132c:	40021000 	.word	0x40021000
 8001330:	40020c00 	.word	0x40020c00

08001334 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800133c:	f7ff ffae 	bl	800129c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <NMI_Handler+0x4>

08001350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <MemManage_Handler+0x4>

08001360 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <UsageFault_Handler+0x4>

08001370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139e:	f000 f947 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <RTC_Alarm_IRQHandler+0x10>)
 80013ae:	f003 fa3b 	bl	8004828 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000180 	.word	0x20000180

080013bc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80013c0:	4802      	ldr	r0, [pc, #8]	@ (80013cc <SDIO_IRQHandler+0x10>)
 80013c2:	f003 ff4f 	bl	8005264 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200001a0 	.word	0x200001a0

080013d0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <DMA2_Stream3_IRQHandler+0x10>)
 80013d6:	f000 fb6d 	bl	8001ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000224 	.word	0x20000224

080013e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <OTG_FS_IRQHandler+0x10>)
 80013ea:	f001 f8b0 	bl	800254e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20001d58 	.word	0x20001d58

080013f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	e00a      	b.n	8001420 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800140a:	f3af 8000 	nop.w
 800140e:	4601      	mov	r1, r0
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	60ba      	str	r2, [r7, #8]
 8001416:	b2ca      	uxtb	r2, r1
 8001418:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	dbf0      	blt.n	800140a <_read+0x12>
  }

  return len;
 8001428:	687b      	ldr	r3, [r7, #4]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800145a:	605a      	str	r2, [r3, #4]
  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_isatty>:

int _isatty(int file)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f00a fec8 	bl	800c260 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20020000 	.word	0x20020000
 80014fc:	00000400 	.word	0x00000400
 8001500:	200003d0 	.word	0x200003d0
 8001504:	200025a8 	.word	0x200025a8

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <tft_init>:
 * tft_init ()
 *-------------------------------------------------------------------------------------------------------------------------------------------
 */
void
tft_init (void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
    ili9341_init ();
 8001530:	f7ff f950 	bl	80007d4 <ili9341_init>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001570 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800153c:	f7ff ffe4 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001542:	490d      	ldr	r1, [pc, #52]	@ (8001578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001558:	4c0a      	ldr	r4, [pc, #40]	@ (8001584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f00a fe81 	bl	800c26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f7ff f969 	bl	8000840 <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 800157c:	0800c664 	.word	0x0800c664
  ldr r2, =_sbss
 8001580:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001584:	200025a8 	.word	0x200025a8

08001588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>
	...

0800158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <HAL_Init+0x40>)
 8001596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800159a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_Init+0x40>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	@ (80015cc <HAL_Init+0x40>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f94f 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	200f      	movs	r0, #15
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff fc76 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f967 	bl	80018c2 <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 f92f 	bl	800186e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	@ (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008
 8001654:	200003d4 	.word	0x200003d4

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200003d4 	.word	0x200003d4

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffde 	bl	8001658 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db0b      	blt.n	8001746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	f003 021f 	and.w	r2, r3, #31
 8001734:	4907      	ldr	r1, [pc, #28]	@ (8001754 <__NVIC_EnableIRQ+0x38>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2001      	movs	r0, #1
 800173e:	fa00 f202 	lsl.w	r2, r0, r2
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	@ (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001824:	d301      	bcc.n	800182a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <SysTick_Config+0x40>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001832:	210f      	movs	r1, #15
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f7ff ff8e 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <SysTick_Config+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <SysTick_Config+0x40>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff29 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001880:	f7ff ff3e 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ff8e 	bl	80017ac <NVIC_EncodePriority>
 8001890:	4602      	mov	r2, r0
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff5d 	bl	8001758 <__NVIC_SetPriority>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff31 	bl	800171c <__NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffa2 	bl	8001814 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e00e      	b.n	800190a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	795b      	ldrb	r3, [r3, #5]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d105      	bne.n	8001902 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff faff 	bl	8000f00 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff fe9a 	bl	8001658 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e099      	b.n	8001a64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001950:	e00f      	b.n	8001972 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001952:	f7ff fe81 	bl	8001658 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b05      	cmp	r3, #5
 800195e:	d908      	bls.n	8001972 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2220      	movs	r2, #32
 8001964:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2203      	movs	r2, #3
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e078      	b.n	8001a64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e8      	bne.n	8001952 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	4b38      	ldr	r3, [pc, #224]	@ (8001a6c <HAL_DMA_Init+0x158>)
 800198c:	4013      	ands	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d107      	bne.n	80019dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	4313      	orrs	r3, r2
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f023 0307 	bic.w	r3, r3, #7
 80019f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d117      	bne.n	8001a36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fa0b 	bl	8001e34 <DMA_CheckFifoParam>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2240      	movs	r2, #64	@ 0x40
 8001a28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a32:	2301      	movs	r3, #1
 8001a34:	e016      	b.n	8001a64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f9c2 	bl	8001dc8 <DMA_CalcBaseAndBitshift>
 8001a44:	4603      	mov	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	223f      	movs	r2, #63	@ 0x3f
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	f010803f 	.word	0xf010803f

08001a70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d004      	beq.n	8001a8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2280      	movs	r2, #128	@ 0x80
 8001a88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00c      	b.n	8001aa8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2205      	movs	r2, #5
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ac0:	4b8e      	ldr	r3, [pc, #568]	@ (8001cfc <HAL_DMA_IRQHandler+0x248>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a8e      	ldr	r2, [pc, #568]	@ (8001d00 <HAL_DMA_IRQHandler+0x24c>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0a9b      	lsrs	r3, r3, #10
 8001acc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ade:	2208      	movs	r2, #8
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d01a      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0204 	bic.w	r2, r2, #4
 8001b06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b24:	2201      	movs	r2, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d012      	beq.n	8001b56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b42:	2201      	movs	r2, #1
 8001b44:	409a      	lsls	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4e:	f043 0202 	orr.w	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d012      	beq.n	8001b8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b78:	2204      	movs	r2, #4
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b84:	f043 0204 	orr.w	r2, r3, #4
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b90:	2210      	movs	r2, #16
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d043      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d03c      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bae:	2210      	movs	r2, #16
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d018      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d108      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d024      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
 8001be2:	e01f      	b.n	8001c24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01b      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
 8001bf4:	e016      	b.n	8001c24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0208 	bic.w	r2, r2, #8
 8001c12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c28:	2220      	movs	r2, #32
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 808f 	beq.w	8001d54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8087 	beq.w	8001d54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d136      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0216 	bic.w	r2, r2, #22
 8001c6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d103      	bne.n	8001c8e <HAL_DMA_IRQHandler+0x1da>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0208 	bic.w	r2, r2, #8
 8001c9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca2:	223f      	movs	r2, #63	@ 0x3f
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d07e      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
        }
        return;
 8001cca:	e079      	b.n	8001dc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01d      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d031      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	4798      	blx	r3
 8001cf8:	e02c      	b.n	8001d54 <HAL_DMA_IRQHandler+0x2a0>
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d023      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
 8001d14:	e01e      	b.n	8001d54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10f      	bne.n	8001d44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0210 	bic.w	r2, r2, #16
 8001d32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d032      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d022      	beq.n	8001dae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	3301      	adds	r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d307      	bcc.n	8001d9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f2      	bne.n	8001d80 <HAL_DMA_IRQHandler+0x2cc>
 8001d9a:	e000      	b.n	8001d9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	4798      	blx	r3
 8001dbe:	e000      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001dc0:	bf00      	nop
    }
  }
}
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3b10      	subs	r3, #16
 8001dd8:	4a14      	ldr	r2, [pc, #80]	@ (8001e2c <DMA_CalcBaseAndBitshift+0x64>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001de2:	4a13      	ldr	r2, [pc, #76]	@ (8001e30 <DMA_CalcBaseAndBitshift+0x68>)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d909      	bls.n	8001e0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	1d1a      	adds	r2, r3, #4
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e08:	e007      	b.n	8001e1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	aaaaaaab 	.word	0xaaaaaaab
 8001e30:	0800c638 	.word	0x0800c638

08001e34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d11f      	bne.n	8001e8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d856      	bhi.n	8001f02 <DMA_CheckFifoParam+0xce>
 8001e54:	a201      	add	r2, pc, #4	@ (adr r2, 8001e5c <DMA_CheckFifoParam+0x28>)
 8001e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5a:	bf00      	nop
 8001e5c:	08001e6d 	.word	0x08001e6d
 8001e60:	08001e7f 	.word	0x08001e7f
 8001e64:	08001e6d 	.word	0x08001e6d
 8001e68:	08001f03 	.word	0x08001f03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d046      	beq.n	8001f06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e7c:	e043      	b.n	8001f06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e86:	d140      	bne.n	8001f0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e8c:	e03d      	b.n	8001f0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e96:	d121      	bne.n	8001edc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d837      	bhi.n	8001f0e <DMA_CheckFifoParam+0xda>
 8001e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001ea4 <DMA_CheckFifoParam+0x70>)
 8001ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea4:	08001eb5 	.word	0x08001eb5
 8001ea8:	08001ebb 	.word	0x08001ebb
 8001eac:	08001eb5 	.word	0x08001eb5
 8001eb0:	08001ecd 	.word	0x08001ecd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb8:	e030      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d025      	beq.n	8001f12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eca:	e022      	b.n	8001f12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ed4:	d11f      	bne.n	8001f16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eda:	e01c      	b.n	8001f16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d903      	bls.n	8001eea <DMA_CheckFifoParam+0xb6>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d003      	beq.n	8001ef0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ee8:	e018      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
      break;
 8001eee:	e015      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00e      	beq.n	8001f1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
      break;
 8001f00:	e00b      	b.n	8001f1a <DMA_CheckFifoParam+0xe6>
      break;
 8001f02:	bf00      	nop
 8001f04:	e00a      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
 8001f08:	e008      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e006      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;
 8001f0e:	bf00      	nop
 8001f10:	e004      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;
 8001f12:	bf00      	nop
 8001f14:	e002      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f16:	bf00      	nop
 8001f18:	e000      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;
 8001f1a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e16b      	b.n	8002220 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 815a 	bne.w	800221a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d005      	beq.n	8001f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d130      	bne.n	8001fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 0201 	and.w	r2, r3, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d017      	beq.n	800201c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d123      	bne.n	8002070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	08da      	lsrs	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3208      	adds	r2, #8
 8002030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	220f      	movs	r2, #15
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0203 	and.w	r2, r3, #3
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80b4 	beq.w	800221a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b60      	ldr	r3, [pc, #384]	@ (8002238 <HAL_GPIO_Init+0x30c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002238 <HAL_GPIO_Init+0x30c>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002238 <HAL_GPIO_Init+0x30c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ce:	4a5b      	ldr	r2, [pc, #364]	@ (800223c <HAL_GPIO_Init+0x310>)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a52      	ldr	r2, [pc, #328]	@ (8002240 <HAL_GPIO_Init+0x314>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d02b      	beq.n	8002152 <HAL_GPIO_Init+0x226>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a51      	ldr	r2, [pc, #324]	@ (8002244 <HAL_GPIO_Init+0x318>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d025      	beq.n	800214e <HAL_GPIO_Init+0x222>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a50      	ldr	r2, [pc, #320]	@ (8002248 <HAL_GPIO_Init+0x31c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <HAL_GPIO_Init+0x21e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4f      	ldr	r2, [pc, #316]	@ (800224c <HAL_GPIO_Init+0x320>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x21a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4e      	ldr	r2, [pc, #312]	@ (8002250 <HAL_GPIO_Init+0x324>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x216>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4d      	ldr	r2, [pc, #308]	@ (8002254 <HAL_GPIO_Init+0x328>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x212>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4c      	ldr	r2, [pc, #304]	@ (8002258 <HAL_GPIO_Init+0x32c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x20e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4b      	ldr	r2, [pc, #300]	@ (800225c <HAL_GPIO_Init+0x330>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x20a>
 8002132:	2307      	movs	r3, #7
 8002134:	e00e      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002136:	2308      	movs	r3, #8
 8002138:	e00c      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800213a:	2306      	movs	r3, #6
 800213c:	e00a      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800213e:	2305      	movs	r3, #5
 8002140:	e008      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002142:	2304      	movs	r3, #4
 8002144:	e006      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002146:	2303      	movs	r3, #3
 8002148:	e004      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800214a:	2302      	movs	r3, #2
 800214c:	e002      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002152:	2300      	movs	r3, #0
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	f002 0203 	and.w	r2, r2, #3
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	4093      	lsls	r3, r2
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002164:	4935      	ldr	r1, [pc, #212]	@ (800223c <HAL_GPIO_Init+0x310>)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	3302      	adds	r3, #2
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002172:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <HAL_GPIO_Init+0x334>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002196:	4a32      	ldr	r2, [pc, #200]	@ (8002260 <HAL_GPIO_Init+0x334>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800219c:	4b30      	ldr	r3, [pc, #192]	@ (8002260 <HAL_GPIO_Init+0x334>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c0:	4a27      	ldr	r2, [pc, #156]	@ (8002260 <HAL_GPIO_Init+0x334>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021c6:	4b26      	ldr	r3, [pc, #152]	@ (8002260 <HAL_GPIO_Init+0x334>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002260 <HAL_GPIO_Init+0x334>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_GPIO_Init+0x334>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002214:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <HAL_GPIO_Init+0x334>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3301      	adds	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b0f      	cmp	r3, #15
 8002224:	f67f ae90 	bls.w	8001f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3724      	adds	r7, #36	@ 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	40013800 	.word	0x40013800
 8002240:	40020000 	.word	0x40020000
 8002244:	40020400 	.word	0x40020400
 8002248:	40020800 	.word	0x40020800
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40021000 	.word	0x40021000
 8002254:	40021400 	.word	0x40021400
 8002258:	40021800 	.word	0x40021800
 800225c:	40021c00 	.word	0x40021c00
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e001      	b.n	8002286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
 80022a0:	4613      	mov	r3, r2
 80022a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b0:	e003      	b.n	80022ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	619a      	str	r2, [r3, #24]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af02      	add	r7, sp, #8
 80022cc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e101      	b.n	80024dc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f009 f99c 	bl	800b630 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2203      	movs	r2, #3
 80022fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002306:	d102      	bne.n	800230e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f005 fac1 	bl	800789a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7c1a      	ldrb	r2, [r3, #16]
 8002320:	f88d 2000 	strb.w	r2, [sp]
 8002324:	3304      	adds	r3, #4
 8002326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002328:	f005 f9a0 	bl	800766c <USB_CoreInit>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2202      	movs	r2, #2
 8002336:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0ce      	b.n	80024dc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f005 fab9 	bl	80078bc <USB_SetCurrentMode>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0bf      	b.n	80024dc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e04a      	b.n	80023f8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	3315      	adds	r3, #21
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3314      	adds	r3, #20
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	b298      	uxth	r0, r3
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	332e      	adds	r3, #46	@ 0x2e
 800239e:	4602      	mov	r2, r0
 80023a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3318      	adds	r3, #24
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	331c      	adds	r3, #28
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	3320      	adds	r3, #32
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	3324      	adds	r3, #36	@ 0x24
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	3301      	adds	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	791b      	ldrb	r3, [r3, #4]
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d3af      	bcc.n	8002362 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e044      	b.n	8002492 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	3301      	adds	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	791b      	ldrb	r3, [r3, #4]
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	429a      	cmp	r2, r3
 800249a:	d3b5      	bcc.n	8002408 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7c1a      	ldrb	r2, [r3, #16]
 80024a4:	f88d 2000 	strb.w	r2, [sp]
 80024a8:	3304      	adds	r3, #4
 80024aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ac:	f005 fa52 	bl	8007954 <USB_DevInit>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00c      	b.n	80024dc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f006 fa96 	bl	8008a06 <USB_DevDisconnect>

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_PCD_Start+0x1c>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e022      	b.n	8002546 <HAL_PCD_Start+0x62>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002520:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f005 f9a3 	bl	8007878 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f006 fa44 	bl	80089c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800254e:	b590      	push	{r4, r7, lr}
 8002550:	b08d      	sub	sp, #52	@ 0x34
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f006 fb02 	bl	8008b6e <USB_GetMode>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	f040 848c 	bne.w	8002e8a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f006 fa66 	bl	8008a48 <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8482 	beq.w	8002e88 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f006 fa53 	bl	8008a48 <USB_ReadInterrupts>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d107      	bne.n	80025bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f002 0202 	and.w	r2, r2, #2
 80025ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f006 fa41 	bl	8008a48 <USB_ReadInterrupts>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d161      	bne.n	8002694 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0210 	bic.w	r2, r2, #16
 80025de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f003 020f 	and.w	r2, r3, #15
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4413      	add	r3, r2
 80025fc:	3304      	adds	r3, #4
 80025fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	0c5b      	lsrs	r3, r3, #17
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	2b02      	cmp	r3, #2
 800260a:	d124      	bne.n	8002656 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d035      	beq.n	8002684 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	6a38      	ldr	r0, [r7, #32]
 800262c:	f006 f878 	bl	8008720 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263c:	441a      	add	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800264e:	441a      	add	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	e016      	b.n	8002684 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	0c5b      	lsrs	r3, r3, #17
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	2b06      	cmp	r3, #6
 8002660:	d110      	bne.n	8002684 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002668:	2208      	movs	r2, #8
 800266a:	4619      	mov	r1, r3
 800266c:	6a38      	ldr	r0, [r7, #32]
 800266e:	f006 f857 	bl	8008720 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800267e:	441a      	add	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0210 	orr.w	r2, r2, #16
 8002692:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f006 f9d5 	bl	8008a48 <USB_ReadInterrupts>
 800269e:	4603      	mov	r3, r0
 80026a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026a8:	f040 80a7 	bne.w	80027fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f006 f9da 	bl	8008a6e <USB_ReadDevAllOutEpInterrupt>
 80026ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80026bc:	e099      	b.n	80027f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 808e 	beq.w	80027e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f006 f9fe 	bl	8008ad6 <USB_ReadDevOutEPInterrupt>
 80026da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00c      	beq.n	8002700 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f2:	461a      	mov	r2, r3
 80026f4:	2301      	movs	r3, #1
 80026f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fea2 	bl	8003444 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002716:	461a      	mov	r2, r3
 8002718:	2308      	movs	r3, #8
 800271a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800271c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 ff78 	bl	8003614 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800273a:	461a      	mov	r2, r3
 800273c:	2310      	movs	r3, #16
 800273e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d030      	beq.n	80027ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002752:	2b80      	cmp	r3, #128	@ 0x80
 8002754:	d109      	bne.n	800276a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002768:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800276a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	4413      	add	r3, r2
 800277c:	3304      	adds	r3, #4
 800277e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	78db      	ldrb	r3, [r3, #3]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d108      	bne.n	800279a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2200      	movs	r2, #0
 800278c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	b2db      	uxtb	r3, r3
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f009 f851 	bl	800b83c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a6:	461a      	mov	r2, r3
 80027a8:	2302      	movs	r3, #2
 80027aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c2:	461a      	mov	r2, r3
 80027c4:	2320      	movs	r3, #32
 80027c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027de:	461a      	mov	r2, r3
 80027e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	3301      	adds	r3, #1
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80027ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80027f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f af62 	bne.w	80026be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f006 f922 	bl	8008a48 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800280a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800280e:	f040 80db 	bne.w	80029c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f006 f943 	bl	8008aa2 <USB_ReadDevAllInEpInterrupt>
 800281c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002822:	e0cd      	b.n	80029c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80c2 	beq.w	80029b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f006 f969 	bl	8008b12 <USB_ReadDevInEPInterrupt>
 8002840:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d057      	beq.n	80028fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	2201      	movs	r2, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	43db      	mvns	r3, r3
 8002866:	69f9      	ldr	r1, [r7, #28]
 8002868:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800286c:	4013      	ands	r3, r2
 800286e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800287c:	461a      	mov	r2, r3
 800287e:	2301      	movs	r3, #1
 8002880:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	799b      	ldrb	r3, [r3, #6]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d132      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3320      	adds	r3, #32
 800289a:	6819      	ldr	r1, [r3, #0]
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4403      	add	r3, r0
 80028aa:	331c      	adds	r3, #28
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4419      	add	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4403      	add	r3, r0
 80028be:	3320      	adds	r3, #32
 80028c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d113      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x3a2>
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3324      	adds	r3, #36	@ 0x24
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d108      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028e8:	461a      	mov	r2, r3
 80028ea:	2101      	movs	r1, #1
 80028ec:	f006 f970 	bl	8008bd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f008 ff1b 	bl	800b732 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	4413      	add	r3, r2
 800290e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002912:	461a      	mov	r2, r3
 8002914:	2308      	movs	r3, #8
 8002916:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800292e:	461a      	mov	r2, r3
 8002930:	2310      	movs	r3, #16
 8002932:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800294a:	461a      	mov	r2, r3
 800294c:	2340      	movs	r3, #64	@ 0x40
 800294e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d023      	beq.n	80029a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800295a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800295c:	6a38      	ldr	r0, [r7, #32]
 800295e:	f005 f95d 	bl	8007c1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	3310      	adds	r3, #16
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	3304      	adds	r3, #4
 8002974:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f008 ff68 	bl	800b860 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800299c:	461a      	mov	r2, r3
 800299e:	2302      	movs	r3, #2
 80029a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fcbb 	bl	800332a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	3301      	adds	r3, #1
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f47f af2e 	bne.w	8002824 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f006 f83b 	bl	8008a48 <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029dc:	d122      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d108      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a04:	2100      	movs	r1, #0
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fea2 	bl	8003750 <HAL_PCDEx_LPM_Callback>
 8002a0c:	e002      	b.n	8002a14 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f008 ff06 	bl	800b820 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f006 f80d 	bl	8008a48 <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a38:	d112      	bne.n	8002a60 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f008 fec2 	bl	800b7d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002a5e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f005 ffef 	bl	8008a48 <USB_ReadInterrupts>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a74:	f040 80b7 	bne.w	8002be6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2110      	movs	r1, #16
 8002a92:	4618      	mov	r0, r3
 8002a94:	f005 f8c2 	bl	8007c1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a9c:	e046      	b.n	8002b2c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ab0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ac2:	0151      	lsls	r1, r2, #5
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	440a      	add	r2, r1
 8002ac8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002acc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ad0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ae4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002af6:	0151      	lsls	r1, r2, #5
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	440a      	add	r2, r1
 8002afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b16:	0151      	lsls	r1, r2, #5
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	440a      	add	r2, r1
 8002b1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b28:	3301      	adds	r3, #1
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	791b      	ldrb	r3, [r3, #4]
 8002b30:	461a      	mov	r2, r3
 8002b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d3b2      	bcc.n	8002a9e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b46:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002b4a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7bdb      	ldrb	r3, [r3, #15]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d016      	beq.n	8002b82 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b64:	f043 030b 	orr.w	r3, r3, #11
 8002b68:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b7a:	f043 030b 	orr.w	r3, r3, #11
 8002b7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b80:	e015      	b.n	8002bae <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b94:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b98:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ba8:	f043 030b 	orr.w	r3, r3, #11
 8002bac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bbc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002bc0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f005 fffd 	bl	8008bd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f005 ff2c 	bl	8008a48 <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bfa:	d123      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f005 ffc2 	bl	8008b8a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f005 f87f 	bl	8007d0e <USB_GetDevSpeed>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681c      	ldr	r4, [r3, #0]
 8002c1c:	f001 fa08 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8002c20:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c26:	461a      	mov	r2, r3
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f004 fd83 	bl	8007734 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f008 fda7 	bl	800b782 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f005 fefd 	bl	8008a48 <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d10a      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f008 fd84 	bl	800b766 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f002 0208 	and.w	r2, r2, #8
 8002c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f005 fee8 	bl	8008a48 <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	2b80      	cmp	r3, #128	@ 0x80
 8002c80:	d123      	bne.n	8002cca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c8e:	2301      	movs	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c92:	e014      	b.n	8002cbe <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fb08 	bl	80032c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	3301      	adds	r3, #1
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	791b      	ldrb	r3, [r3, #4]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d3e4      	bcc.n	8002c94 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f005 feba 	bl	8008a48 <USB_ReadInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cde:	d13c      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce4:	e02b      	b.n	8002d3e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3318      	adds	r3, #24
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d115      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	da12      	bge.n	8002d38 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3317      	adds	r3, #23
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	4619      	mov	r1, r3
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fac8 	bl	80032c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	791b      	ldrb	r3, [r3, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d3cd      	bcc.n	8002ce6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f005 fe72 	bl	8008a48 <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d6e:	d156      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d70:	2301      	movs	r3, #1
 8002d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d74:	e045      	b.n	8002e02 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d12e      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	da2b      	bge.n	8002dfc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002db0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d121      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10a      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002df8:	6053      	str	r3, [r2, #4]
            break;
 8002dfa:	e008      	b.n	8002e0e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	3301      	adds	r3, #1
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	791b      	ldrb	r3, [r3, #4]
 8002e06:	461a      	mov	r2, r3
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d3b3      	bcc.n	8002d76 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f005 fe10 	bl	8008a48 <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e32:	d10a      	bne.n	8002e4a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f008 fd25 	bl	800b884 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f005 fdfa 	bl	8008a48 <USB_ReadInterrupts>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d115      	bne.n	8002e8a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f008 fd15 	bl	800b8a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	e000      	b.n	8002e8a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002e88:	bf00      	nop
    }
  }
}
 8002e8a:	3734      	adds	r7, #52	@ 0x34
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}

08002e90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_PCD_SetAddress+0x1a>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e012      	b.n	8002ed0 <HAL_PCD_SetAddress+0x40>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f005 fd59 	bl	8008978 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	70fb      	strb	r3, [r7, #3]
 8002eea:	460b      	mov	r3, r1
 8002eec:	803b      	strh	r3, [r7, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ef6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da0f      	bge.n	8002f1e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	f003 020f 	and.w	r2, r3, #15
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	3310      	adds	r3, #16
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	3304      	adds	r3, #4
 8002f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	705a      	strb	r2, [r3, #1]
 8002f1c:	e00f      	b.n	8002f3e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 020f 	and.w	r2, r3, #15
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f4a:	883a      	ldrh	r2, [r7, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	78ba      	ldrb	r2, [r7, #2]
 8002f54:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f68:	78bb      	ldrb	r3, [r7, #2]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d102      	bne.n	8002f74 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_PCD_EP_Open+0xaa>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e00e      	b.n	8002fa0 <HAL_PCD_EP_Open+0xc8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68f9      	ldr	r1, [r7, #12]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f004 fee1 	bl	8007d58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da0f      	bge.n	8002fdc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3310      	adds	r3, #16
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	705a      	strb	r2, [r3, #1]
 8002fda:	e00f      	b.n	8002ffc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_PCD_EP_Close+0x6e>
 8003012:	2302      	movs	r3, #2
 8003014:	e00e      	b.n	8003034 <HAL_PCD_EP_Close+0x8c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68f9      	ldr	r1, [r7, #12]
 8003024:	4618      	mov	r0, r3
 8003026:	f004 ff1f 	bl	8007e68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	460b      	mov	r3, r1
 800304a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800304c:	7afb      	ldrb	r3, [r7, #11]
 800304e:	f003 020f 	and.w	r2, r3, #15
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4413      	add	r3, r2
 8003062:	3304      	adds	r3, #4
 8003064:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2200      	movs	r2, #0
 8003076:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	b2da      	uxtb	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	799b      	ldrb	r3, [r3, #6]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d102      	bne.n	8003098 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	799b      	ldrb	r3, [r3, #6]
 80030a0:	461a      	mov	r2, r3
 80030a2:	6979      	ldr	r1, [r7, #20]
 80030a4:	f004 ffbc 	bl	8008020 <USB_EPStartXfer>

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 020f 	and.w	r2, r3, #15
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80030d4:	681b      	ldr	r3, [r3, #0]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	460b      	mov	r3, r1
 80030f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f2:	7afb      	ldrb	r3, [r7, #11]
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3310      	adds	r3, #16
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4413      	add	r3, r2
 8003106:	3304      	adds	r3, #4
 8003108:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2200      	movs	r2, #0
 800311a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2201      	movs	r2, #1
 8003120:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003122:	7afb      	ldrb	r3, [r7, #11]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	b2da      	uxtb	r2, r3
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	799b      	ldrb	r3, [r3, #6]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d102      	bne.n	800313c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	799b      	ldrb	r3, [r3, #6]
 8003144:	461a      	mov	r2, r3
 8003146:	6979      	ldr	r1, [r7, #20]
 8003148:	f004 ff6a 	bl	8008020 <USB_EPStartXfer>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	7912      	ldrb	r2, [r2, #4]
 800316c:	4293      	cmp	r3, r2
 800316e:	d901      	bls.n	8003174 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e04f      	b.n	8003214 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003178:	2b00      	cmp	r3, #0
 800317a:	da0f      	bge.n	800319c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 020f 	and.w	r2, r3, #15
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	3310      	adds	r3, #16
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	705a      	strb	r2, [r3, #1]
 800319a:	e00d      	b.n	80031b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	3304      	adds	r3, #4
 80031b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_PCD_EP_SetStall+0x82>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e01d      	b.n	8003214 <HAL_PCD_EP_SetStall+0xbe>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f005 faf2 	bl	80087d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	7999      	ldrb	r1, [r3, #6]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003204:	461a      	mov	r2, r3
 8003206:	f005 fce3 	bl	8008bd0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	7912      	ldrb	r2, [r2, #4]
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e042      	b.n	80032c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800323a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323e:	2b00      	cmp	r3, #0
 8003240:	da0f      	bge.n	8003262 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3310      	adds	r3, #16
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	705a      	strb	r2, [r3, #1]
 8003260:	e00f      	b.n	8003282 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 020f 	and.w	r2, r3, #15
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	3304      	adds	r3, #4
 800327a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_PCD_EP_ClrStall+0x86>
 800329e:	2302      	movs	r3, #2
 80032a0:	e00e      	b.n	80032c0 <HAL_PCD_EP_ClrStall+0xa4>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f005 fafb 	bl	80088ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da0c      	bge.n	80032f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f003 020f 	and.w	r2, r3, #15
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	3310      	adds	r3, #16
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	e00c      	b.n	8003310 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 020f 	and.w	r2, r3, #15
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	3304      	adds	r3, #4
 800330e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	4618      	mov	r0, r3
 8003318:	f005 f91a 	bl	8008550 <USB_EPStopXfer>
 800331c:	4603      	mov	r3, r0
 800331e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003320:	7afb      	ldrb	r3, [r7, #11]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b08a      	sub	sp, #40	@ 0x28
 800332e:	af02      	add	r7, sp, #8
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	3310      	adds	r3, #16
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	3304      	adds	r3, #4
 8003350:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	429a      	cmp	r2, r3
 800335c:	d901      	bls.n	8003362 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06b      	b.n	800343a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	429a      	cmp	r2, r3
 8003376:	d902      	bls.n	800337e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3303      	adds	r3, #3
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003386:	e02a      	b.n	80033de <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	429a      	cmp	r2, r3
 800339c:	d902      	bls.n	80033a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	3303      	adds	r3, #3
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68d9      	ldr	r1, [r3, #12]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	4603      	mov	r3, r0
 80033c0:	6978      	ldr	r0, [r7, #20]
 80033c2:	f005 f96f 	bl	80086a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	441a      	add	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	441a      	add	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d809      	bhi.n	8003408 <PCD_WriteEmptyTxFifo+0xde>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d203      	bcs.n	8003408 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1bf      	bne.n	8003388 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	429a      	cmp	r2, r3
 8003412:	d811      	bhi.n	8003438 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	2201      	movs	r2, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	43db      	mvns	r3, r3
 800342e:	6939      	ldr	r1, [r7, #16]
 8003430:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003434:	4013      	ands	r3, r2
 8003436:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	333c      	adds	r3, #60	@ 0x3c
 800345c:	3304      	adds	r3, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	799b      	ldrb	r3, [r3, #6]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d17b      	bne.n	8003572 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4a61      	ldr	r2, [pc, #388]	@ (800360c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	f240 80b9 	bls.w	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80b3 	beq.w	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a6:	461a      	mov	r2, r3
 80034a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ac:	6093      	str	r3, [r2, #8]
 80034ae:	e0a7      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	2320      	movs	r3, #32
 80034ca:	6093      	str	r3, [r2, #8]
 80034cc:	e098      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f040 8093 	bne.w	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	4a4b      	ldr	r2, [pc, #300]	@ (800360c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d90f      	bls.n	8003502 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f8:	461a      	mov	r2, r3
 80034fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034fe:	6093      	str	r3, [r2, #8]
 8003500:	e07e      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	0159      	lsls	r1, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	440b      	add	r3, r1
 8003524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352e:	1ad2      	subs	r2, r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d114      	bne.n	8003564 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800354c:	461a      	mov	r2, r3
 800354e:	2101      	movs	r1, #1
 8003550:	f005 fb3e 	bl	8008bd0 <USB_EP0_OutStart>
 8003554:	e006      	b.n	8003564 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	441a      	add	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f008 f8c6 	bl	800b6fc <HAL_PCD_DataOutStageCallback>
 8003570:	e046      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	4a26      	ldr	r2, [pc, #152]	@ (8003610 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d124      	bne.n	80035c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	e032      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b0:	461a      	mov	r2, r3
 80035b2:	2320      	movs	r3, #32
 80035b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f008 f89d 	bl	800b6fc <HAL_PCD_DataOutStageCallback>
 80035c2:	e01d      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d114      	bne.n	80035f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035ec:	461a      	mov	r2, r3
 80035ee:	2100      	movs	r1, #0
 80035f0:	f005 faee 	bl	8008bd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	4619      	mov	r1, r3
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f008 f87e 	bl	800b6fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	4f54300a 	.word	0x4f54300a
 8003610:	4f54310a 	.word	0x4f54310a

08003614 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	333c      	adds	r3, #60	@ 0x3c
 800362c:	3304      	adds	r3, #4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a15      	ldr	r2, [pc, #84]	@ (800369c <PCD_EP_OutSetupPacket_int+0x88>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d90e      	bls.n	8003668 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003660:	461a      	mov	r2, r3
 8003662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003666:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f008 f835 	bl	800b6d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4a0a      	ldr	r2, [pc, #40]	@ (800369c <PCD_EP_OutSetupPacket_int+0x88>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d90c      	bls.n	8003690 <PCD_EP_OutSetupPacket_int+0x7c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	799b      	ldrb	r3, [r3, #6]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d108      	bne.n	8003690 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003688:	461a      	mov	r2, r3
 800368a:	2101      	movs	r1, #1
 800368c:	f005 faa0 	bl	8008bd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	4f54300a 	.word	0x4f54300a

080036a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	70fb      	strb	r3, [r7, #3]
 80036ac:	4613      	mov	r3, r2
 80036ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d107      	bne.n	80036ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036be:	883b      	ldrh	r3, [r7, #0]
 80036c0:	0419      	lsls	r1, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80036cc:	e028      	b.n	8003720 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	e00d      	b.n	80036fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	3340      	adds	r3, #64	@ 0x40
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	3301      	adds	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	3b01      	subs	r3, #1
 8003704:	429a      	cmp	r2, r3
 8003706:	d3ec      	bcc.n	80036e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003708:	883b      	ldrh	r3, [r7, #0]
 800370a:	0418      	lsls	r0, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	3b01      	subs	r3, #1
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	4302      	orrs	r2, r0
 8003718:	3340      	adds	r3, #64	@ 0x40
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e267      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d075      	beq.n	8003872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003786:	4b88      	ldr	r3, [pc, #544]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d00c      	beq.n	80037ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003792:	4b85      	ldr	r3, [pc, #532]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379a:	2b08      	cmp	r3, #8
 800379c:	d112      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379e:	4b82      	ldr	r3, [pc, #520]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037aa:	d10b      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	4b7e      	ldr	r3, [pc, #504]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d05b      	beq.n	8003870 <HAL_RCC_OscConfig+0x108>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d157      	bne.n	8003870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e242      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037cc:	d106      	bne.n	80037dc <HAL_RCC_OscConfig+0x74>
 80037ce:	4b76      	ldr	r3, [pc, #472]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a75      	ldr	r2, [pc, #468]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e01d      	b.n	8003818 <HAL_RCC_OscConfig+0xb0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x98>
 80037e6:	4b70      	ldr	r3, [pc, #448]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6f      	ldr	r2, [pc, #444]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b6d      	ldr	r3, [pc, #436]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6c      	ldr	r2, [pc, #432]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0xb0>
 8003800:	4b69      	ldr	r3, [pc, #420]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a68      	ldr	r2, [pc, #416]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b66      	ldr	r3, [pc, #408]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd ff1a 	bl	8001658 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003828:	f7fd ff16 	bl	8001658 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	@ 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e207      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b5b      	ldr	r3, [pc, #364]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0xc0>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd ff06 	bl	8001658 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003850:	f7fd ff02 	bl	8001658 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	@ 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1f3      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	4b51      	ldr	r3, [pc, #324]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0xe8>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d063      	beq.n	8003946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800387e:	4b4a      	ldr	r3, [pc, #296]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388a:	4b47      	ldr	r3, [pc, #284]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003892:	2b08      	cmp	r3, #8
 8003894:	d11c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003896:	4b44      	ldr	r3, [pc, #272]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d116      	bne.n	80038d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	4b41      	ldr	r3, [pc, #260]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_RCC_OscConfig+0x152>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d001      	beq.n	80038ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e1c7      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ba:	4b3b      	ldr	r3, [pc, #236]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4937      	ldr	r1, [pc, #220]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	e03a      	b.n	8003946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d020      	beq.n	800391a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d8:	4b34      	ldr	r3, [pc, #208]	@ (80039ac <HAL_RCC_OscConfig+0x244>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038de:	f7fd febb 	bl	8001658 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e6:	f7fd feb7 	bl	8001658 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e1a8      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f8:	4b2b      	ldr	r3, [pc, #172]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4b28      	ldr	r3, [pc, #160]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4925      	ldr	r1, [pc, #148]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003914:	4313      	orrs	r3, r2
 8003916:	600b      	str	r3, [r1, #0]
 8003918:	e015      	b.n	8003946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391a:	4b24      	ldr	r3, [pc, #144]	@ (80039ac <HAL_RCC_OscConfig+0x244>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fe9a 	bl	8001658 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003928:	f7fd fe96 	bl	8001658 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e187      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393a:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d036      	beq.n	80039c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <HAL_RCC_OscConfig+0x248>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fd fe7a 	bl	8001658 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003968:	f7fd fe76 	bl	8001658 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e167      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 800397c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x200>
 8003986:	e01b      	b.n	80039c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003988:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <HAL_RCC_OscConfig+0x248>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398e:	f7fd fe63 	bl	8001658 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	e00e      	b.n	80039b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003996:	f7fd fe5f 	bl	8001658 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d907      	bls.n	80039b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e150      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	42470000 	.word	0x42470000
 80039b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	4b88      	ldr	r3, [pc, #544]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ea      	bne.n	8003996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8097 	beq.w	8003afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d2:	4b81      	ldr	r3, [pc, #516]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	4b7d      	ldr	r3, [pc, #500]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	4a7c      	ldr	r2, [pc, #496]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ee:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fe:	4b77      	ldr	r3, [pc, #476]	@ (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d118      	bne.n	8003a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0a:	4b74      	ldr	r3, [pc, #464]	@ (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a73      	ldr	r2, [pc, #460]	@ (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a16:	f7fd fe1f 	bl	8001658 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fd fe1b 	bl	8001658 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e10c      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	4b6a      	ldr	r3, [pc, #424]	@ (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x2ea>
 8003a44:	4b64      	ldr	r3, [pc, #400]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	4a63      	ldr	r2, [pc, #396]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a50:	e01c      	b.n	8003a8c <HAL_RCC_OscConfig+0x324>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x30c>
 8003a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a60:	f043 0304 	orr.w	r3, r3, #4
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a66:	4b5c      	ldr	r3, [pc, #368]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a72:	e00b      	b.n	8003a8c <HAL_RCC_OscConfig+0x324>
 8003a74:	4b58      	ldr	r3, [pc, #352]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a78:	4a57      	ldr	r2, [pc, #348]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a80:	4b55      	ldr	r3, [pc, #340]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a84:	4a54      	ldr	r2, [pc, #336]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a86:	f023 0304 	bic.w	r3, r3, #4
 8003a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d015      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fd fde0 	bl	8001658 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fd fddc 	bl	8001658 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0cb      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	4b49      	ldr	r3, [pc, #292]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0ee      	beq.n	8003a9c <HAL_RCC_OscConfig+0x334>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fdca 	bl	8001658 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fdc6 	bl	8001658 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0b5      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1ee      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af0:	4b39      	ldr	r3, [pc, #228]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	4a38      	ldr	r2, [pc, #224]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80a1 	beq.w	8003c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b06:	4b34      	ldr	r3, [pc, #208]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d05c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d141      	bne.n	8003b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b31      	ldr	r3, [pc, #196]	@ (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fd fd9a 	bl	8001658 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd fd96 	bl	8001658 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e087      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	4b27      	ldr	r3, [pc, #156]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	491b      	ldr	r1, [pc, #108]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fd fd6f 	bl	8001658 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fd fd6b 	bl	8001658 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e05c      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x416>
 8003b9c:	e054      	b.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fd fd58 	bl	8001658 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd fd54 	bl	8001658 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e045      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x444>
 8003bca:	e03d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e038      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x4ec>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d121      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d11a      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d111      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cc      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b68      	ldr	r3, [pc, #416]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d90c      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b65      	ldr	r3, [pc, #404]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b63      	ldr	r3, [pc, #396]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b8      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cac:	4b59      	ldr	r3, [pc, #356]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a58      	ldr	r2, [pc, #352]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc4:	4b53      	ldr	r3, [pc, #332]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a52      	ldr	r2, [pc, #328]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b50      	ldr	r3, [pc, #320]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	494d      	ldr	r1, [pc, #308]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d044      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d119      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b3f      	ldr	r3, [pc, #252]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d26:	4b3b      	ldr	r3, [pc, #236]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e067      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b37      	ldr	r3, [pc, #220]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4934      	ldr	r1, [pc, #208]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fd fc86 	bl	8001658 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fd fc82 	bl	8001658 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e04f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b2b      	ldr	r3, [pc, #172]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b25      	ldr	r3, [pc, #148]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20c      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b22      	ldr	r3, [pc, #136]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b20      	ldr	r3, [pc, #128]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e032      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dac:	4b19      	ldr	r3, [pc, #100]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4916      	ldr	r1, [pc, #88]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dca:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	490e      	ldr	r1, [pc, #56]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dde:	f000 f821 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	490a      	ldr	r1, [pc, #40]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	5ccb      	ldrb	r3, [r1, r3]
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a09      	ldr	r2, [pc, #36]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dfa:	4b09      	ldr	r3, [pc, #36]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd fbe6 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023c00 	.word	0x40023c00
 8003e14:	40023800 	.word	0x40023800
 8003e18:	0800c620 	.word	0x0800c620
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	20000004 	.word	0x20000004

08003e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e28:	b094      	sub	sp, #80	@ 0x50
 8003e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e30:	2300      	movs	r3, #0
 8003e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e34:	2300      	movs	r3, #0
 8003e36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e3c:	4b79      	ldr	r3, [pc, #484]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d00d      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x40>
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	f200 80e1 	bhi.w	8004010 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x34>
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e56:	e0db      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e58:	4b73      	ldr	r3, [pc, #460]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003e5c:	e0db      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5e:	4b73      	ldr	r3, [pc, #460]	@ (800402c <HAL_RCC_GetSysClockFreq+0x208>)
 8003e60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e62:	e0d8      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e64:	4b6f      	ldr	r3, [pc, #444]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d063      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	099b      	lsrs	r3, r3, #6
 8003e80:	2200      	movs	r2, #0
 8003e82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8e:	2300      	movs	r3, #0
 8003e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e96:	4622      	mov	r2, r4
 8003e98:	462b      	mov	r3, r5
 8003e9a:	f04f 0000 	mov.w	r0, #0
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	0159      	lsls	r1, r3, #5
 8003ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea8:	0150      	lsls	r0, r2, #5
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4621      	mov	r1, r4
 8003eb0:	1a51      	subs	r1, r2, r1
 8003eb2:	6139      	str	r1, [r7, #16]
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec8:	4659      	mov	r1, fp
 8003eca:	018b      	lsls	r3, r1, #6
 8003ecc:	4651      	mov	r1, sl
 8003ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ed2:	4651      	mov	r1, sl
 8003ed4:	018a      	lsls	r2, r1, #6
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	ebb2 0801 	subs.w	r8, r2, r1
 8003edc:	4659      	mov	r1, fp
 8003ede:	eb63 0901 	sbc.w	r9, r3, r1
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ef6:	4690      	mov	r8, r2
 8003ef8:	4699      	mov	r9, r3
 8003efa:	4623      	mov	r3, r4
 8003efc:	eb18 0303 	adds.w	r3, r8, r3
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	462b      	mov	r3, r5
 8003f04:	eb49 0303 	adc.w	r3, r9, r3
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f16:	4629      	mov	r1, r5
 8003f18:	024b      	lsls	r3, r1, #9
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f20:	4621      	mov	r1, r4
 8003f22:	024a      	lsls	r2, r1, #9
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f34:	f7fc f948 	bl	80001c8 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f40:	e058      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b38      	ldr	r3, [pc, #224]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	464b      	mov	r3, r9
 8003f60:	f04f 0000 	mov.w	r0, #0
 8003f64:	f04f 0100 	mov.w	r1, #0
 8003f68:	0159      	lsls	r1, r3, #5
 8003f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f6e:	0150      	lsls	r0, r2, #5
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4641      	mov	r1, r8
 8003f76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f94:	ebb2 040a 	subs.w	r4, r2, sl
 8003f98:	eb63 050b 	sbc.w	r5, r3, fp
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	00eb      	lsls	r3, r5, #3
 8003fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003faa:	00e2      	lsls	r2, r4, #3
 8003fac:	4614      	mov	r4, r2
 8003fae:	461d      	mov	r5, r3
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	18e3      	adds	r3, r4, r3
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	eb45 0303 	adc.w	r3, r5, r3
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fca:	4629      	mov	r1, r5
 8003fcc:	028b      	lsls	r3, r1, #10
 8003fce:	4621      	mov	r1, r4
 8003fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	028a      	lsls	r2, r1, #10
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	61fa      	str	r2, [r7, #28]
 8003fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe8:	f7fc f8ee 	bl	80001c8 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	3301      	adds	r3, #1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004004:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800400e:	e002      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x204>)
 8004012:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004018:	4618      	mov	r0, r3
 800401a:	3750      	adds	r7, #80	@ 0x50
 800401c:	46bd      	mov	sp, r7
 800401e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800
 8004028:	00f42400 	.word	0x00f42400
 800402c:	007a1200 	.word	0x007a1200

08004030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004034:	4b03      	ldr	r3, [pc, #12]	@ (8004044 <HAL_RCC_GetHCLKFreq+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000000 	.word	0x20000000

08004048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800404c:	f7ff fff0 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	0a9b      	lsrs	r3, r3, #10
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	4903      	ldr	r1, [pc, #12]	@ (800406c <HAL_RCC_GetPCLK1Freq+0x24>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	0800c630 	.word	0x0800c630

08004070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004074:	f7ff ffdc 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0b5b      	lsrs	r3, r3, #13
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4903      	ldr	r1, [pc, #12]	@ (8004094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40023800 	.word	0x40023800
 8004094:	0800c630 	.word	0x0800c630

08004098 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d035      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040c0:	4b62      	ldr	r3, [pc, #392]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040c6:	f7fd fac7 	bl	8001658 <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ce:	f7fd fac3 	bl	8001658 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0b0      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040e0:	4b5b      	ldr	r3, [pc, #364]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	019a      	lsls	r2, r3, #6
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	071b      	lsls	r3, r3, #28
 80040f8:	4955      	ldr	r1, [pc, #340]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004100:	4b52      	ldr	r3, [pc, #328]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004106:	f7fd faa7 	bl	8001658 <HAL_GetTick>
 800410a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800410c:	e008      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800410e:	f7fd faa3 	bl	8001658 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e090      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004120:	4b4b      	ldr	r3, [pc, #300]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8083 	beq.w	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	4b44      	ldr	r3, [pc, #272]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	4a43      	ldr	r2, [pc, #268]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	@ 0x40
 800414a:	4b41      	ldr	r3, [pc, #260]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004156:	4b3f      	ldr	r3, [pc, #252]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a3e      	ldr	r2, [pc, #248]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004160:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004162:	f7fd fa79 	bl	8001658 <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800416a:	f7fd fa75 	bl	8001658 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e062      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800417c:	4b35      	ldr	r3, [pc, #212]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004188:	4b31      	ldr	r3, [pc, #196]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004190:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02f      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d028      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041b0:	4b29      	ldr	r3, [pc, #164]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041b6:	4b28      	ldr	r3, [pc, #160]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041bc:	4a24      	ldr	r2, [pc, #144]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041c2:	4b23      	ldr	r3, [pc, #140]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d114      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fd fa43 	bl	8001658 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d4:	e00a      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7fd fa3f 	bl	8001658 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d901      	bls.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e02a      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ec:	4b18      	ldr	r3, [pc, #96]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ee      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004204:	d10d      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004206:	4b12      	ldr	r3, [pc, #72]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800421a:	490d      	ldr	r1, [pc, #52]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]
 8004220:	e005      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004222:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004228:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800422c:	6093      	str	r3, [r2, #8]
 800422e:	4b08      	ldr	r3, [pc, #32]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004230:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423a:	4905      	ldr	r1, [pc, #20]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800423c:	4313      	orrs	r3, r2
 800423e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	42470068 	.word	0x42470068
 8004250:	40023800 	.word	0x40023800
 8004254:	40007000 	.word	0x40007000
 8004258:	42470e40 	.word	0x42470e40

0800425c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e073      	b.n	800435a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	7f5b      	ldrb	r3, [r3, #29]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc fe5e 	bl	8000f44 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b10      	cmp	r3, #16
 800429a:	d055      	beq.n	8004348 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	22ca      	movs	r2, #202	@ 0xca
 80042a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2253      	movs	r2, #83	@ 0x53
 80042aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fb31 	bl	8004914 <RTC_EnterInitMode>
 80042b2:	4603      	mov	r3, r0
 80042b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d12c      	bne.n	8004316 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80042ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6899      	ldr	r1, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	68d2      	ldr	r2, [r2, #12]
 80042f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6919      	ldr	r1, [r3, #16]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	041a      	lsls	r2, r3, #16
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fb38 	bl	8004982 <RTC_ExitInitMode>
 8004312:	4603      	mov	r3, r0
 8004314:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d110      	bne.n	800433e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800432a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	22ff      	movs	r2, #255	@ 0xff
 8004344:	625a      	str	r2, [r3, #36]	@ 0x24
 8004346:	e001      	b.n	800434c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004362:	b590      	push	{r4, r7, lr}
 8004364:	b087      	sub	sp, #28
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	7f1b      	ldrb	r3, [r3, #28]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_RTC_SetTime+0x1c>
 800437a:	2302      	movs	r3, #2
 800437c:	e087      	b.n	800448e <HAL_RTC_SetTime+0x12c>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2202      	movs	r2, #2
 8004388:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d126      	bne.n	80043de <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2200      	movs	r2, #0
 80043a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fb0f 	bl	80049cc <RTC_ByteToBcd2>
 80043ae:	4603      	mov	r3, r0
 80043b0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	785b      	ldrb	r3, [r3, #1]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fb08 	bl	80049cc <RTC_ByteToBcd2>
 80043bc:	4603      	mov	r3, r0
 80043be:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043c0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	789b      	ldrb	r3, [r3, #2]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fb00 	bl	80049cc <RTC_ByteToBcd2>
 80043cc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043ce:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	78db      	ldrb	r3, [r3, #3]
 80043d6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e018      	b.n	8004410 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2200      	movs	r2, #0
 80043f0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80043fe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004404:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	78db      	ldrb	r3, [r3, #3]
 800440a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	22ca      	movs	r2, #202	@ 0xca
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2253      	movs	r2, #83	@ 0x53
 800441e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fa77 	bl	8004914 <RTC_EnterInitMode>
 8004426:	4603      	mov	r3, r0
 8004428:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d120      	bne.n	8004472 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800443a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800443e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800444e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6899      	ldr	r1, [r3, #8]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	431a      	orrs	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fa8a 	bl	8004982 <RTC_ExitInitMode>
 800446e:	4603      	mov	r3, r0
 8004470:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	22ff      	movs	r2, #255	@ 0xff
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	771a      	strb	r2, [r3, #28]

  return status;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
}
 800448e:	4618      	mov	r0, r3
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd90      	pop	{r4, r7, pc}

08004496 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004496:	b590      	push	{r4, r7, lr}
 8004498:	b087      	sub	sp, #28
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	7f1b      	ldrb	r3, [r3, #28]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_RTC_SetDate+0x1c>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e071      	b.n	8004596 <HAL_RTC_SetDate+0x100>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2202      	movs	r2, #2
 80044bc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10e      	bne.n	80044e2 <HAL_RTC_SetDate+0x4c>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	785b      	ldrb	r3, [r3, #1]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	f023 0310 	bic.w	r3, r3, #16
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	330a      	adds	r3, #10
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11c      	bne.n	8004522 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	78db      	ldrb	r3, [r3, #3]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fa6d 	bl	80049cc <RTC_ByteToBcd2>
 80044f2:	4603      	mov	r3, r0
 80044f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fa66 	bl	80049cc <RTC_ByteToBcd2>
 8004500:	4603      	mov	r3, r0
 8004502:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004504:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	789b      	ldrb	r3, [r3, #2]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fa5e 	bl	80049cc <RTC_ByteToBcd2>
 8004510:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004512:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e00e      	b.n	8004540 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	78db      	ldrb	r3, [r3, #3]
 8004526:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800452e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004534:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	22ca      	movs	r2, #202	@ 0xca
 8004546:	625a      	str	r2, [r3, #36]	@ 0x24
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2253      	movs	r2, #83	@ 0x53
 800454e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f9df 	bl	8004914 <RTC_EnterInitMode>
 8004556:	4603      	mov	r3, r0
 8004558:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10c      	bne.n	800457a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800456a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800456e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fa06 	bl	8004982 <RTC_ExitInitMode>
 8004576:	4603      	mov	r3, r0
 8004578:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	22ff      	movs	r2, #255	@ 0xff
 800458c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]

  return status;
 8004594:	7cfb      	ldrb	r3, [r7, #19]
}
 8004596:	4618      	mov	r0, r3
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd90      	pop	{r4, r7, pc}
	...

080045a0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b089      	sub	sp, #36	@ 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80045ac:	4b9b      	ldr	r3, [pc, #620]	@ (800481c <HAL_RTC_SetAlarm_IT+0x27c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a9b      	ldr	r2, [pc, #620]	@ (8004820 <HAL_RTC_SetAlarm_IT+0x280>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	0adb      	lsrs	r3, r3, #11
 80045b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045bc:	fb02 f303 	mul.w	r3, r2, r3
 80045c0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	7f1b      	ldrb	r3, [r3, #28]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_RTC_SetAlarm_IT+0x36>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e11e      	b.n	8004814 <HAL_RTC_SetAlarm_IT+0x274>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2202      	movs	r2, #2
 80045e0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d137      	bne.n	8004658 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2200      	movs	r2, #0
 80045fa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 f9e3 	bl	80049cc <RTC_ByteToBcd2>
 8004606:	4603      	mov	r3, r0
 8004608:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f9dc 	bl	80049cc <RTC_ByteToBcd2>
 8004614:	4603      	mov	r3, r0
 8004616:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004618:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	789b      	ldrb	r3, [r3, #2]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f9d4 	bl	80049cc <RTC_ByteToBcd2>
 8004624:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004626:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	78db      	ldrb	r3, [r3, #3]
 800462e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004630:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f893 3020 	ldrb.w	r3, [r3, #32]
 800463a:	4618      	mov	r0, r3
 800463c:	f000 f9c6 	bl	80049cc <RTC_ByteToBcd2>
 8004640:	4603      	mov	r3, r0
 8004642:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004644:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800464c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004652:	4313      	orrs	r3, r2
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	e023      	b.n	80046a0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2200      	movs	r2, #0
 800466a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004678:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800467e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	78db      	ldrb	r3, [r3, #3]
 8004684:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004686:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800468e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004690:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004696:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800469c:	4313      	orrs	r3, r2
 800469e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	22ca      	movs	r2, #202	@ 0xca
 80046b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2253      	movs	r2, #83	@ 0x53
 80046ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c4:	d142      	bne.n	800474c <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046d4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80046e6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	22ff      	movs	r2, #255	@ 0xff
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2203      	movs	r2, #3
 8004700:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e083      	b.n	8004814 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0e6      	beq.n	80046e8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004738:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004748:	609a      	str	r2, [r3, #8]
 800474a:	e04c      	b.n	80047e6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800475a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800476c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800476e:	4b2b      	ldr	r3, [pc, #172]	@ (800481c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2b      	ldr	r2, [pc, #172]	@ (8004820 <HAL_RTC_SetAlarm_IT+0x280>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	0adb      	lsrs	r3, r3, #11
 800477a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	3b01      	subs	r3, #1
 8004788:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10b      	bne.n	80047a8 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	22ff      	movs	r2, #255	@ 0xff
 8004796:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2203      	movs	r2, #3
 800479c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e035      	b.n	8004814 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0e6      	beq.n	8004784 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047e4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80047e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <HAL_RTC_SetAlarm_IT+0x284>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004824 <HAL_RTC_SetAlarm_IT+0x284>)
 80047ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80047f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <HAL_RTC_SetAlarm_IT+0x284>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	4a0b      	ldr	r2, [pc, #44]	@ (8004824 <HAL_RTC_SetAlarm_IT+0x284>)
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047fc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	22ff      	movs	r2, #255	@ 0xff
 8004804:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3724      	adds	r7, #36	@ 0x24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd90      	pop	{r4, r7, pc}
 800481c:	20000000 	.word	0x20000000
 8004820:	10624dd3 	.word	0x10624dd3
 8004824:	40013c00 	.word	0x40013c00

08004828 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004830:	4b1f      	ldr	r3, [pc, #124]	@ (80048b0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004832:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004836:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d012      	beq.n	800486c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004864:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f824 	bl	80048b4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d012      	beq.n	80048a0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004898:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8b4 	bl	8004a08 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	775a      	strb	r2, [r3, #29]
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40013c00 	.word	0x40013c00

080048b4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004910 <HAL_RTC_WaitForSynchro+0x48>)
 80048da:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048dc:	f7fc febc 	bl	8001658 <HAL_GetTick>
 80048e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048e2:	e009      	b.n	80048f8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048e4:	f7fc feb8 	bl	8001658 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048f2:	d901      	bls.n	80048f8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e007      	b.n	8004908 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0ee      	beq.n	80048e4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	00017f5f 	.word	0x00017f5f

08004914 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d122      	bne.n	8004978 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004940:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004942:	f7fc fe89 	bl	8001658 <HAL_GetTick>
 8004946:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004948:	e00c      	b.n	8004964 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800494a:	f7fc fe85 	bl	8001658 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004958:	d904      	bls.n	8004964 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2204      	movs	r2, #4
 800495e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <RTC_EnterInitMode+0x64>
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d1e8      	bne.n	800494a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800499c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff ff8b 	bl	80048c8 <HAL_RTC_WaitForSynchro>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2204      	movs	r2, #4
 80049bc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80049da:	e005      	b.n	80049e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	3b0a      	subs	r3, #10
 80049e6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	2b09      	cmp	r3, #9
 80049ec:	d8f6      	bhi.n	80049dc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	b2db      	uxtb	r3, r3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e022      	b.n	8004a74 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fc fab1 	bl	8000fa8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2203      	movs	r2, #3
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f814 	bl	8004a7c <HAL_SD_InitCard>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e00a      	b.n	8004a74 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004a7c:	b5b0      	push	{r4, r5, r7, lr}
 8004a7e:	b08e      	sub	sp, #56	@ 0x38
 8004a80:	af04      	add	r7, sp, #16
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004a98:	2376      	movs	r3, #118	@ 0x76
 8004a9a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681d      	ldr	r5, [r3, #0]
 8004aa0:	466c      	mov	r4, sp
 8004aa2:	f107 0314 	add.w	r3, r7, #20
 8004aa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004aaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004aae:	f107 0308 	add.w	r3, r7, #8
 8004ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f002 f865 	bl	8006b84 <SDIO_Init>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e04f      	b.n	8004b6c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004acc:	4b29      	ldr	r3, [pc, #164]	@ (8004b74 <HAL_SD_InitCard+0xf8>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f002 f89d 	bl	8006c16 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004adc:	4b25      	ldr	r3, [pc, #148]	@ (8004b74 <HAL_SD_InitCard+0xf8>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004ae2:	2002      	movs	r0, #2
 8004ae4:	f7fc fdc4 	bl	8001670 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f001 f911 	bl	8005d10 <SD_PowerON>
 8004aee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e02e      	b.n	8004b6c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f001 f830 	bl	8005b74 <SD_InitCard>
 8004b14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00b      	beq.n	8004b34 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e01b      	b.n	8004b6c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f002 f8fc 	bl	8006d3a <SDMMC_CmdBlockLength>
 8004b42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00f      	beq.n	8004b6a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b78 <HAL_SD_InitCard+0xfc>)
 8004b50:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3728      	adds	r7, #40	@ 0x28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bdb0      	pop	{r4, r5, r7, pc}
 8004b74:	422580a0 	.word	0x422580a0
 8004b78:	004005ff 	.word	0x004005ff

08004b7c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b092      	sub	sp, #72	@ 0x48
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004b8a:	f7fc fd65 	bl	8001658 <HAL_GetTick>
 8004b8e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d107      	bne.n	8004bae <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e1c5      	b.n	8004f3a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	f040 81b8 	bne.w	8004f2c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004bc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	441a      	add	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d907      	bls.n	8004be0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e1ac      	b.n	8004f3a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2203      	movs	r2, #3
 8004be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2200      	movs	r2, #0
 8004bee:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d002      	beq.n	8004bfe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfa:	025b      	lsls	r3, r3, #9
 8004bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004c02:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	025b      	lsls	r3, r3, #9
 8004c08:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004c0a:	2390      	movs	r3, #144	@ 0x90
 8004c0c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f107 0214 	add.w	r2, r7, #20
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f002 f85c 	bl	8006ce2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d90a      	bls.n	8004c46 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2202      	movs	r2, #2
 8004c34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f002 f8c0 	bl	8006dc2 <SDMMC_CmdReadMultiBlock>
 8004c42:	6478      	str	r0, [r7, #68]	@ 0x44
 8004c44:	e009      	b.n	8004c5a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c52:	4618      	mov	r0, r3
 8004c54:	f002 f893 	bl	8006d7e <SDMMC_CmdReadSingleBlock>
 8004c58:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d012      	beq.n	8004c86 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a7e      	ldr	r2, [pc, #504]	@ (8004e60 <HAL_SD_ReadBlocks+0x2e4>)
 8004c66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e159      	b.n	8004f3a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004c8a:	e061      	b.n	8004d50 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d03c      	beq.n	8004d14 <HAL_SD_ReadBlocks+0x198>
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d039      	beq.n	8004d14 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ca4:	e033      	b.n	8004d0e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f001 ff95 	bl	8006bda <SDIO_ReadFIFO>
 8004cb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc8:	0a1b      	lsrs	r3, r3, #8
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cde:	0c1b      	lsrs	r3, r3, #16
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce8:	3301      	adds	r3, #1
 8004cea:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf4:	0e1b      	lsrs	r3, r3, #24
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cfa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cfe:	3301      	adds	r3, #1
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d04:	3b01      	subs	r3, #1
 8004d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d10:	2b07      	cmp	r3, #7
 8004d12:	d9c8      	bls.n	8004ca6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004d14:	f7fc fca0 	bl	8001658 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d902      	bls.n	8004d2a <HAL_SD_ReadBlocks+0x1ae>
 8004d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d112      	bne.n	8004d50 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a4c      	ldr	r2, [pc, #304]	@ (8004e60 <HAL_SD_ReadBlocks+0x2e4>)
 8004d30:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0f4      	b.n	8004f3a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d56:	f240 332a 	movw	r3, #810	@ 0x32a
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d095      	beq.n	8004c8c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d022      	beq.n	8004db4 <HAL_SD_ReadBlocks+0x238>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d91f      	bls.n	8004db4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d01b      	beq.n	8004db4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f002 f885 	bl	8006e90 <SDMMC_CmdStopTransfer>
 8004d86:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d012      	beq.n	8004db4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a33      	ldr	r2, [pc, #204]	@ (8004e60 <HAL_SD_ReadBlocks+0x2e4>)
 8004d94:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0c2      	b.n	8004f3a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_SD_ReadBlocks+0x254>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a22      	ldr	r2, [pc, #136]	@ (8004e60 <HAL_SD_ReadBlocks+0x2e4>)
 8004dd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	f043 0208 	orr.w	r2, r3, #8
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0a1      	b.n	8004f3a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d012      	beq.n	8004e2a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <HAL_SD_ReadBlocks+0x2e4>)
 8004e0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e10:	f043 0202 	orr.w	r2, r3, #2
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e087      	b.n	8004f3a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d064      	beq.n	8004f02 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a08      	ldr	r2, [pc, #32]	@ (8004e60 <HAL_SD_ReadBlocks+0x2e4>)
 8004e3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e06d      	b.n	8004f3a <HAL_SD_ReadBlocks+0x3be>
 8004e5e:	bf00      	nop
 8004e60:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f001 feb6 	bl	8006bda <SDIO_ReadFIFO>
 8004e6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e76:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e80:	3b01      	subs	r3, #1
 8004e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e90:	3301      	adds	r3, #1
 8004e92:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e96:	3b01      	subs	r3, #1
 8004e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eac:	3b01      	subs	r3, #1
 8004eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb2:	0e1b      	lsrs	r3, r3, #24
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004ec6:	f7fc fbc7 	bl	8001658 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d902      	bls.n	8004edc <HAL_SD_ReadBlocks+0x360>
 8004ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d112      	bne.n	8004f02 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a18      	ldr	r2, [pc, #96]	@ (8004f44 <HAL_SD_ReadBlocks+0x3c8>)
 8004ee2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e01b      	b.n	8004f3a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_SD_ReadBlocks+0x39a>
 8004f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1a6      	bne.n	8004e64 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004f1e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e006      	b.n	8004f3a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3748      	adds	r7, #72	@ 0x48
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	004005ff 	.word	0x004005ff

08004f48 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b092      	sub	sp, #72	@ 0x48
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004f56:	f7fc fb7f 	bl	8001658 <HAL_GetTick>
 8004f5a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d107      	bne.n	8004f7a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e16d      	b.n	8005256 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	f040 8160 	bne.w	8005248 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	441a      	add	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d907      	bls.n	8004fac <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e154      	b.n	8005256 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2203      	movs	r2, #3
 8004fb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d002      	beq.n	8004fca <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc6:	025b      	lsls	r3, r3, #9
 8004fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295
 8004fce:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	025b      	lsls	r3, r3, #9
 8004fd4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004fd6:	2390      	movs	r3, #144	@ 0x90
 8004fd8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f107 0218 	add.w	r2, r7, #24
 8004fee:	4611      	mov	r1, r2
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f001 fe76 	bl	8006ce2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d90a      	bls.n	8005012 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005008:	4618      	mov	r0, r3
 800500a:	f001 ff1e 	bl	8006e4a <SDMMC_CmdWriteMultiBlock>
 800500e:	6478      	str	r0, [r7, #68]	@ 0x44
 8005010:	e009      	b.n	8005026 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2210      	movs	r2, #16
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800501e:	4618      	mov	r0, r3
 8005020:	f001 fef1 	bl	8006e06 <SDMMC_CmdWriteSingleBlock>
 8005024:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005028:	2b00      	cmp	r3, #0
 800502a:	d012      	beq.n	8005052 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a8b      	ldr	r2, [pc, #556]	@ (8005260 <HAL_SD_WriteBlocks+0x318>)
 8005032:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800503a:	431a      	orrs	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e101      	b.n	8005256 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005056:	e065      	b.n	8005124 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d040      	beq.n	80050e8 <HAL_SD_WriteBlocks+0x1a0>
 8005066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005068:	2b00      	cmp	r3, #0
 800506a:	d03d      	beq.n	80050e8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800506c:	2300      	movs	r3, #0
 800506e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005070:	e037      	b.n	80050e2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507a:	3301      	adds	r3, #1
 800507c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800507e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005080:	3b01      	subs	r3, #1
 8005082:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	021a      	lsls	r2, r3, #8
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005092:	3301      	adds	r3, #1
 8005094:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005098:	3b01      	subs	r3, #1
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800509c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	041a      	lsls	r2, r3, #16
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80050a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050aa:	3301      	adds	r3, #1
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80050ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b0:	3b01      	subs	r3, #1
 80050b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80050b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	061a      	lsls	r2, r3, #24
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80050c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c2:	3301      	adds	r3, #1
 80050c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80050c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c8:	3b01      	subs	r3, #1
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f107 0214 	add.w	r2, r7, #20
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f001 fd8c 	bl	8006bf4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80050dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050de:	3301      	adds	r3, #1
 80050e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e4:	2b07      	cmp	r3, #7
 80050e6:	d9c4      	bls.n	8005072 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80050e8:	f7fc fab6 	bl	8001658 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d902      	bls.n	80050fe <HAL_SD_WriteBlocks+0x1b6>
 80050f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d112      	bne.n	8005124 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a57      	ldr	r2, [pc, #348]	@ (8005260 <HAL_SD_WriteBlocks+0x318>)
 8005104:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800510a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800510c:	431a      	orrs	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e098      	b.n	8005256 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800512a:	f240 331a 	movw	r3, #794	@ 0x31a
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d091      	beq.n	8005058 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d022      	beq.n	8005188 <HAL_SD_WriteBlocks+0x240>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d91f      	bls.n	8005188 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514c:	2b03      	cmp	r3, #3
 800514e:	d01b      	beq.n	8005188 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f001 fe9b 	bl	8006e90 <SDMMC_CmdStopTransfer>
 800515a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800515c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800515e:	2b00      	cmp	r3, #0
 8005160:	d012      	beq.n	8005188 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a3e      	ldr	r2, [pc, #248]	@ (8005260 <HAL_SD_WriteBlocks+0x318>)
 8005168:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800516e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e066      	b.n	8005256 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_SD_WriteBlocks+0x25c>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d012      	beq.n	80051ca <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005260 <HAL_SD_WriteBlocks+0x318>)
 80051aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b0:	f043 0208 	orr.w	r2, r3, #8
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e045      	b.n	8005256 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d012      	beq.n	80051fe <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a20      	ldr	r2, [pc, #128]	@ (8005260 <HAL_SD_WriteBlocks+0x318>)
 80051de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e4:	f043 0202 	orr.w	r2, r3, #2
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e02b      	b.n	8005256 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	d012      	beq.n	8005232 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a13      	ldr	r2, [pc, #76]	@ (8005260 <HAL_SD_WriteBlocks+0x318>)
 8005212:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005218:	f043 0210 	orr.w	r2, r3, #16
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e011      	b.n	8005256 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f240 523a 	movw	r2, #1338	@ 0x53a
 800523a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e006      	b.n	8005256 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
  }
}
 8005256:	4618      	mov	r0, r3
 8005258:	3748      	adds	r7, #72	@ 0x48
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	004005ff 	.word	0x004005ff

08005264 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005270:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_SD_IRQHandler+0x2e>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 ff66 	bl	800615c <SD_Read_IT>
 8005290:	e165      	b.n	800555e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 808f 	beq.w	80053c0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052aa:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80052ba:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80052be:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d039      	beq.n	800534e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_SD_IRQHandler+0x8a>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d011      	beq.n	8005312 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f001 fdcc 	bl	8006e90 <SDMMC_CmdStopTransfer>
 80052f8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f92f 	bl	8005570 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f240 523a 	movw	r2, #1338	@ 0x53a
 800531a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_SD_IRQHandler+0xda>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f003 fd7c 	bl	8008e3c <HAL_SD_RxCpltCallback>
 8005344:	e10b      	b.n	800555e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f003 fd6e 	bl	8008e28 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800534c:	e107      	b.n	800555e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8102 	beq.w	800555e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d011      	beq.n	8005388 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f001 fd91 	bl	8006e90 <SDMMC_CmdStopTransfer>
 800536e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d008      	beq.n	8005388 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f8f4 	bl	8005570 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	f040 80e5 	bne.w	800555e <HAL_SD_IRQHandler+0x2fa>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	f040 80df 	bne.w	800555e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0208 	bic.w	r2, r2, #8
 80053ae:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f003 fd35 	bl	8008e28 <HAL_SD_TxCpltCallback>
}
 80053be:	e0ce      	b.n	800555e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_SD_IRQHandler+0x17c>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 ff10 	bl	80061fe <SD_Write_IT>
 80053de:	e0be      	b.n	800555e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053e6:	f240 233a 	movw	r3, #570	@ 0x23a
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80b6 	beq.w	800555e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005404:	f043 0202 	orr.w	r2, r3, #2
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541e:	f043 0208 	orr.w	r2, r3, #8
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d005      	beq.n	800545a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005452:	f043 0210 	orr.w	r2, r3, #16
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546c:	f043 0208 	orr.w	r2, r3, #8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f240 723a 	movw	r2, #1850	@ 0x73a
 800547c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 800548c:	f023 0302 	bic.w	r3, r3, #2
 8005490:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f001 fcfa 	bl	8006e90 <SDMMC_CmdStopTransfer>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f855 	bl	8005570 <HAL_SD_ErrorCallback>
}
 80054c6:	e04a      	b.n	800555e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d045      	beq.n	800555e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <HAL_SD_IRQHandler+0x282>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d011      	beq.n	800550a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005568 <HAL_SD_IRQHandler+0x304>)
 80054ec:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fc fabc 	bl	8001a70 <HAL_DMA_Abort_IT>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d02f      	beq.n	800555e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fac8 	bl	8005a98 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005508:	e029      	b.n	800555e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <HAL_SD_IRQHandler+0x2ba>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d011      	beq.n	8005542 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	4a12      	ldr	r2, [pc, #72]	@ (800556c <HAL_SD_IRQHandler+0x308>)
 8005524:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	4618      	mov	r0, r3
 800552c:	f7fc faa0 	bl	8001a70 <HAL_DMA_Abort_IT>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d013      	beq.n	800555e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fae3 	bl	8005b06 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005540:	e00d      	b.n	800555e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f003 fc5c 	bl	8008e14 <HAL_SD_AbortCallback>
}
 800555c:	e7ff      	b.n	800555e <HAL_SD_IRQHandler+0x2fa>
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	08005a99 	.word	0x08005a99
 800556c:	08005b07 	.word	0x08005b07

08005570 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005592:	0f9b      	lsrs	r3, r3, #30
 8005594:	b2da      	uxtb	r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800559e:	0e9b      	lsrs	r3, r3, #26
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055b0:	0e1b      	lsrs	r3, r3, #24
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055e4:	0d1b      	lsrs	r3, r3, #20
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005602:	0bdb      	lsrs	r3, r3, #15
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	b2da      	uxtb	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005614:	0b9b      	lsrs	r3, r3, #14
 8005616:	b2db      	uxtb	r3, r3
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	b2da      	uxtb	r2, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005626:	0b5b      	lsrs	r3, r3, #13
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	b2da      	uxtb	r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005638:	0b1b      	lsrs	r3, r3, #12
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	b2da      	uxtb	r2, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2200      	movs	r2, #0
 800564a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005650:	2b00      	cmp	r3, #0
 8005652:	d163      	bne.n	800571c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005658:	009a      	lsls	r2, r3, #2
 800565a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800565e:	4013      	ands	r3, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005664:	0f92      	lsrs	r2, r2, #30
 8005666:	431a      	orrs	r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005670:	0edb      	lsrs	r3, r3, #27
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	b2da      	uxtb	r2, r3
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005682:	0e1b      	lsrs	r3, r3, #24
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	b2da      	uxtb	r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005694:	0d5b      	lsrs	r3, r3, #21
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	b2da      	uxtb	r2, r3
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056a6:	0c9b      	lsrs	r3, r3, #18
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b8:	0bdb      	lsrs	r3, r3, #15
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	7e1b      	ldrb	r3, [r3, #24]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	3302      	adds	r3, #2
 80056dc:	2201      	movs	r2, #1
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80056e6:	fb03 f202 	mul.w	r2, r3, r2
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	7a1b      	ldrb	r3, [r3, #8]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	2201      	movs	r2, #1
 80056fa:	409a      	lsls	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005708:	0a52      	lsrs	r2, r2, #9
 800570a:	fb03 f202 	mul.w	r2, r3, r2
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005718:	661a      	str	r2, [r3, #96]	@ 0x60
 800571a:	e031      	b.n	8005780 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005720:	2b01      	cmp	r3, #1
 8005722:	d11d      	bne.n	8005760 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005732:	0c1b      	lsrs	r3, r3, #16
 8005734:	431a      	orrs	r2, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	3301      	adds	r3, #1
 8005740:	029a      	lsls	r2, r3, #10
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005754:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	661a      	str	r2, [r3, #96]	@ 0x60
 800575e:	e00f      	b.n	8005780 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a58      	ldr	r2, [pc, #352]	@ (80058c8 <HAL_SD_GetCardCSD+0x344>)
 8005766:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e09d      	b.n	80058bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005784:	0b9b      	lsrs	r3, r3, #14
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	b2da      	uxtb	r2, r3
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005796:	09db      	lsrs	r3, r3, #7
 8005798:	b2db      	uxtb	r3, r3
 800579a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b8:	0fdb      	lsrs	r3, r3, #31
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c4:	0f5b      	lsrs	r3, r3, #29
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d6:	0e9b      	lsrs	r3, r3, #26
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e8:	0d9b      	lsrs	r3, r3, #22
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fa:	0d5b      	lsrs	r3, r3, #21
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	b2da      	uxtb	r2, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005816:	0c1b      	lsrs	r3, r3, #16
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	b2da      	uxtb	r2, r3
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800582a:	0bdb      	lsrs	r3, r3, #15
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583e:	0b9b      	lsrs	r3, r3, #14
 8005840:	b2db      	uxtb	r3, r3
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	b2da      	uxtb	r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005852:	0b5b      	lsrs	r3, r3, #13
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	b2da      	uxtb	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005866:	0b1b      	lsrs	r3, r3, #12
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	b2da      	uxtb	r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587a:	0a9b      	lsrs	r3, r3, #10
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	b2da      	uxtb	r2, r3
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	b2da      	uxtb	r2, r3
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	004005ff 	.word	0x004005ff

080058cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005924:	b5b0      	push	{r4, r5, r7, lr}
 8005926:	b08e      	sub	sp, #56	@ 0x38
 8005928:	af04      	add	r7, sp, #16
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2203      	movs	r2, #3
 8005938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005940:	2b03      	cmp	r3, #3
 8005942:	d02e      	beq.n	80059a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800594a:	d106      	bne.n	800595a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	639a      	str	r2, [r3, #56]	@ 0x38
 8005958:	e029      	b.n	80059ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005960:	d10a      	bne.n	8005978 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fa8a 	bl	8005e7c <SD_WideBus_Enable>
 8005968:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	639a      	str	r2, [r3, #56]	@ 0x38
 8005976:	e01a      	b.n	80059ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fac7 	bl	8005f12 <SD_WideBus_Disable>
 8005984:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	639a      	str	r2, [r3, #56]	@ 0x38
 8005992:	e00c      	b.n	80059ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	639a      	str	r2, [r3, #56]	@ 0x38
 80059a0:	e005      	b.n	80059ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a26      	ldr	r2, [pc, #152]	@ (8005a54 <HAL_SD_ConfigWideBusOperation+0x130>)
 80059bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80059cc:	e01f      	b.n	8005a0e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681d      	ldr	r5, [r3, #0]
 80059f4:	466c      	mov	r4, sp
 80059f6:	f107 0314 	add.w	r3, r7, #20
 80059fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a02:	f107 0308 	add.w	r3, r7, #8
 8005a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f001 f8bb 	bl	8006b84 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 f98f 	bl	8006d3a <SDMMC_CmdBlockLength>
 8005a1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00c      	beq.n	8005a3e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a0a      	ldr	r2, [pc, #40]	@ (8005a54 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005a2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3728      	adds	r7, #40	@ 0x28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bdb0      	pop	{r4, r5, r7, pc}
 8005a52:	bf00      	nop
 8005a54:	004005ff 	.word	0x004005ff

08005a58 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005a64:	f107 030c 	add.w	r3, r7, #12
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f9de 	bl	8005e2c <SD_SendStatus>
 8005a70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	0a5b      	lsrs	r3, r3, #9
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005a8e:	693b      	ldr	r3, [r7, #16]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005aae:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff ffd1 	bl	8005a58 <HAL_SD_GetCardState>
 8005ab6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b06      	cmp	r3, #6
 8005aca:	d002      	beq.n	8005ad2 <SD_DMATxAbort+0x3a>
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	d10a      	bne.n	8005ae8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 f9da 	bl	8006e90 <SDMMC_CmdStopTransfer>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f003 f98f 	bl	8008e14 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005af6:	e002      	b.n	8005afe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff fd39 	bl	8005570 <HAL_SD_ErrorCallback>
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b12:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005b1c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff ff9a 	bl	8005a58 <HAL_SD_GetCardState>
 8005b24:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b06      	cmp	r3, #6
 8005b38:	d002      	beq.n	8005b40 <SD_DMARxAbort+0x3a>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b05      	cmp	r3, #5
 8005b3e:	d10a      	bne.n	8005b56 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 f9a3 	bl	8006e90 <SDMMC_CmdStopTransfer>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d103      	bne.n	8005b66 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f003 f958 	bl	8008e14 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005b64:	e002      	b.n	8005b6c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff fd02 	bl	8005570 <HAL_SD_ErrorCallback>
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b74:	b5b0      	push	{r4, r5, r7, lr}
 8005b76:	b094      	sub	sp, #80	@ 0x50
 8005b78:	af04      	add	r7, sp, #16
 8005b7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 f854 	bl	8006c32 <SDIO_GetPowerState>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b90:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005b94:	e0b8      	b.n	8005d08 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d02f      	beq.n	8005bfe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f001 fa7e 	bl	80070a4 <SDMMC_CmdSendCID>
 8005ba8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <SD_InitCard+0x40>
    {
      return errorstate;
 8005bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb2:	e0a9      	b.n	8005d08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f001 f87e 	bl	8006cbc <SDIO_GetResponse>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2104      	movs	r1, #4
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 f875 	bl	8006cbc <SDIO_GetResponse>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2108      	movs	r1, #8
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 f86c 	bl	8006cbc <SDIO_GetResponse>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	210c      	movs	r1, #12
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 f863 	bl	8006cbc <SDIO_GetResponse>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d00d      	beq.n	8005c22 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f107 020e 	add.w	r2, r7, #14
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 fa84 	bl	800711e <SDMMC_CmdSetRelAdd>
 8005c16:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <SD_InitCard+0xae>
    {
      return errorstate;
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c20:	e072      	b.n	8005d08 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d036      	beq.n	8005c98 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005c2a:	89fb      	ldrh	r3, [r7, #14]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f001 fa4e 	bl	80070e0 <SDMMC_CmdSendCSD>
 8005c44:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c4e:	e05b      	b.n	8005d08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 f830 	bl	8006cbc <SDIO_GetResponse>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2104      	movs	r1, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f001 f827 	bl	8006cbc <SDIO_GetResponse>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2108      	movs	r1, #8
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 f81e 	bl	8006cbc <SDIO_GetResponse>
 8005c80:	4602      	mov	r2, r0
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	210c      	movs	r1, #12
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 f815 	bl	8006cbc <SDIO_GetResponse>
 8005c92:	4602      	mov	r2, r0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2104      	movs	r1, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 f80c 	bl	8006cbc <SDIO_GetResponse>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	0d1a      	lsrs	r2, r3, #20
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005cac:	f107 0310 	add.w	r3, r7, #16
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fc66 	bl	8005584 <HAL_SD_GetCardCSD>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cbe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005cc2:	e021      	b.n	8005d08 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6819      	ldr	r1, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	2200      	movs	r2, #0
 8005cd0:	461c      	mov	r4, r3
 8005cd2:	4615      	mov	r5, r2
 8005cd4:	4622      	mov	r2, r4
 8005cd6:	462b      	mov	r3, r5
 8005cd8:	4608      	mov	r0, r1
 8005cda:	f001 f8fb 	bl	8006ed4 <SDMMC_CmdSelDesel>
 8005cde:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <SD_InitCard+0x176>
  {
    return errorstate;
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce8:	e00e      	b.n	8005d08 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681d      	ldr	r5, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	466c      	mov	r4, sp
 8005cf2:	f103 0210 	add.w	r2, r3, #16
 8005cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 ff3f 	bl	8006b84 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3740      	adds	r7, #64	@ 0x40
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bdb0      	pop	{r4, r5, r7, pc}

08005d10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 f8f6 	bl	8006f1a <SDMMC_CmdGoIdleState>
 8005d2e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	e072      	b.n	8005e20 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 f909 	bl	8006f56 <SDMMC_CmdOperCond>
 8005d44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 f8df 	bl	8006f1a <SDMMC_CmdGoIdleState>
 8005d5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	e05b      	b.n	8005e20 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d137      	bne.n	8005de6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 f909 	bl	8006f94 <SDMMC_CmdAppCommand>
 8005d82:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d02d      	beq.n	8005de6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005d8e:	e047      	b.n	8005e20 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 f8fc 	bl	8006f94 <SDMMC_CmdAppCommand>
 8005d9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <SD_PowerON+0x98>
    {
      return errorstate;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	e03b      	b.n	8005e20 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	491e      	ldr	r1, [pc, #120]	@ (8005e28 <SD_PowerON+0x118>)
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 f912 	bl	8006fd8 <SDMMC_CmdAppOperCommand>
 8005db4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dbc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005dc0:	e02e      	b.n	8005e20 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 ff77 	bl	8006cbc <SDIO_GetResponse>
 8005dce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	0fdb      	lsrs	r3, r3, #31
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <SD_PowerON+0xcc>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <SD_PowerON+0xce>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	613b      	str	r3, [r7, #16]

    count++;
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	3301      	adds	r3, #1
 8005de4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d802      	bhi.n	8005df6 <SD_PowerON+0xe6>
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0cc      	beq.n	8005d90 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d902      	bls.n	8005e06 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e04:	e00c      	b.n	8005e20 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	645a      	str	r2, [r3, #68]	@ 0x44
 8005e16:	e002      	b.n	8005e1e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	c1100000 	.word	0xc1100000

08005e2c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e40:	e018      	b.n	8005e74 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e4a:	041b      	lsls	r3, r3, #16
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f001 f986 	bl	8007160 <SDMMC_CmdSendStatus>
 8005e54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	e009      	b.n	8005e74 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 ff28 	bl	8006cbc <SDIO_GetResponse>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2100      	movs	r1, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 ff12 	bl	8006cbc <SDIO_GetResponse>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ea2:	d102      	bne.n	8005eaa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ea4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ea8:	e02f      	b.n	8005f0a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005eaa:	f107 030c 	add.w	r3, r7, #12
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f879 	bl	8005fa8 <SD_FindSCR>
 8005eb6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	e023      	b.n	8005f0a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01c      	beq.n	8005f06 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4610      	mov	r0, r2
 8005eda:	f001 f85b 	bl	8006f94 <SDMMC_CmdAppCommand>
 8005ede:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	e00f      	b.n	8005f0a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2102      	movs	r1, #2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 f894 	bl	800701e <SDMMC_CmdBusWidth>
 8005ef6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	e003      	b.n	8005f0a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e001      	b.n	8005f0a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f06:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b086      	sub	sp, #24
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2100      	movs	r1, #0
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fec7 	bl	8006cbc <SDIO_GetResponse>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f38:	d102      	bne.n	8005f40 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005f3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f3e:	e02f      	b.n	8005fa0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005f40:	f107 030c 	add.w	r3, r7, #12
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f82e 	bl	8005fa8 <SD_FindSCR>
 8005f4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	e023      	b.n	8005fa0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01c      	beq.n	8005f9c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6a:	041b      	lsls	r3, r3, #16
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	f001 f810 	bl	8006f94 <SDMMC_CmdAppCommand>
 8005f74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	e00f      	b.n	8005fa0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f001 f849 	bl	800701e <SDMMC_CmdBusWidth>
 8005f8c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	e003      	b.n	8005fa0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e001      	b.n	8005fa0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f9c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b08f      	sub	sp, #60	@ 0x3c
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005fb2:	f7fb fb51 	bl	8001658 <HAL_GetTick>
 8005fb6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60bb      	str	r3, [r7, #8]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2108      	movs	r1, #8
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 feb3 	bl	8006d3a <SDMMC_CmdBlockLength>
 8005fd4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	e0b9      	b.n	8006154 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe8:	041b      	lsls	r3, r3, #16
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f000 ffd1 	bl	8006f94 <SDMMC_CmdAppCommand>
 8005ff2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <SD_FindSCR+0x56>
  {
    return errorstate;
 8005ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffc:	e0aa      	b.n	8006154 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8006002:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006004:	2308      	movs	r3, #8
 8006006:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006008:	2330      	movs	r3, #48	@ 0x30
 800600a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800600c:	2302      	movs	r3, #2
 800600e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006010:	2300      	movs	r3, #0
 8006012:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006014:	2301      	movs	r3, #1
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f107 0210 	add.w	r2, r7, #16
 8006020:	4611      	mov	r1, r2
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fe5d 	bl	8006ce2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f001 f818 	bl	8007062 <SDMMC_CmdSendSCR>
 8006032:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	d02a      	beq.n	8006090 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800603a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603c:	e08a      	b.n	8006154 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00f      	beq.n	800606c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6819      	ldr	r1, [r3, #0]
 8006050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	f107 0208 	add.w	r2, r7, #8
 8006058:	18d4      	adds	r4, r2, r3
 800605a:	4608      	mov	r0, r1
 800605c:	f000 fdbd 	bl	8006bda <SDIO_ReadFIFO>
 8006060:	4603      	mov	r3, r0
 8006062:	6023      	str	r3, [r4, #0]
      index++;
 8006064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006066:	3301      	adds	r3, #1
 8006068:	637b      	str	r3, [r7, #52]	@ 0x34
 800606a:	e006      	b.n	800607a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d012      	beq.n	80060a0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800607a:	f7fb faed 	bl	8001658 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d102      	bne.n	8006090 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800608a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800608e:	e061      	b.n	8006154 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006096:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0cf      	beq.n	800603e <SD_FindSCR+0x96>
 800609e:	e000      	b.n	80060a2 <SD_FindSCR+0xfa>
      break;
 80060a0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d106      	bne.n	80060be <SD_FindSCR+0x116>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2208      	movs	r2, #8
 80060c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80060c6:	2308      	movs	r3, #8
 80060c8:	e044      	b.n	8006154 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2202      	movs	r2, #2
 80060de:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80060e0:	2302      	movs	r3, #2
 80060e2:	e037      	b.n	8006154 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2220      	movs	r2, #32
 80060f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80060fa:	2320      	movs	r3, #32
 80060fc:	e02a      	b.n	8006154 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006106:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	061a      	lsls	r2, r3, #24
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006114:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	0a1b      	lsrs	r3, r3, #8
 800611a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800611e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	0e1b      	lsrs	r3, r3, #24
 8006124:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006128:	601a      	str	r2, [r3, #0]
    scr++;
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	3304      	adds	r3, #4
 800612e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	061a      	lsls	r2, r3, #24
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800613c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	0a1b      	lsrs	r3, r3, #8
 8006142:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006146:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	0e1b      	lsrs	r3, r3, #24
 800614c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800614e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006150:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	373c      	adds	r7, #60	@ 0x3c
 8006158:	46bd      	mov	sp, r7
 800615a:	bd90      	pop	{r4, r7, pc}

0800615c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006168:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d03f      	beq.n	80061f6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	e033      	b.n	80061e4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fd2a 	bl	8006bda <SDIO_ReadFIFO>
 8006186:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	3b01      	subs	r3, #1
 800619a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	0a1b      	lsrs	r3, r3, #8
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	0c1b      	lsrs	r3, r3, #16
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	0e1b      	lsrs	r3, r3, #24
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	3b01      	subs	r3, #1
 80061dc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	3301      	adds	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2b07      	cmp	r3, #7
 80061e8:	d9c8      	bls.n	800617c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80061f6:	bf00      	nop
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d043      	beq.n	80062a0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e037      	b.n	800628e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3301      	adds	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	3b01      	subs	r3, #1
 800622e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	021a      	lsls	r2, r3, #8
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4313      	orrs	r3, r2
 800623a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3301      	adds	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	3b01      	subs	r3, #1
 8006246:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	041a      	lsls	r2, r3, #16
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4313      	orrs	r3, r2
 8006252:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3301      	adds	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	3b01      	subs	r3, #1
 800625e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	061a      	lsls	r2, r3, #24
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4313      	orrs	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3301      	adds	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	3b01      	subs	r3, #1
 8006276:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f107 0208 	add.w	r2, r7, #8
 8006280:	4611      	mov	r1, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fcb6 	bl	8006bf4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	3301      	adds	r3, #1
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b07      	cmp	r3, #7
 8006292:	d9c4      	bls.n	800621e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80062a0:	bf00      	nop
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e07b      	b.n	80063b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d108      	bne.n	80062d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ca:	d009      	beq.n	80062e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	61da      	str	r2, [r3, #28]
 80062d2:	e005      	b.n	80062e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fa ff0a 	bl	8001114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006316:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006364:	ea42 0103 	orr.w	r1, r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	f003 0104 	and.w	r1, r3, #4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006386:	f003 0210 	and.w	r2, r3, #16
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e038      	b.n	8006442 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7fa ffa5 	bl	8001334 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3308      	adds	r3, #8
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f000 faed 	bl	80069d4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	461a      	mov	r2, r3
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	f000 fb4f 	bl	8006aa8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6858      	ldr	r0, [r3, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	f000 fb7c 	bl	8006b14 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	6892      	ldr	r2, [r2, #8]
 8006424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	6892      	ldr	r2, [r2, #8]
 8006430:	f041 0101 	orr.w	r1, r1, #1
 8006434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e042      	b.n	80064e2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d106      	bne.n	8006476 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fa fecb 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2224      	movs	r2, #36	@ 0x24
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800648c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f82c 	bl	80064ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f0:	b0c0      	sub	sp, #256	@ 0x100
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006508:	68d9      	ldr	r1, [r3, #12]
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	ea40 0301 	orr.w	r3, r0, r1
 8006514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	431a      	orrs	r2, r3
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	431a      	orrs	r2, r3
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006544:	f021 010c 	bic.w	r1, r1, #12
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006552:	430b      	orrs	r3, r1
 8006554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006566:	6999      	ldr	r1, [r3, #24]
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	ea40 0301 	orr.w	r3, r0, r1
 8006572:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b8f      	ldr	r3, [pc, #572]	@ (80067b8 <UART_SetConfig+0x2cc>)
 800657c:	429a      	cmp	r2, r3
 800657e:	d005      	beq.n	800658c <UART_SetConfig+0xa0>
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4b8d      	ldr	r3, [pc, #564]	@ (80067bc <UART_SetConfig+0x2d0>)
 8006588:	429a      	cmp	r2, r3
 800658a:	d104      	bne.n	8006596 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800658c:	f7fd fd70 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 8006590:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006594:	e003      	b.n	800659e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006596:	f7fd fd57 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 800659a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a8:	f040 810c 	bne.w	80067c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065be:	4622      	mov	r2, r4
 80065c0:	462b      	mov	r3, r5
 80065c2:	1891      	adds	r1, r2, r2
 80065c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065c6:	415b      	adcs	r3, r3
 80065c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065ce:	4621      	mov	r1, r4
 80065d0:	eb12 0801 	adds.w	r8, r2, r1
 80065d4:	4629      	mov	r1, r5
 80065d6:	eb43 0901 	adc.w	r9, r3, r1
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ee:	4690      	mov	r8, r2
 80065f0:	4699      	mov	r9, r3
 80065f2:	4623      	mov	r3, r4
 80065f4:	eb18 0303 	adds.w	r3, r8, r3
 80065f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065fc:	462b      	mov	r3, r5
 80065fe:	eb49 0303 	adc.w	r3, r9, r3
 8006602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006612:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800661a:	460b      	mov	r3, r1
 800661c:	18db      	adds	r3, r3, r3
 800661e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006620:	4613      	mov	r3, r2
 8006622:	eb42 0303 	adc.w	r3, r2, r3
 8006626:	657b      	str	r3, [r7, #84]	@ 0x54
 8006628:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800662c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006630:	f7f9 fdca 	bl	80001c8 <__aeabi_uldivmod>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4b61      	ldr	r3, [pc, #388]	@ (80067c0 <UART_SetConfig+0x2d4>)
 800663a:	fba3 2302 	umull	r2, r3, r3, r2
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	011c      	lsls	r4, r3, #4
 8006642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006646:	2200      	movs	r2, #0
 8006648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800664c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006650:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	1891      	adds	r1, r2, r2
 800665a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800665c:	415b      	adcs	r3, r3
 800665e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006664:	4641      	mov	r1, r8
 8006666:	eb12 0a01 	adds.w	sl, r2, r1
 800666a:	4649      	mov	r1, r9
 800666c:	eb43 0b01 	adc.w	fp, r3, r1
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800667c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006684:	4692      	mov	sl, r2
 8006686:	469b      	mov	fp, r3
 8006688:	4643      	mov	r3, r8
 800668a:	eb1a 0303 	adds.w	r3, sl, r3
 800668e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006692:	464b      	mov	r3, r9
 8006694:	eb4b 0303 	adc.w	r3, fp, r3
 8006698:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066b0:	460b      	mov	r3, r1
 80066b2:	18db      	adds	r3, r3, r3
 80066b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066b6:	4613      	mov	r3, r2
 80066b8:	eb42 0303 	adc.w	r3, r2, r3
 80066bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066c6:	f7f9 fd7f 	bl	80001c8 <__aeabi_uldivmod>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	4b3b      	ldr	r3, [pc, #236]	@ (80067c0 <UART_SetConfig+0x2d4>)
 80066d2:	fba3 2301 	umull	r2, r3, r3, r1
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	2264      	movs	r2, #100	@ 0x64
 80066da:	fb02 f303 	mul.w	r3, r2, r3
 80066de:	1acb      	subs	r3, r1, r3
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066e6:	4b36      	ldr	r3, [pc, #216]	@ (80067c0 <UART_SetConfig+0x2d4>)
 80066e8:	fba3 2302 	umull	r2, r3, r3, r2
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066f4:	441c      	add	r4, r3
 80066f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006700:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006704:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006708:	4642      	mov	r2, r8
 800670a:	464b      	mov	r3, r9
 800670c:	1891      	adds	r1, r2, r2
 800670e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006710:	415b      	adcs	r3, r3
 8006712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006718:	4641      	mov	r1, r8
 800671a:	1851      	adds	r1, r2, r1
 800671c:	6339      	str	r1, [r7, #48]	@ 0x30
 800671e:	4649      	mov	r1, r9
 8006720:	414b      	adcs	r3, r1
 8006722:	637b      	str	r3, [r7, #52]	@ 0x34
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006730:	4659      	mov	r1, fp
 8006732:	00cb      	lsls	r3, r1, #3
 8006734:	4651      	mov	r1, sl
 8006736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800673a:	4651      	mov	r1, sl
 800673c:	00ca      	lsls	r2, r1, #3
 800673e:	4610      	mov	r0, r2
 8006740:	4619      	mov	r1, r3
 8006742:	4603      	mov	r3, r0
 8006744:	4642      	mov	r2, r8
 8006746:	189b      	adds	r3, r3, r2
 8006748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800674c:	464b      	mov	r3, r9
 800674e:	460a      	mov	r2, r1
 8006750:	eb42 0303 	adc.w	r3, r2, r3
 8006754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006764:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800676c:	460b      	mov	r3, r1
 800676e:	18db      	adds	r3, r3, r3
 8006770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006772:	4613      	mov	r3, r2
 8006774:	eb42 0303 	adc.w	r3, r2, r3
 8006778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800677a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800677e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006782:	f7f9 fd21 	bl	80001c8 <__aeabi_uldivmod>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4b0d      	ldr	r3, [pc, #52]	@ (80067c0 <UART_SetConfig+0x2d4>)
 800678c:	fba3 1302 	umull	r1, r3, r3, r2
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	2164      	movs	r1, #100	@ 0x64
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	3332      	adds	r3, #50	@ 0x32
 800679e:	4a08      	ldr	r2, [pc, #32]	@ (80067c0 <UART_SetConfig+0x2d4>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f003 0207 	and.w	r2, r3, #7
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4422      	add	r2, r4
 80067b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067b4:	e106      	b.n	80069c4 <UART_SetConfig+0x4d8>
 80067b6:	bf00      	nop
 80067b8:	40011000 	.word	0x40011000
 80067bc:	40011400 	.word	0x40011400
 80067c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067d6:	4642      	mov	r2, r8
 80067d8:	464b      	mov	r3, r9
 80067da:	1891      	adds	r1, r2, r2
 80067dc:	6239      	str	r1, [r7, #32]
 80067de:	415b      	adcs	r3, r3
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067e6:	4641      	mov	r1, r8
 80067e8:	1854      	adds	r4, r2, r1
 80067ea:	4649      	mov	r1, r9
 80067ec:	eb43 0501 	adc.w	r5, r3, r1
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	00eb      	lsls	r3, r5, #3
 80067fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067fe:	00e2      	lsls	r2, r4, #3
 8006800:	4614      	mov	r4, r2
 8006802:	461d      	mov	r5, r3
 8006804:	4643      	mov	r3, r8
 8006806:	18e3      	adds	r3, r4, r3
 8006808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800680c:	464b      	mov	r3, r9
 800680e:	eb45 0303 	adc.w	r3, r5, r3
 8006812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006822:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	f04f 0300 	mov.w	r3, #0
 800682e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006832:	4629      	mov	r1, r5
 8006834:	008b      	lsls	r3, r1, #2
 8006836:	4621      	mov	r1, r4
 8006838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800683c:	4621      	mov	r1, r4
 800683e:	008a      	lsls	r2, r1, #2
 8006840:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006844:	f7f9 fcc0 	bl	80001c8 <__aeabi_uldivmod>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4b60      	ldr	r3, [pc, #384]	@ (80069d0 <UART_SetConfig+0x4e4>)
 800684e:	fba3 2302 	umull	r2, r3, r3, r2
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	011c      	lsls	r4, r3, #4
 8006856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800685a:	2200      	movs	r2, #0
 800685c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006860:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006864:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006868:	4642      	mov	r2, r8
 800686a:	464b      	mov	r3, r9
 800686c:	1891      	adds	r1, r2, r2
 800686e:	61b9      	str	r1, [r7, #24]
 8006870:	415b      	adcs	r3, r3
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006878:	4641      	mov	r1, r8
 800687a:	1851      	adds	r1, r2, r1
 800687c:	6139      	str	r1, [r7, #16]
 800687e:	4649      	mov	r1, r9
 8006880:	414b      	adcs	r3, r1
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006890:	4659      	mov	r1, fp
 8006892:	00cb      	lsls	r3, r1, #3
 8006894:	4651      	mov	r1, sl
 8006896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800689a:	4651      	mov	r1, sl
 800689c:	00ca      	lsls	r2, r1, #3
 800689e:	4610      	mov	r0, r2
 80068a0:	4619      	mov	r1, r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	4642      	mov	r2, r8
 80068a6:	189b      	adds	r3, r3, r2
 80068a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068ac:	464b      	mov	r3, r9
 80068ae:	460a      	mov	r2, r1
 80068b0:	eb42 0303 	adc.w	r3, r2, r3
 80068b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068d0:	4649      	mov	r1, r9
 80068d2:	008b      	lsls	r3, r1, #2
 80068d4:	4641      	mov	r1, r8
 80068d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068da:	4641      	mov	r1, r8
 80068dc:	008a      	lsls	r2, r1, #2
 80068de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068e2:	f7f9 fc71 	bl	80001c8 <__aeabi_uldivmod>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4611      	mov	r1, r2
 80068ec:	4b38      	ldr	r3, [pc, #224]	@ (80069d0 <UART_SetConfig+0x4e4>)
 80068ee:	fba3 2301 	umull	r2, r3, r3, r1
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	2264      	movs	r2, #100	@ 0x64
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
 80068fa:	1acb      	subs	r3, r1, r3
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	3332      	adds	r3, #50	@ 0x32
 8006900:	4a33      	ldr	r2, [pc, #204]	@ (80069d0 <UART_SetConfig+0x4e4>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800690c:	441c      	add	r4, r3
 800690e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006912:	2200      	movs	r2, #0
 8006914:	673b      	str	r3, [r7, #112]	@ 0x70
 8006916:	677a      	str	r2, [r7, #116]	@ 0x74
 8006918:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800691c:	4642      	mov	r2, r8
 800691e:	464b      	mov	r3, r9
 8006920:	1891      	adds	r1, r2, r2
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	415b      	adcs	r3, r3
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800692c:	4641      	mov	r1, r8
 800692e:	1851      	adds	r1, r2, r1
 8006930:	6039      	str	r1, [r7, #0]
 8006932:	4649      	mov	r1, r9
 8006934:	414b      	adcs	r3, r1
 8006936:	607b      	str	r3, [r7, #4]
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006944:	4659      	mov	r1, fp
 8006946:	00cb      	lsls	r3, r1, #3
 8006948:	4651      	mov	r1, sl
 800694a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800694e:	4651      	mov	r1, sl
 8006950:	00ca      	lsls	r2, r1, #3
 8006952:	4610      	mov	r0, r2
 8006954:	4619      	mov	r1, r3
 8006956:	4603      	mov	r3, r0
 8006958:	4642      	mov	r2, r8
 800695a:	189b      	adds	r3, r3, r2
 800695c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800695e:	464b      	mov	r3, r9
 8006960:	460a      	mov	r2, r1
 8006962:	eb42 0303 	adc.w	r3, r2, r3
 8006966:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	663b      	str	r3, [r7, #96]	@ 0x60
 8006972:	667a      	str	r2, [r7, #100]	@ 0x64
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006980:	4649      	mov	r1, r9
 8006982:	008b      	lsls	r3, r1, #2
 8006984:	4641      	mov	r1, r8
 8006986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698a:	4641      	mov	r1, r8
 800698c:	008a      	lsls	r2, r1, #2
 800698e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006992:	f7f9 fc19 	bl	80001c8 <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4b0d      	ldr	r3, [pc, #52]	@ (80069d0 <UART_SetConfig+0x4e4>)
 800699c:	fba3 1302 	umull	r1, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2164      	movs	r1, #100	@ 0x64
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	3332      	adds	r3, #50	@ 0x32
 80069ae:	4a08      	ldr	r2, [pc, #32]	@ (80069d0 <UART_SetConfig+0x4e4>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 020f 	and.w	r2, r3, #15
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4422      	add	r2, r4
 80069c2:	609a      	str	r2, [r3, #8]
}
 80069c4:	bf00      	nop
 80069c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069ca:	46bd      	mov	sp, r7
 80069cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d0:	51eb851f 	.word	0x51eb851f

080069d4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	f023 0101 	bic.w	r1, r3, #1
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d102      	bne.n	8006a04 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80069fe:	2340      	movs	r3, #64	@ 0x40
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	e001      	b.n	8006a08 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006a14:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006a1a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006a20:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006a26:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006a2c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006a32:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006a38:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006a3e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006a44:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006a62:	4b10      	ldr	r3, [pc, #64]	@ (8006aa4 <FSMC_NORSRAM_Init+0xd0>)
 8006a64:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a6c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006a74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	43db      	mvns	r3, r3
 8006a84:	ea02 0103 	and.w	r1, r2, r3
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	4319      	orrs	r1, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	0008fb7f 	.word	0x0008fb7f

08006aa8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abe:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	431a      	orrs	r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	431a      	orrs	r2, r3
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	051b      	lsls	r3, r3, #20
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	3b02      	subs	r3, #2
 8006aee:	061b      	lsls	r3, r3, #24
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	3201      	adds	r2, #1
 8006afc:	4319      	orrs	r1, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b28:	d11d      	bne.n	8006b66 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b32:	4b13      	ldr	r3, [pc, #76]	@ (8006b80 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	6811      	ldr	r1, [r2, #0]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	6852      	ldr	r2, [r2, #4]
 8006b3e:	0112      	lsls	r2, r2, #4
 8006b40:	4311      	orrs	r1, r2
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	6892      	ldr	r2, [r2, #8]
 8006b46:	0212      	lsls	r2, r2, #8
 8006b48:	4311      	orrs	r1, r2
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	6992      	ldr	r2, [r2, #24]
 8006b4e:	4311      	orrs	r1, r2
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	68d2      	ldr	r2, [r2, #12]
 8006b54:	0412      	lsls	r2, r2, #16
 8006b56:	430a      	orrs	r2, r1
 8006b58:	ea43 0102 	orr.w	r1, r3, r2
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006b64:	e005      	b.n	8006b72 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	cff00000 	.word	0xcff00000

08006b84 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006b84:	b084      	sub	sp, #16
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	f107 001c 	add.w	r0, r7, #28
 8006b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006b9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006b9e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8006ba2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006ba6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8006baa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8006bae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8006bbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	b004      	add	sp, #16
 8006bd8:	4770      	bx	lr

08006bda <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2203      	movs	r2, #3
 8006c22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0303 	and.w	r3, r3, #3
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b085      	sub	sp, #20
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c6c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006c72:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006c78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006c88:	f023 030f 	bic.w	r3, r3, #15
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	b2db      	uxtb	r3, r3
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3314      	adds	r3, #20
 8006cca:	461a      	mov	r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	4413      	add	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
}  
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d08:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006d0e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006d14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d20:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0

}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b088      	sub	sp, #32
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006d48:	2310      	movs	r3, #16
 8006d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d4c:	2340      	movs	r3, #64	@ 0x40
 8006d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d5a:	f107 0308 	add.w	r3, r7, #8
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff ff74 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d6a:	2110      	movs	r1, #16
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fa19 	bl	80071a4 <SDMMC_GetCmdResp1>
 8006d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d74:	69fb      	ldr	r3, [r7, #28]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b088      	sub	sp, #32
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006d8c:	2311      	movs	r3, #17
 8006d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d90:	2340      	movs	r3, #64	@ 0x40
 8006d92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d9e:	f107 0308 	add.w	r3, r7, #8
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ff52 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dae:	2111      	movs	r1, #17
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f9f7 	bl	80071a4 <SDMMC_GetCmdResp1>
 8006db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006db8:	69fb      	ldr	r3, [r7, #28]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3720      	adds	r7, #32
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b088      	sub	sp, #32
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006dd0:	2312      	movs	r3, #18
 8006dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dd4:	2340      	movs	r3, #64	@ 0x40
 8006dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff ff30 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df2:	2112      	movs	r1, #18
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f9d5 	bl	80071a4 <SDMMC_GetCmdResp1>
 8006dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b088      	sub	sp, #32
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006e14:	2318      	movs	r3, #24
 8006e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e18:	2340      	movs	r3, #64	@ 0x40
 8006e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e26:	f107 0308 	add.w	r3, r7, #8
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff ff0e 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e36:	2118      	movs	r1, #24
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f9b3 	bl	80071a4 <SDMMC_GetCmdResp1>
 8006e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e40:	69fb      	ldr	r3, [r7, #28]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b088      	sub	sp, #32
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006e58:	2319      	movs	r3, #25
 8006e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e5c:	2340      	movs	r3, #64	@ 0x40
 8006e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e6a:	f107 0308 	add.w	r3, r7, #8
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff feec 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e7a:	2119      	movs	r1, #25
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f991 	bl	80071a4 <SDMMC_GetCmdResp1>
 8006e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e84:	69fb      	ldr	r3, [r7, #28]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3720      	adds	r7, #32
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ea0:	2340      	movs	r3, #64	@ 0x40
 8006ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006eac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006eae:	f107 0308 	add.w	r3, r7, #8
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff feca 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006eba:	4a05      	ldr	r2, [pc, #20]	@ (8006ed0 <SDMMC_CmdStopTransfer+0x40>)
 8006ebc:	210c      	movs	r1, #12
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f970 	bl	80071a4 <SDMMC_GetCmdResp1>
 8006ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3720      	adds	r7, #32
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	05f5e100 	.word	0x05f5e100

08006ed4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08a      	sub	sp, #40	@ 0x28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006ee4:	2307      	movs	r3, #7
 8006ee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ee8:	2340      	movs	r3, #64	@ 0x40
 8006eea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ef4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ef6:	f107 0310 	add.w	r3, r7, #16
 8006efa:	4619      	mov	r1, r3
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff fea6 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f06:	2107      	movs	r1, #7
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f94b 	bl	80071a4 <SDMMC_GetCmdResp1>
 8006f0e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3728      	adds	r7, #40	@ 0x28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b088      	sub	sp, #32
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f38:	f107 0308 	add.w	r3, r7, #8
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff fe85 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fb65 	bl	8007614 <SDMMC_GetCmdError>
 8006f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f4c:	69fb      	ldr	r3, [r7, #28]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b088      	sub	sp, #32
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006f5e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006f62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006f64:	2308      	movs	r3, #8
 8006f66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f68:	2340      	movs	r3, #64	@ 0x40
 8006f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f76:	f107 0308 	add.w	r3, r7, #8
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff fe66 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 faf8 	bl	8007578 <SDMMC_GetCmdResp7>
 8006f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006fa2:	2337      	movs	r3, #55	@ 0x37
 8006fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fa6:	2340      	movs	r3, #64	@ 0x40
 8006fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fb4:	f107 0308 	add.w	r3, r7, #8
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fe47 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fc4:	2137      	movs	r1, #55	@ 0x37
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f8ec 	bl	80071a4 <SDMMC_GetCmdResp1>
 8006fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fce:	69fb      	ldr	r3, [r7, #28]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fe8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006fee:	2329      	movs	r3, #41	@ 0x29
 8006ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ff2:	2340      	movs	r3, #64	@ 0x40
 8006ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007000:	f107 0308 	add.w	r3, r7, #8
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff fe21 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f9ff 	bl	8007410 <SDMMC_GetCmdResp3>
 8007012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007014:	69fb      	ldr	r3, [r7, #28]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3720      	adds	r7, #32
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b088      	sub	sp, #32
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800702c:	2306      	movs	r3, #6
 800702e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007030:	2340      	movs	r3, #64	@ 0x40
 8007032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800703c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800703e:	f107 0308 	add.w	r3, r7, #8
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fe02 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800704a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800704e:	2106      	movs	r1, #6
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f8a7 	bl	80071a4 <SDMMC_GetCmdResp1>
 8007056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007058:	69fb      	ldr	r3, [r7, #28]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b088      	sub	sp, #32
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800706e:	2333      	movs	r3, #51	@ 0x33
 8007070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007072:	2340      	movs	r3, #64	@ 0x40
 8007074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800707a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800707e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff fde1 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800708c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007090:	2133      	movs	r1, #51	@ 0x33
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f886 	bl	80071a4 <SDMMC_GetCmdResp1>
 8007098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800709a:	69fb      	ldr	r3, [r7, #28]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3720      	adds	r7, #32
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80070b0:	2302      	movs	r3, #2
 80070b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80070b4:	23c0      	movs	r3, #192	@ 0xc0
 80070b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070c2:	f107 0308 	add.w	r3, r7, #8
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff fdc0 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f956 	bl	8007380 <SDMMC_GetCmdResp2>
 80070d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070d6:	69fb      	ldr	r3, [r7, #28]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3720      	adds	r7, #32
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80070ee:	2309      	movs	r3, #9
 80070f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80070f2:	23c0      	movs	r3, #192	@ 0xc0
 80070f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007100:	f107 0308 	add.w	r3, r7, #8
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fda1 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f937 	bl	8007380 <SDMMC_GetCmdResp2>
 8007112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007114:	69fb      	ldr	r3, [r7, #28]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b088      	sub	sp, #32
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800712c:	2303      	movs	r3, #3
 800712e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007130:	2340      	movs	r3, #64	@ 0x40
 8007132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800713c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800713e:	f107 0308 	add.w	r3, r7, #8
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff fd82 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	2103      	movs	r1, #3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f99c 	bl	800748c <SDMMC_GetCmdResp6>
 8007154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007156:	69fb      	ldr	r3, [r7, #28]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3720      	adds	r7, #32
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800716e:	230d      	movs	r3, #13
 8007170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007172:	2340      	movs	r3, #64	@ 0x40
 8007174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800717a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800717e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007180:	f107 0308 	add.w	r3, r7, #8
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fd61 	bl	8006c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800718c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007190:	210d      	movs	r1, #13
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f806 	bl	80071a4 <SDMMC_GetCmdResp1>
 8007198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800719a:	69fb      	ldr	r3, [r7, #28]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3720      	adds	r7, #32
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	460b      	mov	r3, r1
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071b2:	4b70      	ldr	r3, [pc, #448]	@ (8007374 <SDMMC_GetCmdResp1+0x1d0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a70      	ldr	r2, [pc, #448]	@ (8007378 <SDMMC_GetCmdResp1+0x1d4>)
 80071b8:	fba2 2303 	umull	r2, r3, r2, r3
 80071bc:	0a5a      	lsrs	r2, r3, #9
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	fb02 f303 	mul.w	r3, r2, r3
 80071c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	1e5a      	subs	r2, r3, #1
 80071ca:	61fa      	str	r2, [r7, #28]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80071d4:	e0c9      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0ef      	beq.n	80071c6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1ea      	bne.n	80071c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2204      	movs	r2, #4
 8007200:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007202:	2304      	movs	r3, #4
 8007204:	e0b1      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007218:	2301      	movs	r3, #1
 800721a:	e0a6      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	22c5      	movs	r2, #197	@ 0xc5
 8007220:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7ff fd3d 	bl	8006ca2 <SDIO_GetCommandResponse>
 8007228:	4603      	mov	r3, r0
 800722a:	461a      	mov	r2, r3
 800722c:	7afb      	ldrb	r3, [r7, #11]
 800722e:	4293      	cmp	r3, r2
 8007230:	d001      	beq.n	8007236 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007232:	2301      	movs	r3, #1
 8007234:	e099      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007236:	2100      	movs	r1, #0
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff fd3f 	bl	8006cbc <SDIO_GetResponse>
 800723e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4b4e      	ldr	r3, [pc, #312]	@ (800737c <SDMMC_GetCmdResp1+0x1d8>)
 8007244:	4013      	ands	r3, r2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800724a:	2300      	movs	r3, #0
 800724c:	e08d      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	da02      	bge.n	800725a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007254:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007258:	e087      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007264:	2340      	movs	r3, #64	@ 0x40
 8007266:	e080      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007272:	2380      	movs	r3, #128	@ 0x80
 8007274:	e079      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007284:	e071      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007294:	e069      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80072a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072a4:	e061      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80072b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80072b4:	e059      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80072c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80072c4:	e051      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80072d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80072d4:	e049      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80072e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80072e4:	e041      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80072f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072f4:	e039      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007300:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007304:	e031      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007310:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007314:	e029      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007320:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007324:	e021      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007330:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007334:	e019      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007340:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007344:	e011      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007350:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007354:	e009      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007360:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007364:	e001      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007366:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800736a:	4618      	mov	r0, r3
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000000 	.word	0x20000000
 8007378:	10624dd3 	.word	0x10624dd3
 800737c:	fdffe008 	.word	0xfdffe008

08007380 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007388:	4b1f      	ldr	r3, [pc, #124]	@ (8007408 <SDMMC_GetCmdResp2+0x88>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a1f      	ldr	r2, [pc, #124]	@ (800740c <SDMMC_GetCmdResp2+0x8c>)
 800738e:	fba2 2303 	umull	r2, r3, r2, r3
 8007392:	0a5b      	lsrs	r3, r3, #9
 8007394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007398:	fb02 f303 	mul.w	r3, r2, r3
 800739c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1e5a      	subs	r2, r3, #1
 80073a2:	60fa      	str	r2, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d102      	bne.n	80073ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80073ac:	e026      	b.n	80073fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0ef      	beq.n	800739e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1ea      	bne.n	800739e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d004      	beq.n	80073de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2204      	movs	r2, #4
 80073d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073da:	2304      	movs	r3, #4
 80073dc:	e00e      	b.n	80073fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d004      	beq.n	80073f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e003      	b.n	80073fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	22c5      	movs	r2, #197	@ 0xc5
 80073f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	20000000 	.word	0x20000000
 800740c:	10624dd3 	.word	0x10624dd3

08007410 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007418:	4b1a      	ldr	r3, [pc, #104]	@ (8007484 <SDMMC_GetCmdResp3+0x74>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a1a      	ldr	r2, [pc, #104]	@ (8007488 <SDMMC_GetCmdResp3+0x78>)
 800741e:	fba2 2303 	umull	r2, r3, r2, r3
 8007422:	0a5b      	lsrs	r3, r3, #9
 8007424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007428:	fb02 f303 	mul.w	r3, r2, r3
 800742c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1e5a      	subs	r2, r3, #1
 8007432:	60fa      	str	r2, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007438:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800743c:	e01b      	b.n	8007476 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007442:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0ef      	beq.n	800742e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1ea      	bne.n	800742e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2204      	movs	r2, #4
 8007468:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800746a:	2304      	movs	r3, #4
 800746c:	e003      	b.n	8007476 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	22c5      	movs	r2, #197	@ 0xc5
 8007472:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20000000 	.word	0x20000000
 8007488:	10624dd3 	.word	0x10624dd3

0800748c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	460b      	mov	r3, r1
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800749a:	4b35      	ldr	r3, [pc, #212]	@ (8007570 <SDMMC_GetCmdResp6+0xe4>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a35      	ldr	r2, [pc, #212]	@ (8007574 <SDMMC_GetCmdResp6+0xe8>)
 80074a0:	fba2 2303 	umull	r2, r3, r2, r3
 80074a4:	0a5b      	lsrs	r3, r3, #9
 80074a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074aa:	fb02 f303 	mul.w	r3, r2, r3
 80074ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	1e5a      	subs	r2, r3, #1
 80074b4:	61fa      	str	r2, [r7, #28]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d102      	bne.n	80074c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80074be:	e052      	b.n	8007566 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0ef      	beq.n	80074b0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1ea      	bne.n	80074b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d004      	beq.n	80074f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2204      	movs	r2, #4
 80074ea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074ec:	2304      	movs	r3, #4
 80074ee:	e03a      	b.n	8007566 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007502:	2301      	movs	r3, #1
 8007504:	e02f      	b.n	8007566 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fbcb 	bl	8006ca2 <SDIO_GetCommandResponse>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	4293      	cmp	r3, r2
 8007514:	d001      	beq.n	800751a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007516:	2301      	movs	r3, #1
 8007518:	e025      	b.n	8007566 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	22c5      	movs	r2, #197	@ 0xc5
 800751e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007520:	2100      	movs	r1, #0
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f7ff fbca 	bl	8006cbc <SDIO_GetResponse>
 8007528:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	0c1b      	lsrs	r3, r3, #16
 8007538:	b29a      	uxth	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800753e:	2300      	movs	r3, #0
 8007540:	e011      	b.n	8007566 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800754c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007550:	e009      	b.n	8007566 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800755c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007560:	e001      	b.n	8007566 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007566:	4618      	mov	r0, r3
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20000000 	.word	0x20000000
 8007574:	10624dd3 	.word	0x10624dd3

08007578 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007580:	4b22      	ldr	r3, [pc, #136]	@ (800760c <SDMMC_GetCmdResp7+0x94>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a22      	ldr	r2, [pc, #136]	@ (8007610 <SDMMC_GetCmdResp7+0x98>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	0a5b      	lsrs	r3, r3, #9
 800758c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007590:	fb02 f303 	mul.w	r3, r2, r3
 8007594:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1e5a      	subs	r2, r3, #1
 800759a:	60fa      	str	r2, [r7, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d102      	bne.n	80075a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80075a4:	e02c      	b.n	8007600 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0ef      	beq.n	8007596 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1ea      	bne.n	8007596 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2204      	movs	r2, #4
 80075d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075d2:	2304      	movs	r3, #4
 80075d4:	e014      	b.n	8007600 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e009      	b.n	8007600 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2240      	movs	r2, #64	@ 0x40
 80075fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80075fe:	2300      	movs	r3, #0
  
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	20000000 	.word	0x20000000
 8007610:	10624dd3 	.word	0x10624dd3

08007614 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800761c:	4b11      	ldr	r3, [pc, #68]	@ (8007664 <SDMMC_GetCmdError+0x50>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a11      	ldr	r2, [pc, #68]	@ (8007668 <SDMMC_GetCmdError+0x54>)
 8007622:	fba2 2303 	umull	r2, r3, r2, r3
 8007626:	0a5b      	lsrs	r3, r3, #9
 8007628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800762c:	fb02 f303 	mul.w	r3, r2, r3
 8007630:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1e5a      	subs	r2, r3, #1
 8007636:	60fa      	str	r2, [r7, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800763c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007640:	e009      	b.n	8007656 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f1      	beq.n	8007632 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	22c5      	movs	r2, #197	@ 0xc5
 8007652:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20000000 	.word	0x20000000
 8007668:	10624dd3 	.word	0x10624dd3

0800766c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800766c:	b084      	sub	sp, #16
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	f107 001c 	add.w	r0, r7, #28
 800767a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800767e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007682:	2b01      	cmp	r3, #1
 8007684:	d123      	bne.n	80076ce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800769a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d105      	bne.n	80076c2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 fae2 	bl	8008c8c <USB_CoreReset>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]
 80076cc:	e01b      	b.n	8007706 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fad6 	bl	8008c8c <USB_CoreReset>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80076f8:	e005      	b.n	8007706 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007706:	7fbb      	ldrb	r3, [r7, #30]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d10b      	bne.n	8007724 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f043 0206 	orr.w	r2, r3, #6
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f043 0220 	orr.w	r2, r3, #32
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007730:	b004      	add	sp, #16
 8007732:	4770      	bx	lr

08007734 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d165      	bne.n	8007814 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4a41      	ldr	r2, [pc, #260]	@ (8007850 <USB_SetTurnaroundTime+0x11c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d906      	bls.n	800775e <USB_SetTurnaroundTime+0x2a>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4a40      	ldr	r2, [pc, #256]	@ (8007854 <USB_SetTurnaroundTime+0x120>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d202      	bcs.n	800775e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007758:	230f      	movs	r3, #15
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	e062      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4a3c      	ldr	r2, [pc, #240]	@ (8007854 <USB_SetTurnaroundTime+0x120>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d306      	bcc.n	8007774 <USB_SetTurnaroundTime+0x40>
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4a3b      	ldr	r2, [pc, #236]	@ (8007858 <USB_SetTurnaroundTime+0x124>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d202      	bcs.n	8007774 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800776e:	230e      	movs	r3, #14
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	e057      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4a38      	ldr	r2, [pc, #224]	@ (8007858 <USB_SetTurnaroundTime+0x124>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d306      	bcc.n	800778a <USB_SetTurnaroundTime+0x56>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4a37      	ldr	r2, [pc, #220]	@ (800785c <USB_SetTurnaroundTime+0x128>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d202      	bcs.n	800778a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007784:	230d      	movs	r3, #13
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e04c      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	4a33      	ldr	r2, [pc, #204]	@ (800785c <USB_SetTurnaroundTime+0x128>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d306      	bcc.n	80077a0 <USB_SetTurnaroundTime+0x6c>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	4a32      	ldr	r2, [pc, #200]	@ (8007860 <USB_SetTurnaroundTime+0x12c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d802      	bhi.n	80077a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800779a:	230c      	movs	r3, #12
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	e041      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4a2f      	ldr	r2, [pc, #188]	@ (8007860 <USB_SetTurnaroundTime+0x12c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d906      	bls.n	80077b6 <USB_SetTurnaroundTime+0x82>
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	4a2e      	ldr	r2, [pc, #184]	@ (8007864 <USB_SetTurnaroundTime+0x130>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d802      	bhi.n	80077b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80077b0:	230b      	movs	r3, #11
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	e036      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007864 <USB_SetTurnaroundTime+0x130>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d906      	bls.n	80077cc <USB_SetTurnaroundTime+0x98>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4a29      	ldr	r2, [pc, #164]	@ (8007868 <USB_SetTurnaroundTime+0x134>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d802      	bhi.n	80077cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80077c6:	230a      	movs	r3, #10
 80077c8:	617b      	str	r3, [r7, #20]
 80077ca:	e02b      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	4a26      	ldr	r2, [pc, #152]	@ (8007868 <USB_SetTurnaroundTime+0x134>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d906      	bls.n	80077e2 <USB_SetTurnaroundTime+0xae>
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4a25      	ldr	r2, [pc, #148]	@ (800786c <USB_SetTurnaroundTime+0x138>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d202      	bcs.n	80077e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80077dc:	2309      	movs	r3, #9
 80077de:	617b      	str	r3, [r7, #20]
 80077e0:	e020      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	4a21      	ldr	r2, [pc, #132]	@ (800786c <USB_SetTurnaroundTime+0x138>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d306      	bcc.n	80077f8 <USB_SetTurnaroundTime+0xc4>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	4a20      	ldr	r2, [pc, #128]	@ (8007870 <USB_SetTurnaroundTime+0x13c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d802      	bhi.n	80077f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077f2:	2308      	movs	r3, #8
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	e015      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007870 <USB_SetTurnaroundTime+0x13c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d906      	bls.n	800780e <USB_SetTurnaroundTime+0xda>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4a1c      	ldr	r2, [pc, #112]	@ (8007874 <USB_SetTurnaroundTime+0x140>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d202      	bcs.n	800780e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007808:	2307      	movs	r3, #7
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	e00a      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800780e:	2306      	movs	r3, #6
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	e007      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d102      	bne.n	8007820 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800781a:	2309      	movs	r3, #9
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	e001      	b.n	8007824 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007820:	2309      	movs	r3, #9
 8007822:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	029b      	lsls	r3, r3, #10
 8007838:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800783c:	431a      	orrs	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	371c      	adds	r7, #28
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	00d8acbf 	.word	0x00d8acbf
 8007854:	00e4e1c0 	.word	0x00e4e1c0
 8007858:	00f42400 	.word	0x00f42400
 800785c:	01067380 	.word	0x01067380
 8007860:	011a499f 	.word	0x011a499f
 8007864:	01312cff 	.word	0x01312cff
 8007868:	014ca43f 	.word	0x014ca43f
 800786c:	016e3600 	.word	0x016e3600
 8007870:	01a6ab1f 	.word	0x01a6ab1f
 8007874:	01e84800 	.word	0x01e84800

08007878 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f043 0201 	orr.w	r2, r3, #1
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f023 0201 	bic.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d115      	bne.n	800790a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078ea:	200a      	movs	r0, #10
 80078ec:	f7f9 fec0 	bl	8001670 <HAL_Delay>
      ms += 10U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	330a      	adds	r3, #10
 80078f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 f939 	bl	8008b6e <USB_GetMode>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d01e      	beq.n	8007940 <USB_SetCurrentMode+0x84>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2bc7      	cmp	r3, #199	@ 0xc7
 8007906:	d9f0      	bls.n	80078ea <USB_SetCurrentMode+0x2e>
 8007908:	e01a      	b.n	8007940 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d115      	bne.n	800793c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800791c:	200a      	movs	r0, #10
 800791e:	f7f9 fea7 	bl	8001670 <HAL_Delay>
      ms += 10U;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	330a      	adds	r3, #10
 8007926:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 f920 	bl	8008b6e <USB_GetMode>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <USB_SetCurrentMode+0x84>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2bc7      	cmp	r3, #199	@ 0xc7
 8007938:	d9f0      	bls.n	800791c <USB_SetCurrentMode+0x60>
 800793a:	e001      	b.n	8007940 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e005      	b.n	800794c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2bc8      	cmp	r3, #200	@ 0xc8
 8007944:	d101      	bne.n	800794a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e000      	b.n	800794c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007954:	b084      	sub	sp, #16
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800796e:	2300      	movs	r3, #0
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	e009      	b.n	8007988 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	3340      	adds	r3, #64	@ 0x40
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	2200      	movs	r2, #0
 8007980:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	3301      	adds	r3, #1
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2b0e      	cmp	r3, #14
 800798c:	d9f2      	bls.n	8007974 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800798e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007992:	2b00      	cmp	r3, #0
 8007994:	d11c      	bne.n	80079d0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079a4:	f043 0302 	orr.w	r3, r3, #2
 80079a8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80079ce:	e00b      	b.n	80079e8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079ee:	461a      	mov	r2, r3
 80079f0:	2300      	movs	r3, #0
 80079f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d10d      	bne.n	8007a18 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a04:	2100      	movs	r1, #0
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f968 	bl	8007cdc <USB_SetDevSpeed>
 8007a0c:	e008      	b.n	8007a20 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a0e:	2101      	movs	r1, #1
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f963 	bl	8007cdc <USB_SetDevSpeed>
 8007a16:	e003      	b.n	8007a20 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a18:	2103      	movs	r1, #3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f95e 	bl	8007cdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a20:	2110      	movs	r1, #16
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f8fa 	bl	8007c1c <USB_FlushTxFifo>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f924 	bl	8007c80 <USB_FlushRxFifo>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a48:	461a      	mov	r2, r3
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a54:	461a      	mov	r2, r3
 8007a56:	2300      	movs	r3, #0
 8007a58:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a60:	461a      	mov	r2, r3
 8007a62:	2300      	movs	r3, #0
 8007a64:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a66:	2300      	movs	r3, #0
 8007a68:	613b      	str	r3, [r7, #16]
 8007a6a:	e043      	b.n	8007af4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a82:	d118      	bne.n	8007ab6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a96:	461a      	mov	r2, r3
 8007a98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	e013      	b.n	8007ac8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aac:	461a      	mov	r2, r3
 8007aae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	e008      	b.n	8007ac8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007aec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	3301      	adds	r3, #1
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007af8:	461a      	mov	r2, r3
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d3b5      	bcc.n	8007a6c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b00:	2300      	movs	r3, #0
 8007b02:	613b      	str	r3, [r7, #16]
 8007b04:	e043      	b.n	8007b8e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b1c:	d118      	bne.n	8007b50 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b30:	461a      	mov	r2, r3
 8007b32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	e013      	b.n	8007b62 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b46:	461a      	mov	r2, r3
 8007b48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	e008      	b.n	8007b62 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6e:	461a      	mov	r2, r3
 8007b70:	2300      	movs	r3, #0
 8007b72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b80:	461a      	mov	r2, r3
 8007b82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	613b      	str	r3, [r7, #16]
 8007b8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b92:	461a      	mov	r2, r3
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d3b5      	bcc.n	8007b06 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007bba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	f043 0210 	orr.w	r2, r3, #16
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699a      	ldr	r2, [r3, #24]
 8007bd4:	4b10      	ldr	r3, [pc, #64]	@ (8007c18 <USB_DevInit+0x2c4>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007bdc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f043 0208 	orr.w	r2, r3, #8
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bf0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d107      	bne.n	8007c08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c00:	f043 0304 	orr.w	r3, r3, #4
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c14:	b004      	add	sp, #16
 8007c16:	4770      	bx	lr
 8007c18:	803c3800 	.word	0x803c3800

08007c1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c36:	d901      	bls.n	8007c3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e01b      	b.n	8007c74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	daf2      	bge.n	8007c2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	019b      	lsls	r3, r3, #6
 8007c4c:	f043 0220 	orr.w	r2, r3, #32
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c60:	d901      	bls.n	8007c66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e006      	b.n	8007c74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	d0f0      	beq.n	8007c54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c98:	d901      	bls.n	8007c9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e018      	b.n	8007cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	daf2      	bge.n	8007c8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2210      	movs	r2, #16
 8007cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cbc:	d901      	bls.n	8007cc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e006      	b.n	8007cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 0310 	and.w	r3, r3, #16
 8007cca:	2b10      	cmp	r3, #16
 8007ccc:	d0f0      	beq.n	8007cb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b087      	sub	sp, #28
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 0306 	and.w	r3, r3, #6
 8007d26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d102      	bne.n	8007d34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
 8007d32:	e00a      	b.n	8007d4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d002      	beq.n	8007d40 <USB_GetDevSpeed+0x32>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b06      	cmp	r3, #6
 8007d3e:	d102      	bne.n	8007d46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d40:	2302      	movs	r3, #2
 8007d42:	75fb      	strb	r3, [r7, #23]
 8007d44:	e001      	b.n	8007d4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d46:	230f      	movs	r3, #15
 8007d48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d13a      	bne.n	8007dea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d7a:	69da      	ldr	r2, [r3, #28]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f003 030f 	and.w	r3, r3, #15
 8007d84:	2101      	movs	r1, #1
 8007d86:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	68f9      	ldr	r1, [r7, #12]
 8007d8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d92:	4313      	orrs	r3, r2
 8007d94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d155      	bne.n	8007e58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	791b      	ldrb	r3, [r3, #4]
 8007dc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	059b      	lsls	r3, r3, #22
 8007dce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	0151      	lsls	r1, r2, #5
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	440a      	add	r2, r1
 8007dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	e036      	b.n	8007e58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007df0:	69da      	ldr	r2, [r3, #28]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	f003 030f 	and.w	r3, r3, #15
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007e00:	041b      	lsls	r3, r3, #16
 8007e02:	68f9      	ldr	r1, [r7, #12]
 8007e04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d11a      	bne.n	8007e58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	791b      	ldrb	r3, [r3, #4]
 8007e3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	4313      	orrs	r3, r2
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	0151      	lsls	r1, r2, #5
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	440a      	add	r2, r1
 8007e4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d161      	bne.n	8007f48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e9a:	d11f      	bne.n	8007edc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007eba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	0151      	lsls	r1, r2, #5
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	440a      	add	r2, r1
 8007ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ed6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007eda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	2101      	movs	r1, #1
 8007eee:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	43db      	mvns	r3, r3
 8007ef6:	68f9      	ldr	r1, [r7, #12]
 8007ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007efc:	4013      	ands	r3, r2
 8007efe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	f003 030f 	and.w	r3, r3, #15
 8007f10:	2101      	movs	r1, #1
 8007f12:	fa01 f303 	lsl.w	r3, r1, r3
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	43db      	mvns	r3, r3
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f20:	4013      	ands	r3, r2
 8007f22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	0159      	lsls	r1, r3, #5
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	440b      	add	r3, r1
 8007f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4b35      	ldr	r3, [pc, #212]	@ (8008018 <USB_DeactivateEndpoint+0x1b0>)
 8007f42:	4013      	ands	r3, r2
 8007f44:	600b      	str	r3, [r1, #0]
 8007f46:	e060      	b.n	800800a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f5e:	d11f      	bne.n	8007fa0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	0151      	lsls	r1, r2, #5
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	440a      	add	r2, r1
 8007f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb6:	041b      	lsls	r3, r3, #16
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	68f9      	ldr	r1, [r7, #12]
 8007fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fda:	041b      	lsls	r3, r3, #16
 8007fdc:	43db      	mvns	r3, r3
 8007fde:	68f9      	ldr	r1, [r7, #12]
 8007fe0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	0159      	lsls	r1, r3, #5
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	440b      	add	r3, r1
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008002:	4619      	mov	r1, r3
 8008004:	4b05      	ldr	r3, [pc, #20]	@ (800801c <USB_DeactivateEndpoint+0x1b4>)
 8008006:	4013      	ands	r3, r2
 8008008:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	ec337800 	.word	0xec337800
 800801c:	eff37800 	.word	0xeff37800

08008020 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08a      	sub	sp, #40	@ 0x28
 8008024:	af02      	add	r7, sp, #8
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	4613      	mov	r3, r2
 800802c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b01      	cmp	r3, #1
 800803e:	f040 817a 	bne.w	8008336 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d132      	bne.n	80080b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	0151      	lsls	r1, r2, #5
 800805c:	69fa      	ldr	r2, [r7, #28]
 800805e:	440a      	add	r2, r1
 8008060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008064:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008068:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800806c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	0151      	lsls	r1, r2, #5
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	440a      	add	r2, r1
 8008084:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008088:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800808c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	4413      	add	r3, r2
 8008096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	0151      	lsls	r1, r2, #5
 80080a0:	69fa      	ldr	r2, [r7, #28]
 80080a2:	440a      	add	r2, r1
 80080a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080a8:	0cdb      	lsrs	r3, r3, #19
 80080aa:	04db      	lsls	r3, r3, #19
 80080ac:	6113      	str	r3, [r2, #16]
 80080ae:	e092      	b.n	80081d6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	0151      	lsls	r1, r2, #5
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	440a      	add	r2, r1
 80080c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ca:	0cdb      	lsrs	r3, r3, #19
 80080cc:	04db      	lsls	r3, r3, #19
 80080ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80080ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80080f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d11a      	bne.n	8008130 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	429a      	cmp	r2, r3
 8008104:	d903      	bls.n	800810e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	0151      	lsls	r1, r2, #5
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	440a      	add	r2, r1
 8008124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008128:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800812c:	6113      	str	r3, [r2, #16]
 800812e:	e01b      	b.n	8008168 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6919      	ldr	r1, [r3, #16]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	440b      	add	r3, r1
 8008148:	1e59      	subs	r1, r3, #1
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008152:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008154:	4ba2      	ldr	r3, [pc, #648]	@ (80083e0 <USB_EPStartXfer+0x3c0>)
 8008156:	400b      	ands	r3, r1
 8008158:	69b9      	ldr	r1, [r7, #24]
 800815a:	0148      	lsls	r0, r1, #5
 800815c:	69f9      	ldr	r1, [r7, #28]
 800815e:	4401      	add	r1, r0
 8008160:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008164:	4313      	orrs	r3, r2
 8008166:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800817e:	69b9      	ldr	r1, [r7, #24]
 8008180:	0148      	lsls	r0, r1, #5
 8008182:	69f9      	ldr	r1, [r7, #28]
 8008184:	4401      	add	r1, r0
 8008186:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800818a:	4313      	orrs	r3, r2
 800818c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	791b      	ldrb	r3, [r3, #4]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d11f      	bne.n	80081d6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	0151      	lsls	r1, r2, #5
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	440a      	add	r2, r1
 80081ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081b0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80081b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	0151      	lsls	r1, r2, #5
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	440a      	add	r2, r1
 80081cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80081d6:	79fb      	ldrb	r3, [r7, #7]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d14b      	bne.n	8008274 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f0:	461a      	mov	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	791b      	ldrb	r3, [r3, #4]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d128      	bne.n	8008252 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800820c:	2b00      	cmp	r3, #0
 800820e:	d110      	bne.n	8008232 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	0151      	lsls	r1, r2, #5
 8008222:	69fa      	ldr	r2, [r7, #28]
 8008224:	440a      	add	r2, r1
 8008226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800822a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	e00f      	b.n	8008252 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800824c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008250:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800826c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008270:	6013      	str	r3, [r2, #0]
 8008272:	e165      	b.n	8008540 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	0151      	lsls	r1, r2, #5
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	440a      	add	r2, r1
 800828a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800828e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008292:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	791b      	ldrb	r3, [r3, #4]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d015      	beq.n	80082c8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 814d 	beq.w	8008540 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	f003 030f 	and.w	r3, r3, #15
 80082b6:	2101      	movs	r1, #1
 80082b8:	fa01 f303 	lsl.w	r3, r1, r3
 80082bc:	69f9      	ldr	r1, [r7, #28]
 80082be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082c2:	4313      	orrs	r3, r2
 80082c4:	634b      	str	r3, [r1, #52]	@ 0x34
 80082c6:	e13b      	b.n	8008540 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d110      	bne.n	80082fa <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	69fa      	ldr	r2, [r7, #28]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	e00f      	b.n	800831a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	0151      	lsls	r1, r2, #5
 800830c:	69fa      	ldr	r2, [r7, #28]
 800830e:	440a      	add	r2, r1
 8008310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008318:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	68d9      	ldr	r1, [r3, #12]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	b298      	uxth	r0, r3
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	4603      	mov	r3, r0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 f9b8 	bl	80086a4 <USB_WritePacket>
 8008334:	e104      	b.n	8008540 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	0151      	lsls	r1, r2, #5
 8008348:	69fa      	ldr	r2, [r7, #28]
 800834a:	440a      	add	r2, r1
 800834c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008350:	0cdb      	lsrs	r3, r3, #19
 8008352:	04db      	lsls	r3, r3, #19
 8008354:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	0151      	lsls	r1, r2, #5
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	440a      	add	r2, r1
 800836c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008370:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008374:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008378:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d131      	bne.n	80083e4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a4:	691a      	ldr	r2, [r3, #16]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083ae:	69b9      	ldr	r1, [r7, #24]
 80083b0:	0148      	lsls	r0, r1, #5
 80083b2:	69f9      	ldr	r1, [r7, #28]
 80083b4:	4401      	add	r1, r0
 80083b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083ba:	4313      	orrs	r3, r2
 80083bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083dc:	6113      	str	r3, [r2, #16]
 80083de:	e061      	b.n	80084a4 <USB_EPStartXfer+0x484>
 80083e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d123      	bne.n	8008434 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f8:	691a      	ldr	r2, [r3, #16]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008402:	69b9      	ldr	r1, [r7, #24]
 8008404:	0148      	lsls	r0, r1, #5
 8008406:	69f9      	ldr	r1, [r7, #28]
 8008408:	4401      	add	r1, r0
 800840a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800840e:	4313      	orrs	r3, r2
 8008410:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	0151      	lsls	r1, r2, #5
 8008424:	69fa      	ldr	r2, [r7, #28]
 8008426:	440a      	add	r2, r1
 8008428:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800842c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008430:	6113      	str	r3, [r2, #16]
 8008432:	e037      	b.n	80084a4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	691a      	ldr	r2, [r3, #16]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	4413      	add	r3, r2
 800843e:	1e5a      	subs	r2, r3, #1
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	fbb2 f3f3 	udiv	r3, r2, r3
 8008448:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	8afa      	ldrh	r2, [r7, #22]
 8008450:	fb03 f202 	mul.w	r2, r3, r2
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008464:	691a      	ldr	r2, [r3, #16]
 8008466:	8afb      	ldrh	r3, [r7, #22]
 8008468:	04d9      	lsls	r1, r3, #19
 800846a:	4b38      	ldr	r3, [pc, #224]	@ (800854c <USB_EPStartXfer+0x52c>)
 800846c:	400b      	ands	r3, r1
 800846e:	69b9      	ldr	r1, [r7, #24]
 8008470:	0148      	lsls	r0, r1, #5
 8008472:	69f9      	ldr	r1, [r7, #28]
 8008474:	4401      	add	r1, r0
 8008476:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800847a:	4313      	orrs	r3, r2
 800847c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800848a:	691a      	ldr	r2, [r3, #16]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008494:	69b9      	ldr	r1, [r7, #24]
 8008496:	0148      	lsls	r0, r1, #5
 8008498:	69f9      	ldr	r1, [r7, #28]
 800849a:	4401      	add	r1, r0
 800849c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80084a0:	4313      	orrs	r3, r2
 80084a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d10d      	bne.n	80084c6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d009      	beq.n	80084c6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	68d9      	ldr	r1, [r3, #12]
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c2:	460a      	mov	r2, r1
 80084c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	791b      	ldrb	r3, [r3, #4]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d128      	bne.n	8008520 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d110      	bne.n	8008500 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	0151      	lsls	r1, r2, #5
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	440a      	add	r2, r1
 80084f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	e00f      	b.n	8008520 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	0151      	lsls	r1, r2, #5
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	440a      	add	r2, r1
 8008516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800851a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800851e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	440a      	add	r2, r1
 8008536:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800853a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800853e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3720      	adds	r7, #32
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	1ff80000 	.word	0x1ff80000

08008550 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	785b      	ldrb	r3, [r3, #1]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d14a      	bne.n	8008604 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008582:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008586:	f040 8086 	bne.w	8008696 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	7812      	ldrb	r2, [r2, #0]
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	7812      	ldrb	r2, [r2, #0]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3301      	adds	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80085de:	4293      	cmp	r3, r2
 80085e0:	d902      	bls.n	80085e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	75fb      	strb	r3, [r7, #23]
          break;
 80085e6:	e056      	b.n	8008696 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008600:	d0e7      	beq.n	80085d2 <USB_EPStopXfer+0x82>
 8008602:	e048      	b.n	8008696 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800861c:	d13b      	bne.n	8008696 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	7812      	ldrb	r2, [r2, #0]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	440a      	add	r2, r1
 8008638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800863c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008640:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	7812      	ldrb	r2, [r2, #0]
 8008656:	0151      	lsls	r1, r2, #5
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	440a      	add	r2, r1
 800865c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008664:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3301      	adds	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008672:	4293      	cmp	r3, r2
 8008674:	d902      	bls.n	800867c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	75fb      	strb	r3, [r7, #23]
          break;
 800867a:	e00c      	b.n	8008696 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	4413      	add	r3, r2
 8008686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008694:	d0e7      	beq.n	8008666 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008696:	7dfb      	ldrb	r3, [r7, #23]
}
 8008698:	4618      	mov	r0, r3
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b089      	sub	sp, #36	@ 0x24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4611      	mov	r1, r2
 80086b0:	461a      	mov	r2, r3
 80086b2:	460b      	mov	r3, r1
 80086b4:	71fb      	strb	r3, [r7, #7]
 80086b6:	4613      	mov	r3, r2
 80086b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80086c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d123      	bne.n	8008712 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086ca:	88bb      	ldrh	r3, [r7, #4]
 80086cc:	3303      	adds	r3, #3
 80086ce:	089b      	lsrs	r3, r3, #2
 80086d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086d2:	2300      	movs	r3, #0
 80086d4:	61bb      	str	r3, [r7, #24]
 80086d6:	e018      	b.n	800870a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	031a      	lsls	r2, r3, #12
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086e4:	461a      	mov	r2, r3
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	3301      	adds	r3, #1
 80086f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	3301      	adds	r3, #1
 80086f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	3301      	adds	r3, #1
 80086fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	3301      	adds	r3, #1
 8008702:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	3301      	adds	r3, #1
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	429a      	cmp	r2, r3
 8008710:	d3e2      	bcc.n	80086d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3724      	adds	r7, #36	@ 0x24
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008720:	b480      	push	{r7}
 8008722:	b08b      	sub	sp, #44	@ 0x2c
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008736:	88fb      	ldrh	r3, [r7, #6]
 8008738:	089b      	lsrs	r3, r3, #2
 800873a:	b29b      	uxth	r3, r3
 800873c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800873e:	88fb      	ldrh	r3, [r7, #6]
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008746:	2300      	movs	r3, #0
 8008748:	623b      	str	r3, [r7, #32]
 800874a:	e014      	b.n	8008776 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	601a      	str	r2, [r3, #0]
    pDest++;
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	3301      	adds	r3, #1
 800875c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008760:	3301      	adds	r3, #1
 8008762:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008766:	3301      	adds	r3, #1
 8008768:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876c:	3301      	adds	r3, #1
 800876e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	3301      	adds	r3, #1
 8008774:	623b      	str	r3, [r7, #32]
 8008776:	6a3a      	ldr	r2, [r7, #32]
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	429a      	cmp	r2, r3
 800877c:	d3e6      	bcc.n	800874c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800877e:	8bfb      	ldrh	r3, [r7, #30]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01e      	beq.n	80087c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800878e:	461a      	mov	r2, r3
 8008790:	f107 0310 	add.w	r3, r7, #16
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	fa22 f303 	lsr.w	r3, r2, r3
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	701a      	strb	r2, [r3, #0]
      i++;
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	3301      	adds	r3, #1
 80087ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b2:	3301      	adds	r3, #1
 80087b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80087b6:	8bfb      	ldrh	r3, [r7, #30]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80087bc:	8bfb      	ldrh	r3, [r7, #30]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1ea      	bne.n	8008798 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	372c      	adds	r7, #44	@ 0x2c
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	785b      	ldrb	r3, [r3, #1]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d12c      	bne.n	8008846 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	db12      	blt.n	8008824 <USB_EPSetStall+0x54>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00f      	beq.n	8008824 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	440a      	add	r2, r1
 800881a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800881e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008822:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	440a      	add	r2, r1
 800883a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800883e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	e02b      	b.n	800889e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	4413      	add	r3, r2
 800884e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	db12      	blt.n	800887e <USB_EPSetStall+0xae>
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00f      	beq.n	800887e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	440a      	add	r2, r1
 8008874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008878:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800887c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	440a      	add	r2, r1
 8008894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008898:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800889c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	785b      	ldrb	r3, [r3, #1]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d128      	bne.n	800891a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	791b      	ldrb	r3, [r3, #4]
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d003      	beq.n	80088f8 <USB_EPClearStall+0x4c>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	791b      	ldrb	r3, [r3, #4]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d138      	bne.n	800896a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	0151      	lsls	r1, r2, #5
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	440a      	add	r2, r1
 800890e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	e027      	b.n	800896a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	440a      	add	r2, r1
 8008930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008934:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008938:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	791b      	ldrb	r3, [r3, #4]
 800893e:	2b03      	cmp	r3, #3
 8008940:	d003      	beq.n	800894a <USB_EPClearStall+0x9e>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	791b      	ldrb	r3, [r3, #4]
 8008946:	2b02      	cmp	r3, #2
 8008948:	d10f      	bne.n	800896a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	440a      	add	r2, r1
 8008960:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008968:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008996:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800899a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80089ac:	68f9      	ldr	r1, [r7, #12]
 80089ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089b2:	4313      	orrs	r3, r2
 80089b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089de:	f023 0303 	bic.w	r3, r3, #3
 80089e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089f2:	f023 0302 	bic.w	r3, r3, #2
 80089f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b085      	sub	sp, #20
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008a20:	f023 0303 	bic.w	r3, r3, #3
 8008a24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a34:	f043 0302 	orr.w	r3, r3, #2
 8008a38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a60:	68fb      	ldr	r3, [r7, #12]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b085      	sub	sp, #20
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	0c1b      	lsrs	r3, r3, #16
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b085      	sub	sp, #20
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	b29b      	uxth	r3, r3
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b085      	sub	sp, #20
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4013      	ands	r3, r2
 8008b02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b04:	68bb      	ldr	r3, [r7, #8]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b087      	sub	sp, #28
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b36:	78fb      	ldrb	r3, [r7, #3]
 8008b38:	f003 030f 	and.w	r3, r3, #15
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b42:	01db      	lsls	r3, r3, #7
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b60:	68bb      	ldr	r3, [r7, #8]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	371c      	adds	r7, #28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ba4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008ba8:	f023 0307 	bic.w	r3, r3, #7
 8008bac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	333c      	adds	r3, #60	@ 0x3c
 8008be6:	3304      	adds	r3, #4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	4a26      	ldr	r2, [pc, #152]	@ (8008c88 <USB_EP0_OutStart+0xb8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d90a      	bls.n	8008c0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c04:	d101      	bne.n	8008c0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	e037      	b.n	8008c7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c10:	461a      	mov	r2, r3
 8008c12:	2300      	movs	r3, #0
 8008c14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c38:	f043 0318 	orr.w	r3, r3, #24
 8008c3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c4c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008c50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c52:	7afb      	ldrb	r3, [r7, #11]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d10f      	bne.n	8008c78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c72:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	4f54300a 	.word	0x4f54300a

08008c8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ca4:	d901      	bls.n	8008caa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e01b      	b.n	8008ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	daf2      	bge.n	8008c98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	f043 0201 	orr.w	r2, r3, #1
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cce:	d901      	bls.n	8008cd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e006      	b.n	8008ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d0f0      	beq.n	8008cc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008cf4:	4904      	ldr	r1, [pc, #16]	@ (8008d08 <MX_FATFS_Init+0x18>)
 8008cf6:	4805      	ldr	r0, [pc, #20]	@ (8008d0c <MX_FATFS_Init+0x1c>)
 8008cf8:	f002 f9e6 	bl	800b0c8 <FATFS_LinkDriver>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4b03      	ldr	r3, [pc, #12]	@ (8008d10 <MX_FATFS_Init+0x20>)
 8008d02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d04:	bf00      	nop
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	200003dc 	.word	0x200003dc
 8008d0c:	0800c640 	.word	0x0800c640
 8008d10:	200003d8 	.word	0x200003d8

08008d14 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008d1e:	f000 f8ac 	bl	8008e7a <BSP_SD_IsDetected>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d001      	beq.n	8008d2c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e012      	b.n	8008d52 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008d2c:	480b      	ldr	r0, [pc, #44]	@ (8008d5c <BSP_SD_Init+0x48>)
 8008d2e:	f7fb fe75 	bl	8004a1c <HAL_SD_Init>
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d109      	bne.n	8008d50 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008d3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008d40:	4806      	ldr	r0, [pc, #24]	@ (8008d5c <BSP_SD_Init+0x48>)
 8008d42:	f7fc fdef 	bl	8005924 <HAL_SD_ConfigWideBusOperation>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008d50:	79fb      	ldrb	r3, [r7, #7]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	200001a0 	.word	0x200001a0

08008d60 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b088      	sub	sp, #32
 8008d64:	af02      	add	r7, sp, #8
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	68f9      	ldr	r1, [r7, #12]
 8008d7c:	4806      	ldr	r0, [pc, #24]	@ (8008d98 <BSP_SD_ReadBlocks+0x38>)
 8008d7e:	f7fb fefd 	bl	8004b7c <HAL_SD_ReadBlocks>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200001a0 	.word	0x200001a0

08008d9c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	68f9      	ldr	r1, [r7, #12]
 8008db8:	4806      	ldr	r0, [pc, #24]	@ (8008dd4 <BSP_SD_WriteBlocks+0x38>)
 8008dba:	f7fc f8c5 	bl	8004f48 <HAL_SD_WriteBlocks>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	200001a0 	.word	0x200001a0

08008dd8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008ddc:	4805      	ldr	r0, [pc, #20]	@ (8008df4 <BSP_SD_GetCardState+0x1c>)
 8008dde:	f7fc fe3b 	bl	8005a58 <HAL_SD_GetCardState>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	bf14      	ite	ne
 8008de8:	2301      	movne	r3, #1
 8008dea:	2300      	moveq	r3, #0
 8008dec:	b2db      	uxtb	r3, r3
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	200001a0 	.word	0x200001a0

08008df8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	4803      	ldr	r0, [pc, #12]	@ (8008e10 <BSP_SD_GetCardInfo+0x18>)
 8008e04:	f7fc fd62 	bl	80058cc <HAL_SD_GetCardInfo>
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	200001a0 	.word	0x200001a0

08008e14 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008e1c:	f000 f818 	bl	8008e50 <BSP_SD_AbortCallback>
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008e30:	f000 f815 	bl	8008e5e <BSP_SD_WriteCpltCallback>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008e44:	f000 f812 	bl	8008e6c <BSP_SD_ReadCpltCallback>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008e50:	b480      	push	{r7}
 8008e52:	af00      	add	r7, sp, #0

}
 8008e54:	bf00      	nop
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	af00      	add	r7, sp, #0

}
 8008e62:	bf00      	nop
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0

}
 8008e70:	bf00      	nop
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008e80:	2301      	movs	r3, #1
 8008e82:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008e84:	f000 f80c 	bl	8008ea0 <BSP_PlatformIsDetected>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	b2db      	uxtb	r3, r3
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008eaa:	2101      	movs	r1, #1
 8008eac:	4806      	ldr	r0, [pc, #24]	@ (8008ec8 <BSP_PlatformIsDetected+0x28>)
 8008eae:	f7f9 f9d9 	bl	8002264 <HAL_GPIO_ReadPin>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	40020800 	.word	0x40020800

08008ecc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8008f04 <SD_CheckStatus+0x38>)
 8008ed8:	2201      	movs	r2, #1
 8008eda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008edc:	f7ff ff7c 	bl	8008dd8 <BSP_SD_GetCardState>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d107      	bne.n	8008ef6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008ee6:	4b07      	ldr	r3, [pc, #28]	@ (8008f04 <SD_CheckStatus+0x38>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	f023 0301 	bic.w	r3, r3, #1
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	4b04      	ldr	r3, [pc, #16]	@ (8008f04 <SD_CheckStatus+0x38>)
 8008ef4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008ef6:	4b03      	ldr	r3, [pc, #12]	@ (8008f04 <SD_CheckStatus+0x38>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	b2db      	uxtb	r3, r3
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20000009 	.word	0x20000009

08008f08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008f12:	4b0b      	ldr	r3, [pc, #44]	@ (8008f40 <SD_initialize+0x38>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008f18:	f7ff fefc 	bl	8008d14 <BSP_SD_Init>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d107      	bne.n	8008f32 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff ffd1 	bl	8008ecc <SD_CheckStatus>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4b04      	ldr	r3, [pc, #16]	@ (8008f40 <SD_initialize+0x38>)
 8008f30:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008f32:	4b03      	ldr	r3, [pc, #12]	@ (8008f40 <SD_initialize+0x38>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	b2db      	uxtb	r3, r3
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	20000009 	.word	0x20000009

08008f44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7ff ffbb 	bl	8008ecc <SD_CheckStatus>
 8008f56:	4603      	mov	r3, r0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	607a      	str	r2, [r7, #4]
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008f74:	f04f 33ff 	mov.w	r3, #4294967295
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	68b8      	ldr	r0, [r7, #8]
 8008f7e:	f7ff feef 	bl	8008d60 <BSP_SD_ReadBlocks>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d107      	bne.n	8008f98 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008f88:	bf00      	nop
 8008f8a:	f7ff ff25 	bl	8008dd8 <BSP_SD_GetCardState>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1fa      	bne.n	8008f8a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b086      	sub	sp, #24
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
 8008fae:	4603      	mov	r3, r0
 8008fb0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	68b8      	ldr	r0, [r7, #8]
 8008fc0:	f7ff feec 	bl	8008d9c <BSP_SD_WriteBlocks>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d107      	bne.n	8008fda <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008fca:	bf00      	nop
 8008fcc:	f7ff ff04 	bl	8008dd8 <BSP_SD_GetCardState>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1fa      	bne.n	8008fcc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08c      	sub	sp, #48	@ 0x30
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	603a      	str	r2, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008ffa:	4b25      	ldr	r3, [pc, #148]	@ (8009090 <SD_ioctl+0xac>)
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <SD_ioctl+0x28>
 8009008:	2303      	movs	r3, #3
 800900a:	e03c      	b.n	8009086 <SD_ioctl+0xa2>

  switch (cmd)
 800900c:	79bb      	ldrb	r3, [r7, #6]
 800900e:	2b03      	cmp	r3, #3
 8009010:	d834      	bhi.n	800907c <SD_ioctl+0x98>
 8009012:	a201      	add	r2, pc, #4	@ (adr r2, 8009018 <SD_ioctl+0x34>)
 8009014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009018:	08009029 	.word	0x08009029
 800901c:	08009031 	.word	0x08009031
 8009020:	08009049 	.word	0x08009049
 8009024:	08009063 	.word	0x08009063
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800902e:	e028      	b.n	8009082 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009030:	f107 030c 	add.w	r3, r7, #12
 8009034:	4618      	mov	r0, r3
 8009036:	f7ff fedf 	bl	8008df8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800903a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009046:	e01c      	b.n	8009082 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009048:	f107 030c 	add.w	r3, r7, #12
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff fed3 	bl	8008df8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009054:	b29a      	uxth	r2, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009060:	e00f      	b.n	8009082 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009062:	f107 030c 	add.w	r3, r7, #12
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff fec6 	bl	8008df8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800906c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906e:	0a5a      	lsrs	r2, r3, #9
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800907a:	e002      	b.n	8009082 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800907c:	2304      	movs	r3, #4
 800907e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009082:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009086:	4618      	mov	r0, r3
 8009088:	3730      	adds	r7, #48	@ 0x30
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20000009 	.word	0x20000009

08009094 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8009098:	bf00      	nop
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80090b4:	f002 fd8c 	bl	800bbd0 <USBD_static_malloc>
 80090b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d109      	bne.n	80090d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	32b0      	adds	r2, #176	@ 0xb0
 80090ca:	2100      	movs	r1, #0
 80090cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80090d0:	2302      	movs	r3, #2
 80090d2:	e0d4      	b.n	800927e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80090d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80090d8:	2100      	movs	r1, #0
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f003 f862 	bl	800c1a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	32b0      	adds	r2, #176	@ 0xb0
 80090ea:	68f9      	ldr	r1, [r7, #12]
 80090ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	32b0      	adds	r2, #176	@ 0xb0
 80090fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	7c1b      	ldrb	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d138      	bne.n	800917e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800910c:	4b5e      	ldr	r3, [pc, #376]	@ (8009288 <USBD_CDC_Init+0x1e4>)
 800910e:	7819      	ldrb	r1, [r3, #0]
 8009110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009114:	2202      	movs	r2, #2
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f002 fc37 	bl	800b98a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800911c:	4b5a      	ldr	r3, [pc, #360]	@ (8009288 <USBD_CDC_Init+0x1e4>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	f003 020f 	and.w	r2, r3, #15
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	4613      	mov	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	440b      	add	r3, r1
 8009130:	3324      	adds	r3, #36	@ 0x24
 8009132:	2201      	movs	r2, #1
 8009134:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009136:	4b55      	ldr	r3, [pc, #340]	@ (800928c <USBD_CDC_Init+0x1e8>)
 8009138:	7819      	ldrb	r1, [r3, #0]
 800913a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800913e:	2202      	movs	r2, #2
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f002 fc22 	bl	800b98a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009146:	4b51      	ldr	r3, [pc, #324]	@ (800928c <USBD_CDC_Init+0x1e8>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	f003 020f 	and.w	r2, r3, #15
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800915e:	2201      	movs	r2, #1
 8009160:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009162:	4b4b      	ldr	r3, [pc, #300]	@ (8009290 <USBD_CDC_Init+0x1ec>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 020f 	and.w	r2, r3, #15
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	4613      	mov	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	440b      	add	r3, r1
 8009176:	3326      	adds	r3, #38	@ 0x26
 8009178:	2210      	movs	r2, #16
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e035      	b.n	80091ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800917e:	4b42      	ldr	r3, [pc, #264]	@ (8009288 <USBD_CDC_Init+0x1e4>)
 8009180:	7819      	ldrb	r1, [r3, #0]
 8009182:	2340      	movs	r3, #64	@ 0x40
 8009184:	2202      	movs	r2, #2
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f002 fbff 	bl	800b98a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800918c:	4b3e      	ldr	r3, [pc, #248]	@ (8009288 <USBD_CDC_Init+0x1e4>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 020f 	and.w	r2, r3, #15
 8009194:	6879      	ldr	r1, [r7, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	440b      	add	r3, r1
 80091a0:	3324      	adds	r3, #36	@ 0x24
 80091a2:	2201      	movs	r2, #1
 80091a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091a6:	4b39      	ldr	r3, [pc, #228]	@ (800928c <USBD_CDC_Init+0x1e8>)
 80091a8:	7819      	ldrb	r1, [r3, #0]
 80091aa:	2340      	movs	r3, #64	@ 0x40
 80091ac:	2202      	movs	r2, #2
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f002 fbeb 	bl	800b98a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80091b4:	4b35      	ldr	r3, [pc, #212]	@ (800928c <USBD_CDC_Init+0x1e8>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f003 020f 	and.w	r2, r3, #15
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	440b      	add	r3, r1
 80091c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80091cc:	2201      	movs	r2, #1
 80091ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091d0:	4b2f      	ldr	r3, [pc, #188]	@ (8009290 <USBD_CDC_Init+0x1ec>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 020f 	and.w	r2, r3, #15
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	440b      	add	r3, r1
 80091e4:	3326      	adds	r3, #38	@ 0x26
 80091e6:	2210      	movs	r2, #16
 80091e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091ea:	4b29      	ldr	r3, [pc, #164]	@ (8009290 <USBD_CDC_Init+0x1ec>)
 80091ec:	7819      	ldrb	r1, [r3, #0]
 80091ee:	2308      	movs	r3, #8
 80091f0:	2203      	movs	r2, #3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f002 fbc9 	bl	800b98a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80091f8:	4b25      	ldr	r3, [pc, #148]	@ (8009290 <USBD_CDC_Init+0x1ec>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	f003 020f 	and.w	r2, r3, #15
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	3324      	adds	r3, #36	@ 0x24
 800920e:	2201      	movs	r2, #1
 8009210:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	33b0      	adds	r3, #176	@ 0xb0
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009248:	2302      	movs	r3, #2
 800924a:	e018      	b.n	800927e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	7c1b      	ldrb	r3, [r3, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009254:	4b0d      	ldr	r3, [pc, #52]	@ (800928c <USBD_CDC_Init+0x1e8>)
 8009256:	7819      	ldrb	r1, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800925e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f002 fc80 	bl	800bb68 <USBD_LL_PrepareReceive>
 8009268:	e008      	b.n	800927c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800926a:	4b08      	ldr	r3, [pc, #32]	@ (800928c <USBD_CDC_Init+0x1e8>)
 800926c:	7819      	ldrb	r1, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009274:	2340      	movs	r3, #64	@ 0x40
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f002 fc76 	bl	800bb68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000093 	.word	0x20000093
 800928c:	20000094 	.word	0x20000094
 8009290:	20000095 	.word	0x20000095

08009294 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80092a0:	4b3a      	ldr	r3, [pc, #232]	@ (800938c <USBD_CDC_DeInit+0xf8>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f002 fb95 	bl	800b9d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80092ac:	4b37      	ldr	r3, [pc, #220]	@ (800938c <USBD_CDC_DeInit+0xf8>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	f003 020f 	and.w	r2, r3, #15
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	4613      	mov	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	440b      	add	r3, r1
 80092c0:	3324      	adds	r3, #36	@ 0x24
 80092c2:	2200      	movs	r2, #0
 80092c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80092c6:	4b32      	ldr	r3, [pc, #200]	@ (8009390 <USBD_CDC_DeInit+0xfc>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f002 fb82 	bl	800b9d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80092d2:	4b2f      	ldr	r3, [pc, #188]	@ (8009390 <USBD_CDC_DeInit+0xfc>)
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	f003 020f 	and.w	r2, r3, #15
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	440b      	add	r3, r1
 80092e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092ea:	2200      	movs	r2, #0
 80092ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80092ee:	4b29      	ldr	r3, [pc, #164]	@ (8009394 <USBD_CDC_DeInit+0x100>)
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f002 fb6e 	bl	800b9d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80092fa:	4b26      	ldr	r3, [pc, #152]	@ (8009394 <USBD_CDC_DeInit+0x100>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f003 020f 	and.w	r2, r3, #15
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	3324      	adds	r3, #36	@ 0x24
 8009310:	2200      	movs	r2, #0
 8009312:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009314:	4b1f      	ldr	r3, [pc, #124]	@ (8009394 <USBD_CDC_DeInit+0x100>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	f003 020f 	and.w	r2, r3, #15
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	440b      	add	r3, r1
 8009328:	3326      	adds	r3, #38	@ 0x26
 800932a:	2200      	movs	r2, #0
 800932c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	32b0      	adds	r2, #176	@ 0xb0
 8009338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d01f      	beq.n	8009380 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	33b0      	adds	r3, #176	@ 0xb0
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	32b0      	adds	r2, #176	@ 0xb0
 800935e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009362:	4618      	mov	r0, r3
 8009364:	f002 fc42 	bl	800bbec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	32b0      	adds	r2, #176	@ 0xb0
 8009372:	2100      	movs	r1, #0
 8009374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20000093 	.word	0x20000093
 8009390:	20000094 	.word	0x20000094
 8009394:	20000095 	.word	0x20000095

08009398 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	32b0      	adds	r2, #176	@ 0xb0
 80093ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e0bf      	b.n	8009548 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d050      	beq.n	8009476 <USBD_CDC_Setup+0xde>
 80093d4:	2b20      	cmp	r3, #32
 80093d6:	f040 80af 	bne.w	8009538 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	88db      	ldrh	r3, [r3, #6]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d03a      	beq.n	8009458 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	b25b      	sxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	da1b      	bge.n	8009424 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	33b0      	adds	r3, #176	@ 0xb0
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009402:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	88d2      	ldrh	r2, [r2, #6]
 8009408:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	88db      	ldrh	r3, [r3, #6]
 800940e:	2b07      	cmp	r3, #7
 8009410:	bf28      	it	cs
 8009412:	2307      	movcs	r3, #7
 8009414:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	89fa      	ldrh	r2, [r7, #14]
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 fd87 	bl	800af30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009422:	e090      	b.n	8009546 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	785a      	ldrb	r2, [r3, #1]
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	88db      	ldrh	r3, [r3, #6]
 8009432:	2b3f      	cmp	r3, #63	@ 0x3f
 8009434:	d803      	bhi.n	800943e <USBD_CDC_Setup+0xa6>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	88db      	ldrh	r3, [r3, #6]
 800943a:	b2da      	uxtb	r2, r3
 800943c:	e000      	b.n	8009440 <USBD_CDC_Setup+0xa8>
 800943e:	2240      	movs	r2, #64	@ 0x40
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009446:	6939      	ldr	r1, [r7, #16]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800944e:	461a      	mov	r2, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f001 fd99 	bl	800af88 <USBD_CtlPrepareRx>
      break;
 8009456:	e076      	b.n	8009546 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	33b0      	adds	r3, #176	@ 0xb0
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	7850      	ldrb	r0, [r2, #1]
 800946e:	2200      	movs	r2, #0
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	4798      	blx	r3
      break;
 8009474:	e067      	b.n	8009546 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	785b      	ldrb	r3, [r3, #1]
 800947a:	2b0b      	cmp	r3, #11
 800947c:	d851      	bhi.n	8009522 <USBD_CDC_Setup+0x18a>
 800947e:	a201      	add	r2, pc, #4	@ (adr r2, 8009484 <USBD_CDC_Setup+0xec>)
 8009480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009484:	080094b5 	.word	0x080094b5
 8009488:	08009531 	.word	0x08009531
 800948c:	08009523 	.word	0x08009523
 8009490:	08009523 	.word	0x08009523
 8009494:	08009523 	.word	0x08009523
 8009498:	08009523 	.word	0x08009523
 800949c:	08009523 	.word	0x08009523
 80094a0:	08009523 	.word	0x08009523
 80094a4:	08009523 	.word	0x08009523
 80094a8:	08009523 	.word	0x08009523
 80094ac:	080094df 	.word	0x080094df
 80094b0:	08009509 	.word	0x08009509
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d107      	bne.n	80094d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094c0:	f107 030a 	add.w	r3, r7, #10
 80094c4:	2202      	movs	r2, #2
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 fd31 	bl	800af30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094ce:	e032      	b.n	8009536 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f001 fcbb 	bl	800ae4e <USBD_CtlError>
            ret = USBD_FAIL;
 80094d8:	2303      	movs	r3, #3
 80094da:	75fb      	strb	r3, [r7, #23]
          break;
 80094dc:	e02b      	b.n	8009536 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d107      	bne.n	80094fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80094ea:	f107 030d 	add.w	r3, r7, #13
 80094ee:	2201      	movs	r2, #1
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 fd1c 	bl	800af30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094f8:	e01d      	b.n	8009536 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 fca6 	bl	800ae4e <USBD_CtlError>
            ret = USBD_FAIL;
 8009502:	2303      	movs	r3, #3
 8009504:	75fb      	strb	r3, [r7, #23]
          break;
 8009506:	e016      	b.n	8009536 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b03      	cmp	r3, #3
 8009512:	d00f      	beq.n	8009534 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 fc99 	bl	800ae4e <USBD_CtlError>
            ret = USBD_FAIL;
 800951c:	2303      	movs	r3, #3
 800951e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009520:	e008      	b.n	8009534 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fc92 	bl	800ae4e <USBD_CtlError>
          ret = USBD_FAIL;
 800952a:	2303      	movs	r3, #3
 800952c:	75fb      	strb	r3, [r7, #23]
          break;
 800952e:	e002      	b.n	8009536 <USBD_CDC_Setup+0x19e>
          break;
 8009530:	bf00      	nop
 8009532:	e008      	b.n	8009546 <USBD_CDC_Setup+0x1ae>
          break;
 8009534:	bf00      	nop
      }
      break;
 8009536:	e006      	b.n	8009546 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 fc87 	bl	800ae4e <USBD_CtlError>
      ret = USBD_FAIL;
 8009540:	2303      	movs	r3, #3
 8009542:	75fb      	strb	r3, [r7, #23]
      break;
 8009544:	bf00      	nop
  }

  return (uint8_t)ret;
 8009546:	7dfb      	ldrb	r3, [r7, #23]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009562:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	32b0      	adds	r2, #176	@ 0xb0
 800956e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009576:	2303      	movs	r3, #3
 8009578:	e065      	b.n	8009646 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	32b0      	adds	r2, #176	@ 0xb0
 8009584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009588:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	f003 020f 	and.w	r2, r3, #15
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	3318      	adds	r3, #24
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d02f      	beq.n	8009604 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	f003 020f 	and.w	r2, r3, #15
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	440b      	add	r3, r1
 80095b6:	3318      	adds	r3, #24
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	f003 010f 	and.w	r1, r3, #15
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	460b      	mov	r3, r1
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	440b      	add	r3, r1
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4403      	add	r3, r0
 80095cc:	331c      	adds	r3, #28
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80095d4:	fb01 f303 	mul.w	r3, r1, r3
 80095d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d112      	bne.n	8009604 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80095de:	78fb      	ldrb	r3, [r7, #3]
 80095e0:	f003 020f 	and.w	r2, r3, #15
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	440b      	add	r3, r1
 80095f0:	3318      	adds	r3, #24
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095f6:	78f9      	ldrb	r1, [r7, #3]
 80095f8:	2300      	movs	r3, #0
 80095fa:	2200      	movs	r2, #0
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f002 fa92 	bl	800bb26 <USBD_LL_Transmit>
 8009602:	e01f      	b.n	8009644 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2200      	movs	r2, #0
 8009608:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	33b0      	adds	r3, #176	@ 0xb0
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d010      	beq.n	8009644 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	33b0      	adds	r3, #176	@ 0xb0
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009640:	78fa      	ldrb	r2, [r7, #3]
 8009642:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	32b0      	adds	r2, #176	@ 0xb0
 8009664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009668:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	32b0      	adds	r2, #176	@ 0xb0
 8009674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800967c:	2303      	movs	r3, #3
 800967e:	e01a      	b.n	80096b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f002 fa90 	bl	800bbaa <USBD_LL_GetRxDataSize>
 800968a:	4602      	mov	r2, r0
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	33b0      	adds	r3, #176	@ 0xb0
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80096b0:	4611      	mov	r1, r2
 80096b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	32b0      	adds	r2, #176	@ 0xb0
 80096d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096dc:	2303      	movs	r3, #3
 80096de:	e024      	b.n	800972a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	33b0      	adds	r3, #176	@ 0xb0
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d019      	beq.n	8009728 <USBD_CDC_EP0_RxReady+0x6a>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80096fa:	2bff      	cmp	r3, #255	@ 0xff
 80096fc:	d014      	beq.n	8009728 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	33b0      	adds	r3, #176	@ 0xb0
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009716:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800971e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	22ff      	movs	r2, #255	@ 0xff
 8009724:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800973c:	2182      	movs	r1, #130	@ 0x82
 800973e:	4818      	ldr	r0, [pc, #96]	@ (80097a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009740:	f000 fd4f 	bl	800a1e2 <USBD_GetEpDesc>
 8009744:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009746:	2101      	movs	r1, #1
 8009748:	4815      	ldr	r0, [pc, #84]	@ (80097a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800974a:	f000 fd4a 	bl	800a1e2 <USBD_GetEpDesc>
 800974e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009750:	2181      	movs	r1, #129	@ 0x81
 8009752:	4813      	ldr	r0, [pc, #76]	@ (80097a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009754:	f000 fd45 	bl	800a1e2 <USBD_GetEpDesc>
 8009758:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2210      	movs	r2, #16
 8009764:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2200      	movs	r2, #0
 8009770:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009774:	711a      	strb	r2, [r3, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d006      	beq.n	800978e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009788:	711a      	strb	r2, [r3, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2243      	movs	r2, #67	@ 0x43
 8009792:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009794:	4b02      	ldr	r3, [pc, #8]	@ (80097a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20000050 	.word	0x20000050

080097a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097ac:	2182      	movs	r1, #130	@ 0x82
 80097ae:	4818      	ldr	r0, [pc, #96]	@ (8009810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097b0:	f000 fd17 	bl	800a1e2 <USBD_GetEpDesc>
 80097b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097b6:	2101      	movs	r1, #1
 80097b8:	4815      	ldr	r0, [pc, #84]	@ (8009810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097ba:	f000 fd12 	bl	800a1e2 <USBD_GetEpDesc>
 80097be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097c0:	2181      	movs	r1, #129	@ 0x81
 80097c2:	4813      	ldr	r0, [pc, #76]	@ (8009810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097c4:	f000 fd0d 	bl	800a1e2 <USBD_GetEpDesc>
 80097c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2210      	movs	r2, #16
 80097d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d006      	beq.n	80097ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	2200      	movs	r2, #0
 80097e0:	711a      	strb	r2, [r3, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f042 0202 	orr.w	r2, r2, #2
 80097e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d006      	beq.n	80097fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	711a      	strb	r2, [r3, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f042 0202 	orr.w	r2, r2, #2
 80097fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2243      	movs	r2, #67	@ 0x43
 8009802:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009804:	4b02      	ldr	r3, [pc, #8]	@ (8009810 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000050 	.word	0x20000050

08009814 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800981c:	2182      	movs	r1, #130	@ 0x82
 800981e:	4818      	ldr	r0, [pc, #96]	@ (8009880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009820:	f000 fcdf 	bl	800a1e2 <USBD_GetEpDesc>
 8009824:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009826:	2101      	movs	r1, #1
 8009828:	4815      	ldr	r0, [pc, #84]	@ (8009880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800982a:	f000 fcda 	bl	800a1e2 <USBD_GetEpDesc>
 800982e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009830:	2181      	movs	r1, #129	@ 0x81
 8009832:	4813      	ldr	r0, [pc, #76]	@ (8009880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009834:	f000 fcd5 	bl	800a1e2 <USBD_GetEpDesc>
 8009838:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2210      	movs	r2, #16
 8009844:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d006      	beq.n	800985a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	2200      	movs	r2, #0
 8009850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009854:	711a      	strb	r2, [r3, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d006      	beq.n	800986e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009868:	711a      	strb	r2, [r3, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2243      	movs	r2, #67	@ 0x43
 8009872:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009874:	4b02      	ldr	r3, [pc, #8]	@ (8009880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000050 	.word	0x20000050

08009884 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	220a      	movs	r2, #10
 8009890:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009892:	4b03      	ldr	r3, [pc, #12]	@ (80098a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009894:	4618      	mov	r0, r3
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	2000000c 	.word	0x2000000c

080098a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e009      	b.n	80098cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	33b0      	adds	r3, #176	@ 0xb0
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	32b0      	adds	r2, #176	@ 0xb0
 80098ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e008      	b.n	8009910 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	32b0      	adds	r2, #176	@ 0xb0
 8009930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009934:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800993c:	2303      	movs	r3, #3
 800993e:	e004      	b.n	800994a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
	...

08009958 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	32b0      	adds	r2, #176	@ 0xb0
 800996a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009970:	2301      	movs	r3, #1
 8009972:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800997a:	2303      	movs	r3, #3
 800997c:	e025      	b.n	80099ca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009984:	2b00      	cmp	r3, #0
 8009986:	d11f      	bne.n	80099c8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	2201      	movs	r2, #1
 800998c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009990:	4b10      	ldr	r3, [pc, #64]	@ (80099d4 <USBD_CDC_TransmitPacket+0x7c>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	f003 020f 	and.w	r2, r3, #15
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	4613      	mov	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4403      	add	r3, r0
 80099aa:	3318      	adds	r3, #24
 80099ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80099ae:	4b09      	ldr	r3, [pc, #36]	@ (80099d4 <USBD_CDC_TransmitPacket+0x7c>)
 80099b0:	7819      	ldrb	r1, [r3, #0]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f002 f8b1 	bl	800bb26 <USBD_LL_Transmit>

    ret = USBD_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000093 	.word	0x20000093

080099d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	32b0      	adds	r2, #176	@ 0xb0
 80099ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	32b0      	adds	r2, #176	@ 0xb0
 80099fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d101      	bne.n	8009a06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e018      	b.n	8009a38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	7c1b      	ldrb	r3, [r3, #16]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10a      	bne.n	8009a24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009a40 <USBD_CDC_ReceivePacket+0x68>)
 8009a10:	7819      	ldrb	r1, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f002 f8a3 	bl	800bb68 <USBD_LL_PrepareReceive>
 8009a22:	e008      	b.n	8009a36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a24:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <USBD_CDC_ReceivePacket+0x68>)
 8009a26:	7819      	ldrb	r1, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a2e:	2340      	movs	r3, #64	@ 0x40
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f002 f899 	bl	800bb68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000094 	.word	0x20000094

08009a44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d101      	bne.n	8009a5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e01f      	b.n	8009a9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	79fa      	ldrb	r2, [r7, #7]
 8009a8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f001 ff13 	bl	800b8bc <USBD_LL_Init>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e025      	b.n	8009b08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	32ae      	adds	r2, #174	@ 0xae
 8009ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00f      	beq.n	8009af8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	32ae      	adds	r2, #174	@ 0xae
 8009ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae8:	f107 020e 	add.w	r2, r7, #14
 8009aec:	4610      	mov	r0, r2
 8009aee:	4798      	blx	r3
 8009af0:	4602      	mov	r2, r0
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 ff1b 	bl	800b954 <USBD_LL_Start>
 8009b1e:	4603      	mov	r3, r0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	460b      	mov	r3, r1
 8009b48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d009      	beq.n	8009b6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	78fa      	ldrb	r2, [r7, #3]
 8009b62:	4611      	mov	r1, r2
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	78fa      	ldrb	r2, [r7, #3]
 8009b90:	4611      	mov	r1, r2
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	4798      	blx	r3
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f001 f90c 	bl	800adda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009bde:	f003 031f 	and.w	r3, r3, #31
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d01a      	beq.n	8009c1c <USBD_LL_SetupStage+0x72>
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d822      	bhi.n	8009c30 <USBD_LL_SetupStage+0x86>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <USBD_LL_SetupStage+0x4a>
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d00a      	beq.n	8009c08 <USBD_LL_SetupStage+0x5e>
 8009bf2:	e01d      	b.n	8009c30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fb63 	bl	800a2c8 <USBD_StdDevReq>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]
      break;
 8009c06:	e020      	b.n	8009c4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fbcb 	bl	800a3ac <USBD_StdItfReq>
 8009c16:	4603      	mov	r3, r0
 8009c18:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1a:	e016      	b.n	8009c4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fc2d 	bl	800a484 <USBD_StdEPReq>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c2e:	e00c      	b.n	8009c4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009c36:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 fee8 	bl	800ba14 <USBD_LL_StallEP>
 8009c44:	4603      	mov	r3, r0
 8009c46:	73fb      	strb	r3, [r7, #15]
      break;
 8009c48:	bf00      	nop
  }

  return ret;
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009c66:	7afb      	ldrb	r3, [r7, #11]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d16e      	bne.n	8009d4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009c72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	f040 8098 	bne.w	8009db0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d913      	bls.n	8009cb4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	1ad2      	subs	r2, r2, r3
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	bf28      	it	cs
 8009ca6:	4613      	movcs	r3, r2
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f001 f988 	bl	800afc2 <USBD_CtlContinueRx>
 8009cb2:	e07d      	b.n	8009db0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009cba:	f003 031f 	and.w	r3, r3, #31
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d014      	beq.n	8009cec <USBD_LL_DataOutStage+0x98>
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d81d      	bhi.n	8009d02 <USBD_LL_DataOutStage+0xae>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <USBD_LL_DataOutStage+0x7c>
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d003      	beq.n	8009cd6 <USBD_LL_DataOutStage+0x82>
 8009cce:	e018      	b.n	8009d02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	75bb      	strb	r3, [r7, #22]
            break;
 8009cd4:	e018      	b.n	8009d08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fa64 	bl	800a1ae <USBD_CoreFindIF>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75bb      	strb	r3, [r7, #22]
            break;
 8009cea:	e00d      	b.n	8009d08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 fa66 	bl	800a1c8 <USBD_CoreFindEP>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	75bb      	strb	r3, [r7, #22]
            break;
 8009d00:	e002      	b.n	8009d08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	75bb      	strb	r3, [r7, #22]
            break;
 8009d06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009d08:	7dbb      	ldrb	r3, [r7, #22]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d119      	bne.n	8009d42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d113      	bne.n	8009d42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009d1a:	7dba      	ldrb	r2, [r7, #22]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	32ae      	adds	r2, #174	@ 0xae
 8009d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009d2a:	7dba      	ldrb	r2, [r7, #22]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009d32:	7dba      	ldrb	r2, [r7, #22]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	32ae      	adds	r2, #174	@ 0xae
 8009d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f001 f94e 	bl	800afe4 <USBD_CtlSendStatus>
 8009d48:	e032      	b.n	8009db0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009d4a:	7afb      	ldrb	r3, [r7, #11]
 8009d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	4619      	mov	r1, r3
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 fa37 	bl	800a1c8 <USBD_CoreFindEP>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d5e:	7dbb      	ldrb	r3, [r7, #22]
 8009d60:	2bff      	cmp	r3, #255	@ 0xff
 8009d62:	d025      	beq.n	8009db0 <USBD_LL_DataOutStage+0x15c>
 8009d64:	7dbb      	ldrb	r3, [r7, #22]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d122      	bne.n	8009db0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d117      	bne.n	8009da6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009d76:	7dba      	ldrb	r2, [r7, #22]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	32ae      	adds	r2, #174	@ 0xae
 8009d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00f      	beq.n	8009da6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009d86:	7dba      	ldrb	r2, [r7, #22]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009d8e:	7dba      	ldrb	r2, [r7, #22]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	32ae      	adds	r2, #174	@ 0xae
 8009d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	7afa      	ldrb	r2, [r7, #11]
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	4798      	blx	r3
 8009da2:	4603      	mov	r3, r0
 8009da4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
 8009dae:	e000      	b.n	8009db2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3718      	adds	r7, #24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b086      	sub	sp, #24
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	607a      	str	r2, [r7, #4]
 8009dc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009dc8:	7afb      	ldrb	r3, [r7, #11]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d16f      	bne.n	8009eae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3314      	adds	r3, #20
 8009dd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d15a      	bne.n	8009e94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d914      	bls.n	8009e14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	1ad2      	subs	r2, r2, r3
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	6879      	ldr	r1, [r7, #4]
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f001 f8b0 	bl	800af66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e06:	2300      	movs	r3, #0
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f001 feab 	bl	800bb68 <USBD_LL_PrepareReceive>
 8009e12:	e03f      	b.n	8009e94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d11c      	bne.n	8009e5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d316      	bcc.n	8009e5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d20f      	bcs.n	8009e5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f001 f891 	bl	800af66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2100      	movs	r1, #0
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f001 fe88 	bl	800bb68 <USBD_LL_PrepareReceive>
 8009e58:	e01c      	b.n	8009e94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d10f      	bne.n	8009e86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d009      	beq.n	8009e86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e86:	2180      	movs	r1, #128	@ 0x80
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f001 fdc3 	bl	800ba14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f001 f8bb 	bl	800b00a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d03a      	beq.n	8009f14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f7ff fe42 	bl	8009b28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009eac:	e032      	b.n	8009f14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009eae:	7afb      	ldrb	r3, [r7, #11]
 8009eb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 f985 	bl	800a1c8 <USBD_CoreFindEP>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	2bff      	cmp	r3, #255	@ 0xff
 8009ec6:	d025      	beq.n	8009f14 <USBD_LL_DataInStage+0x15a>
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d122      	bne.n	8009f14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d11c      	bne.n	8009f14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009eda:	7dfa      	ldrb	r2, [r7, #23]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	32ae      	adds	r2, #174	@ 0xae
 8009ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d014      	beq.n	8009f14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009eea:	7dfa      	ldrb	r2, [r7, #23]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009ef2:	7dfa      	ldrb	r2, [r7, #23]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	32ae      	adds	r2, #174	@ 0xae
 8009ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	7afa      	ldrb	r2, [r7, #11]
 8009f00:	4611      	mov	r1, r2
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	4798      	blx	r3
 8009f06:	4603      	mov	r3, r0
 8009f08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009f0a:	7dbb      	ldrb	r3, [r7, #22]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009f10:	7dbb      	ldrb	r3, [r7, #22]
 8009f12:	e000      	b.n	8009f16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d014      	beq.n	8009f84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00e      	beq.n	8009f84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	6852      	ldr	r2, [r2, #4]
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	4611      	mov	r1, r2
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	4798      	blx	r3
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f84:	2340      	movs	r3, #64	@ 0x40
 8009f86:	2200      	movs	r2, #0
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 fcfd 	bl	800b98a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2240      	movs	r2, #64	@ 0x40
 8009f9c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fa0:	2340      	movs	r3, #64	@ 0x40
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2180      	movs	r1, #128	@ 0x80
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f001 fcef 	bl	800b98a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2240      	movs	r2, #64	@ 0x40
 8009fb6:	621a      	str	r2, [r3, #32]

  return ret;
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	78fa      	ldrb	r2, [r7, #3]
 8009fd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b04      	cmp	r3, #4
 8009ff4:	d006      	beq.n	800a004 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2204      	movs	r2, #4
 800a008:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b083      	sub	sp, #12
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d106      	bne.n	800a03c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a034:	b2da      	uxtb	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d110      	bne.n	800a080 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	32ae      	adds	r2, #174	@ 0xae
 800a0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e01c      	b.n	800a0e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d115      	bne.n	800a0e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	32ae      	adds	r2, #174	@ 0xae
 800a0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00b      	beq.n	800a0e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	32ae      	adds	r2, #174	@ 0xae
 800a0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	78fa      	ldrb	r2, [r7, #3]
 800a0de:	4611      	mov	r1, r2
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	32ae      	adds	r2, #174	@ 0xae
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d101      	bne.n	800a110 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e01c      	b.n	800a14a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d115      	bne.n	800a148 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	32ae      	adds	r2, #174	@ 0xae
 800a126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00b      	beq.n	800a148 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	32ae      	adds	r2, #174	@ 0xae
 800a13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a140:	78fa      	ldrb	r2, [r7, #3]
 800a142:	4611      	mov	r1, r2
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00e      	beq.n	800a1a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	6852      	ldr	r2, [r2, #4]
 800a192:	b2d2      	uxtb	r2, r2
 800a194:	4611      	mov	r1, r2
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	4798      	blx	r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b083      	sub	sp, #12
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b086      	sub	sp, #24
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	885b      	ldrh	r3, [r3, #2]
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	7812      	ldrb	r2, [r2, #0]
 800a204:	4293      	cmp	r3, r2
 800a206:	d91f      	bls.n	800a248 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a20e:	e013      	b.n	800a238 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a210:	f107 030a 	add.w	r3, r7, #10
 800a214:	4619      	mov	r1, r3
 800a216:	6978      	ldr	r0, [r7, #20]
 800a218:	f000 f81b 	bl	800a252 <USBD_GetNextDesc>
 800a21c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	785b      	ldrb	r3, [r3, #1]
 800a222:	2b05      	cmp	r3, #5
 800a224:	d108      	bne.n	800a238 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	789b      	ldrb	r3, [r3, #2]
 800a22e:	78fa      	ldrb	r2, [r7, #3]
 800a230:	429a      	cmp	r2, r3
 800a232:	d008      	beq.n	800a246 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a234:	2300      	movs	r3, #0
 800a236:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	885b      	ldrh	r3, [r3, #2]
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	897b      	ldrh	r3, [r7, #10]
 800a240:	429a      	cmp	r2, r3
 800a242:	d8e5      	bhi.n	800a210 <USBD_GetEpDesc+0x2e>
 800a244:	e000      	b.n	800a248 <USBD_GetEpDesc+0x66>
          break;
 800a246:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a248:	693b      	ldr	r3, [r7, #16]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a252:	b480      	push	{r7}
 800a254:	b085      	sub	sp, #20
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	881b      	ldrh	r3, [r3, #0]
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	7812      	ldrb	r2, [r2, #0]
 800a268:	4413      	add	r3, r2
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	461a      	mov	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4413      	add	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a27c:	68fb      	ldr	r3, [r7, #12]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b087      	sub	sp, #28
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2a8:	8a3b      	ldrh	r3, [r7, #16]
 800a2aa:	021b      	lsls	r3, r3, #8
 800a2ac:	b21a      	sxth	r2, r3
 800a2ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	b21b      	sxth	r3, r3
 800a2b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a2b8:	89fb      	ldrh	r3, [r7, #14]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	371c      	adds	r7, #28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
	...

0800a2c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a2de:	2b40      	cmp	r3, #64	@ 0x40
 800a2e0:	d005      	beq.n	800a2ee <USBD_StdDevReq+0x26>
 800a2e2:	2b40      	cmp	r3, #64	@ 0x40
 800a2e4:	d857      	bhi.n	800a396 <USBD_StdDevReq+0xce>
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00f      	beq.n	800a30a <USBD_StdDevReq+0x42>
 800a2ea:	2b20      	cmp	r3, #32
 800a2ec:	d153      	bne.n	800a396 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	32ae      	adds	r2, #174	@ 0xae
 800a2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	4798      	blx	r3
 800a304:	4603      	mov	r3, r0
 800a306:	73fb      	strb	r3, [r7, #15]
      break;
 800a308:	e04a      	b.n	800a3a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	785b      	ldrb	r3, [r3, #1]
 800a30e:	2b09      	cmp	r3, #9
 800a310:	d83b      	bhi.n	800a38a <USBD_StdDevReq+0xc2>
 800a312:	a201      	add	r2, pc, #4	@ (adr r2, 800a318 <USBD_StdDevReq+0x50>)
 800a314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a318:	0800a36d 	.word	0x0800a36d
 800a31c:	0800a381 	.word	0x0800a381
 800a320:	0800a38b 	.word	0x0800a38b
 800a324:	0800a377 	.word	0x0800a377
 800a328:	0800a38b 	.word	0x0800a38b
 800a32c:	0800a34b 	.word	0x0800a34b
 800a330:	0800a341 	.word	0x0800a341
 800a334:	0800a38b 	.word	0x0800a38b
 800a338:	0800a363 	.word	0x0800a363
 800a33c:	0800a355 	.word	0x0800a355
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fa3c 	bl	800a7c0 <USBD_GetDescriptor>
          break;
 800a348:	e024      	b.n	800a394 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fba1 	bl	800aa94 <USBD_SetAddress>
          break;
 800a352:	e01f      	b.n	800a394 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fbe0 	bl	800ab1c <USBD_SetConfig>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]
          break;
 800a360:	e018      	b.n	800a394 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fc83 	bl	800ac70 <USBD_GetConfig>
          break;
 800a36a:	e013      	b.n	800a394 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fcb4 	bl	800acdc <USBD_GetStatus>
          break;
 800a374:	e00e      	b.n	800a394 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fce3 	bl	800ad44 <USBD_SetFeature>
          break;
 800a37e:	e009      	b.n	800a394 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fd07 	bl	800ad96 <USBD_ClrFeature>
          break;
 800a388:	e004      	b.n	800a394 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a38a:	6839      	ldr	r1, [r7, #0]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fd5e 	bl	800ae4e <USBD_CtlError>
          break;
 800a392:	bf00      	nop
      }
      break;
 800a394:	e004      	b.n	800a3a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fd58 	bl	800ae4e <USBD_CtlError>
      break;
 800a39e:	bf00      	nop
  }

  return ret;
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop

0800a3ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3c2:	2b40      	cmp	r3, #64	@ 0x40
 800a3c4:	d005      	beq.n	800a3d2 <USBD_StdItfReq+0x26>
 800a3c6:	2b40      	cmp	r3, #64	@ 0x40
 800a3c8:	d852      	bhi.n	800a470 <USBD_StdItfReq+0xc4>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <USBD_StdItfReq+0x26>
 800a3ce:	2b20      	cmp	r3, #32
 800a3d0:	d14e      	bne.n	800a470 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d840      	bhi.n	800a462 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	889b      	ldrh	r3, [r3, #4]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d836      	bhi.n	800a458 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	889b      	ldrh	r3, [r3, #4]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff fedb 	bl	800a1ae <USBD_CoreFindIF>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3fc:	7bbb      	ldrb	r3, [r7, #14]
 800a3fe:	2bff      	cmp	r3, #255	@ 0xff
 800a400:	d01d      	beq.n	800a43e <USBD_StdItfReq+0x92>
 800a402:	7bbb      	ldrb	r3, [r7, #14]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11a      	bne.n	800a43e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a408:	7bba      	ldrb	r2, [r7, #14]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	32ae      	adds	r2, #174	@ 0xae
 800a40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00f      	beq.n	800a438 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a418:	7bba      	ldrb	r2, [r7, #14]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a420:	7bba      	ldrb	r2, [r7, #14]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	32ae      	adds	r2, #174	@ 0xae
 800a426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	4798      	blx	r3
 800a432:	4603      	mov	r3, r0
 800a434:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a436:	e004      	b.n	800a442 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a438:	2303      	movs	r3, #3
 800a43a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a43c:	e001      	b.n	800a442 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a43e:	2303      	movs	r3, #3
 800a440:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	88db      	ldrh	r3, [r3, #6]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d110      	bne.n	800a46c <USBD_StdItfReq+0xc0>
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10d      	bne.n	800a46c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fdc7 	bl	800afe4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a456:	e009      	b.n	800a46c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fcf7 	bl	800ae4e <USBD_CtlError>
          break;
 800a460:	e004      	b.n	800a46c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fcf2 	bl	800ae4e <USBD_CtlError>
          break;
 800a46a:	e000      	b.n	800a46e <USBD_StdItfReq+0xc2>
          break;
 800a46c:	bf00      	nop
      }
      break;
 800a46e:	e004      	b.n	800a47a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fceb 	bl	800ae4e <USBD_CtlError>
      break;
 800a478:	bf00      	nop
  }

  return ret;
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	889b      	ldrh	r3, [r3, #4]
 800a496:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4a0:	2b40      	cmp	r3, #64	@ 0x40
 800a4a2:	d007      	beq.n	800a4b4 <USBD_StdEPReq+0x30>
 800a4a4:	2b40      	cmp	r3, #64	@ 0x40
 800a4a6:	f200 817f 	bhi.w	800a7a8 <USBD_StdEPReq+0x324>
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d02a      	beq.n	800a504 <USBD_StdEPReq+0x80>
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	f040 817a 	bne.w	800a7a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7ff fe85 	bl	800a1c8 <USBD_CoreFindEP>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4c2:	7b7b      	ldrb	r3, [r7, #13]
 800a4c4:	2bff      	cmp	r3, #255	@ 0xff
 800a4c6:	f000 8174 	beq.w	800a7b2 <USBD_StdEPReq+0x32e>
 800a4ca:	7b7b      	ldrb	r3, [r7, #13]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f040 8170 	bne.w	800a7b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a4d2:	7b7a      	ldrb	r2, [r7, #13]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a4da:	7b7a      	ldrb	r2, [r7, #13]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	32ae      	adds	r2, #174	@ 0xae
 800a4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 8163 	beq.w	800a7b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a4ec:	7b7a      	ldrb	r2, [r7, #13]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	32ae      	adds	r2, #174	@ 0xae
 800a4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	4798      	blx	r3
 800a4fe:	4603      	mov	r3, r0
 800a500:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a502:	e156      	b.n	800a7b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	785b      	ldrb	r3, [r3, #1]
 800a508:	2b03      	cmp	r3, #3
 800a50a:	d008      	beq.n	800a51e <USBD_StdEPReq+0x9a>
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	f300 8145 	bgt.w	800a79c <USBD_StdEPReq+0x318>
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 809b 	beq.w	800a64e <USBD_StdEPReq+0x1ca>
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d03c      	beq.n	800a596 <USBD_StdEPReq+0x112>
 800a51c:	e13e      	b.n	800a79c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b02      	cmp	r3, #2
 800a528:	d002      	beq.n	800a530 <USBD_StdEPReq+0xac>
 800a52a:	2b03      	cmp	r3, #3
 800a52c:	d016      	beq.n	800a55c <USBD_StdEPReq+0xd8>
 800a52e:	e02c      	b.n	800a58a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a530:	7bbb      	ldrb	r3, [r7, #14]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00d      	beq.n	800a552 <USBD_StdEPReq+0xce>
 800a536:	7bbb      	ldrb	r3, [r7, #14]
 800a538:	2b80      	cmp	r3, #128	@ 0x80
 800a53a:	d00a      	beq.n	800a552 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a53c:	7bbb      	ldrb	r3, [r7, #14]
 800a53e:	4619      	mov	r1, r3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f001 fa67 	bl	800ba14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a546:	2180      	movs	r1, #128	@ 0x80
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f001 fa63 	bl	800ba14 <USBD_LL_StallEP>
 800a54e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a550:	e020      	b.n	800a594 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fc7a 	bl	800ae4e <USBD_CtlError>
              break;
 800a55a:	e01b      	b.n	800a594 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	885b      	ldrh	r3, [r3, #2]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10e      	bne.n	800a582 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a564:	7bbb      	ldrb	r3, [r7, #14]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00b      	beq.n	800a582 <USBD_StdEPReq+0xfe>
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	2b80      	cmp	r3, #128	@ 0x80
 800a56e:	d008      	beq.n	800a582 <USBD_StdEPReq+0xfe>
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	88db      	ldrh	r3, [r3, #6]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d104      	bne.n	800a582 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 fa49 	bl	800ba14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fd2e 	bl	800afe4 <USBD_CtlSendStatus>

              break;
 800a588:	e004      	b.n	800a594 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fc5e 	bl	800ae4e <USBD_CtlError>
              break;
 800a592:	bf00      	nop
          }
          break;
 800a594:	e107      	b.n	800a7a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d002      	beq.n	800a5a8 <USBD_StdEPReq+0x124>
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d016      	beq.n	800a5d4 <USBD_StdEPReq+0x150>
 800a5a6:	e04b      	b.n	800a640 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00d      	beq.n	800a5ca <USBD_StdEPReq+0x146>
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	2b80      	cmp	r3, #128	@ 0x80
 800a5b2:	d00a      	beq.n	800a5ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5b4:	7bbb      	ldrb	r3, [r7, #14]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f001 fa2b 	bl	800ba14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5be:	2180      	movs	r1, #128	@ 0x80
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f001 fa27 	bl	800ba14 <USBD_LL_StallEP>
 800a5c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5c8:	e040      	b.n	800a64c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fc3e 	bl	800ae4e <USBD_CtlError>
              break;
 800a5d2:	e03b      	b.n	800a64c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	885b      	ldrh	r3, [r3, #2]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d136      	bne.n	800a64a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a5dc:	7bbb      	ldrb	r3, [r7, #14]
 800a5de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d004      	beq.n	800a5f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f001 fa31 	bl	800ba52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fcf7 	bl	800afe4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5f6:	7bbb      	ldrb	r3, [r7, #14]
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff fde4 	bl	800a1c8 <USBD_CoreFindEP>
 800a600:	4603      	mov	r3, r0
 800a602:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a604:	7b7b      	ldrb	r3, [r7, #13]
 800a606:	2bff      	cmp	r3, #255	@ 0xff
 800a608:	d01f      	beq.n	800a64a <USBD_StdEPReq+0x1c6>
 800a60a:	7b7b      	ldrb	r3, [r7, #13]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d11c      	bne.n	800a64a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a610:	7b7a      	ldrb	r2, [r7, #13]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a618:	7b7a      	ldrb	r2, [r7, #13]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	32ae      	adds	r2, #174	@ 0xae
 800a61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d010      	beq.n	800a64a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a628:	7b7a      	ldrb	r2, [r7, #13]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	32ae      	adds	r2, #174	@ 0xae
 800a62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	4798      	blx	r3
 800a63a:	4603      	mov	r3, r0
 800a63c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a63e:	e004      	b.n	800a64a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fc03 	bl	800ae4e <USBD_CtlError>
              break;
 800a648:	e000      	b.n	800a64c <USBD_StdEPReq+0x1c8>
              break;
 800a64a:	bf00      	nop
          }
          break;
 800a64c:	e0ab      	b.n	800a7a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b02      	cmp	r3, #2
 800a658:	d002      	beq.n	800a660 <USBD_StdEPReq+0x1dc>
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d032      	beq.n	800a6c4 <USBD_StdEPReq+0x240>
 800a65e:	e097      	b.n	800a790 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a660:	7bbb      	ldrb	r3, [r7, #14]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d007      	beq.n	800a676 <USBD_StdEPReq+0x1f2>
 800a666:	7bbb      	ldrb	r3, [r7, #14]
 800a668:	2b80      	cmp	r3, #128	@ 0x80
 800a66a:	d004      	beq.n	800a676 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fbed 	bl	800ae4e <USBD_CtlError>
                break;
 800a674:	e091      	b.n	800a79a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	da0b      	bge.n	800a696 <USBD_StdEPReq+0x212>
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	3310      	adds	r3, #16
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	4413      	add	r3, r2
 800a692:	3304      	adds	r3, #4
 800a694:	e00b      	b.n	800a6ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a696:	7bbb      	ldrb	r3, [r7, #14]
 800a698:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a69c:	4613      	mov	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fc37 	bl	800af30 <USBD_CtlSendData>
              break;
 800a6c2:	e06a      	b.n	800a79a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a6c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	da11      	bge.n	800a6f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
 800a6ce:	f003 020f 	and.w	r2, r3, #15
 800a6d2:	6879      	ldr	r1, [r7, #4]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	440b      	add	r3, r1
 800a6de:	3324      	adds	r3, #36	@ 0x24
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d117      	bne.n	800a716 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fbb0 	bl	800ae4e <USBD_CtlError>
                  break;
 800a6ee:	e054      	b.n	800a79a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
 800a6f2:	f003 020f 	and.w	r2, r3, #15
 800a6f6:	6879      	ldr	r1, [r7, #4]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	440b      	add	r3, r1
 800a702:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d104      	bne.n	800a716 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fb9d 	bl	800ae4e <USBD_CtlError>
                  break;
 800a714:	e041      	b.n	800a79a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	da0b      	bge.n	800a736 <USBD_StdEPReq+0x2b2>
 800a71e:	7bbb      	ldrb	r3, [r7, #14]
 800a720:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a724:	4613      	mov	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	3310      	adds	r3, #16
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	4413      	add	r3, r2
 800a732:	3304      	adds	r3, #4
 800a734:	e00b      	b.n	800a74e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a736:	7bbb      	ldrb	r3, [r7, #14]
 800a738:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a73c:	4613      	mov	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	4413      	add	r3, r2
 800a74c:	3304      	adds	r3, #4
 800a74e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <USBD_StdEPReq+0x2d8>
 800a756:	7bbb      	ldrb	r3, [r7, #14]
 800a758:	2b80      	cmp	r3, #128	@ 0x80
 800a75a:	d103      	bne.n	800a764 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	2200      	movs	r2, #0
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	e00e      	b.n	800a782 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a764:	7bbb      	ldrb	r3, [r7, #14]
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f001 f991 	bl	800ba90 <USBD_LL_IsStallEP>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2201      	movs	r2, #1
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	e002      	b.n	800a782 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2200      	movs	r2, #0
 800a780:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2202      	movs	r2, #2
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fbd1 	bl	800af30 <USBD_CtlSendData>
              break;
 800a78e:	e004      	b.n	800a79a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fb5b 	bl	800ae4e <USBD_CtlError>
              break;
 800a798:	bf00      	nop
          }
          break;
 800a79a:	e004      	b.n	800a7a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fb55 	bl	800ae4e <USBD_CtlError>
          break;
 800a7a4:	bf00      	nop
      }
      break;
 800a7a6:	e005      	b.n	800a7b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fb4f 	bl	800ae4e <USBD_CtlError>
      break;
 800a7b0:	e000      	b.n	800a7b4 <USBD_StdEPReq+0x330>
      break;
 800a7b2:	bf00      	nop
  }

  return ret;
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	885b      	ldrh	r3, [r3, #2]
 800a7da:	0a1b      	lsrs	r3, r3, #8
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	2b06      	cmp	r3, #6
 800a7e2:	f200 8128 	bhi.w	800aa36 <USBD_GetDescriptor+0x276>
 800a7e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7ec <USBD_GetDescriptor+0x2c>)
 800a7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ec:	0800a809 	.word	0x0800a809
 800a7f0:	0800a821 	.word	0x0800a821
 800a7f4:	0800a861 	.word	0x0800a861
 800a7f8:	0800aa37 	.word	0x0800aa37
 800a7fc:	0800aa37 	.word	0x0800aa37
 800a800:	0800a9d7 	.word	0x0800a9d7
 800a804:	0800aa03 	.word	0x0800aa03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	7c12      	ldrb	r2, [r2, #16]
 800a814:	f107 0108 	add.w	r1, r7, #8
 800a818:	4610      	mov	r0, r2
 800a81a:	4798      	blx	r3
 800a81c:	60f8      	str	r0, [r7, #12]
      break;
 800a81e:	e112      	b.n	800aa46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	7c1b      	ldrb	r3, [r3, #16]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10d      	bne.n	800a844 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a830:	f107 0208 	add.w	r2, r7, #8
 800a834:	4610      	mov	r0, r2
 800a836:	4798      	blx	r3
 800a838:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3301      	adds	r3, #1
 800a83e:	2202      	movs	r2, #2
 800a840:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a842:	e100      	b.n	800aa46 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84c:	f107 0208 	add.w	r2, r7, #8
 800a850:	4610      	mov	r0, r2
 800a852:	4798      	blx	r3
 800a854:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3301      	adds	r3, #1
 800a85a:	2202      	movs	r2, #2
 800a85c:	701a      	strb	r2, [r3, #0]
      break;
 800a85e:	e0f2      	b.n	800aa46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	885b      	ldrh	r3, [r3, #2]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b05      	cmp	r3, #5
 800a868:	f200 80ac 	bhi.w	800a9c4 <USBD_GetDescriptor+0x204>
 800a86c:	a201      	add	r2, pc, #4	@ (adr r2, 800a874 <USBD_GetDescriptor+0xb4>)
 800a86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a872:	bf00      	nop
 800a874:	0800a88d 	.word	0x0800a88d
 800a878:	0800a8c1 	.word	0x0800a8c1
 800a87c:	0800a8f5 	.word	0x0800a8f5
 800a880:	0800a929 	.word	0x0800a929
 800a884:	0800a95d 	.word	0x0800a95d
 800a888:	0800a991 	.word	0x0800a991
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00b      	beq.n	800a8b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	7c12      	ldrb	r2, [r2, #16]
 800a8a4:	f107 0108 	add.w	r1, r7, #8
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4798      	blx	r3
 800a8ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8ae:	e091      	b.n	800a9d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 facb 	bl	800ae4e <USBD_CtlError>
            err++;
 800a8b8:	7afb      	ldrb	r3, [r7, #11]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a8be:	e089      	b.n	800a9d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00b      	beq.n	800a8e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	7c12      	ldrb	r2, [r2, #16]
 800a8d8:	f107 0108 	add.w	r1, r7, #8
 800a8dc:	4610      	mov	r0, r2
 800a8de:	4798      	blx	r3
 800a8e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8e2:	e077      	b.n	800a9d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fab1 	bl	800ae4e <USBD_CtlError>
            err++;
 800a8ec:	7afb      	ldrb	r3, [r7, #11]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8f2:	e06f      	b.n	800a9d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00b      	beq.n	800a918 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	7c12      	ldrb	r2, [r2, #16]
 800a90c:	f107 0108 	add.w	r1, r7, #8
 800a910:	4610      	mov	r0, r2
 800a912:	4798      	blx	r3
 800a914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a916:	e05d      	b.n	800a9d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fa97 	bl	800ae4e <USBD_CtlError>
            err++;
 800a920:	7afb      	ldrb	r3, [r7, #11]
 800a922:	3301      	adds	r3, #1
 800a924:	72fb      	strb	r3, [r7, #11]
          break;
 800a926:	e055      	b.n	800a9d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00b      	beq.n	800a94c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	7c12      	ldrb	r2, [r2, #16]
 800a940:	f107 0108 	add.w	r1, r7, #8
 800a944:	4610      	mov	r0, r2
 800a946:	4798      	blx	r3
 800a948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a94a:	e043      	b.n	800a9d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a94c:	6839      	ldr	r1, [r7, #0]
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fa7d 	bl	800ae4e <USBD_CtlError>
            err++;
 800a954:	7afb      	ldrb	r3, [r7, #11]
 800a956:	3301      	adds	r3, #1
 800a958:	72fb      	strb	r3, [r7, #11]
          break;
 800a95a:	e03b      	b.n	800a9d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a962:	695b      	ldr	r3, [r3, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00b      	beq.n	800a980 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	7c12      	ldrb	r2, [r2, #16]
 800a974:	f107 0108 	add.w	r1, r7, #8
 800a978:	4610      	mov	r0, r2
 800a97a:	4798      	blx	r3
 800a97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a97e:	e029      	b.n	800a9d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fa63 	bl	800ae4e <USBD_CtlError>
            err++;
 800a988:	7afb      	ldrb	r3, [r7, #11]
 800a98a:	3301      	adds	r3, #1
 800a98c:	72fb      	strb	r3, [r7, #11]
          break;
 800a98e:	e021      	b.n	800a9d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00b      	beq.n	800a9b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	7c12      	ldrb	r2, [r2, #16]
 800a9a8:	f107 0108 	add.w	r1, r7, #8
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	4798      	blx	r3
 800a9b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9b2:	e00f      	b.n	800a9d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fa49 	bl	800ae4e <USBD_CtlError>
            err++;
 800a9bc:	7afb      	ldrb	r3, [r7, #11]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9c2:	e007      	b.n	800a9d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fa41 	bl	800ae4e <USBD_CtlError>
          err++;
 800a9cc:	7afb      	ldrb	r3, [r7, #11]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a9d2:	bf00      	nop
      }
      break;
 800a9d4:	e037      	b.n	800aa46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	7c1b      	ldrb	r3, [r3, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d109      	bne.n	800a9f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9e6:	f107 0208 	add.w	r2, r7, #8
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	4798      	blx	r3
 800a9ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9f0:	e029      	b.n	800aa46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fa2a 	bl	800ae4e <USBD_CtlError>
        err++;
 800a9fa:	7afb      	ldrb	r3, [r7, #11]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	72fb      	strb	r3, [r7, #11]
      break;
 800aa00:	e021      	b.n	800aa46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	7c1b      	ldrb	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10d      	bne.n	800aa26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa12:	f107 0208 	add.w	r2, r7, #8
 800aa16:	4610      	mov	r0, r2
 800aa18:	4798      	blx	r3
 800aa1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	2207      	movs	r2, #7
 800aa22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa24:	e00f      	b.n	800aa46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fa10 	bl	800ae4e <USBD_CtlError>
        err++;
 800aa2e:	7afb      	ldrb	r3, [r7, #11]
 800aa30:	3301      	adds	r3, #1
 800aa32:	72fb      	strb	r3, [r7, #11]
      break;
 800aa34:	e007      	b.n	800aa46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fa08 	bl	800ae4e <USBD_CtlError>
      err++;
 800aa3e:	7afb      	ldrb	r3, [r7, #11]
 800aa40:	3301      	adds	r3, #1
 800aa42:	72fb      	strb	r3, [r7, #11]
      break;
 800aa44:	bf00      	nop
  }

  if (err != 0U)
 800aa46:	7afb      	ldrb	r3, [r7, #11]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d11e      	bne.n	800aa8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	88db      	ldrh	r3, [r3, #6]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d016      	beq.n	800aa82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aa54:	893b      	ldrh	r3, [r7, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00e      	beq.n	800aa78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	88da      	ldrh	r2, [r3, #6]
 800aa5e:	893b      	ldrh	r3, [r7, #8]
 800aa60:	4293      	cmp	r3, r2
 800aa62:	bf28      	it	cs
 800aa64:	4613      	movcs	r3, r2
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa6a:	893b      	ldrh	r3, [r7, #8]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	68f9      	ldr	r1, [r7, #12]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fa5d 	bl	800af30 <USBD_CtlSendData>
 800aa76:	e009      	b.n	800aa8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f9e7 	bl	800ae4e <USBD_CtlError>
 800aa80:	e004      	b.n	800aa8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 faae 	bl	800afe4 <USBD_CtlSendStatus>
 800aa88:	e000      	b.n	800aa8c <USBD_GetDescriptor+0x2cc>
    return;
 800aa8a:	bf00      	nop
  }
}
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop

0800aa94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	889b      	ldrh	r3, [r3, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d131      	bne.n	800ab0a <USBD_SetAddress+0x76>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	88db      	ldrh	r3, [r3, #6]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d12d      	bne.n	800ab0a <USBD_SetAddress+0x76>
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	885b      	ldrh	r3, [r3, #2]
 800aab2:	2b7f      	cmp	r3, #127	@ 0x7f
 800aab4:	d829      	bhi.n	800ab0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	885b      	ldrh	r3, [r3, #2]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aac0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d104      	bne.n	800aad8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f9bc 	bl	800ae4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad6:	e01d      	b.n	800ab14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	7bfa      	ldrb	r2, [r7, #15]
 800aadc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 ffff 	bl	800bae8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fa7a 	bl	800afe4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d004      	beq.n	800ab00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aafe:	e009      	b.n	800ab14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab08:	e004      	b.n	800ab14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f99e 	bl	800ae4e <USBD_CtlError>
  }
}
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	885b      	ldrh	r3, [r3, #2]
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	4b4e      	ldr	r3, [pc, #312]	@ (800ac6c <USBD_SetConfig+0x150>)
 800ab32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab34:	4b4d      	ldr	r3, [pc, #308]	@ (800ac6c <USBD_SetConfig+0x150>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d905      	bls.n	800ab48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f985 	bl	800ae4e <USBD_CtlError>
    return USBD_FAIL;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e08c      	b.n	800ac62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d002      	beq.n	800ab5a <USBD_SetConfig+0x3e>
 800ab54:	2b03      	cmp	r3, #3
 800ab56:	d029      	beq.n	800abac <USBD_SetConfig+0x90>
 800ab58:	e075      	b.n	800ac46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab5a:	4b44      	ldr	r3, [pc, #272]	@ (800ac6c <USBD_SetConfig+0x150>)
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d020      	beq.n	800aba4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ab62:	4b42      	ldr	r3, [pc, #264]	@ (800ac6c <USBD_SetConfig+0x150>)
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab6c:	4b3f      	ldr	r3, [pc, #252]	@ (800ac6c <USBD_SetConfig+0x150>)
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7fe ffe3 	bl	8009b3e <USBD_SetClassConfig>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d008      	beq.n	800ab94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f962 	bl	800ae4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2202      	movs	r2, #2
 800ab8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab92:	e065      	b.n	800ac60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fa25 	bl	800afe4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2203      	movs	r2, #3
 800ab9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aba2:	e05d      	b.n	800ac60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fa1d 	bl	800afe4 <USBD_CtlSendStatus>
      break;
 800abaa:	e059      	b.n	800ac60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800abac:	4b2f      	ldr	r3, [pc, #188]	@ (800ac6c <USBD_SetConfig+0x150>)
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d112      	bne.n	800abda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800abbc:	4b2b      	ldr	r3, [pc, #172]	@ (800ac6c <USBD_SetConfig+0x150>)
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	461a      	mov	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abc6:	4b29      	ldr	r3, [pc, #164]	@ (800ac6c <USBD_SetConfig+0x150>)
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7fe ffd2 	bl	8009b76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fa06 	bl	800afe4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800abd8:	e042      	b.n	800ac60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800abda:	4b24      	ldr	r3, [pc, #144]	@ (800ac6c <USBD_SetConfig+0x150>)
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d02a      	beq.n	800ac3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	b2db      	uxtb	r3, r3
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7fe ffc0 	bl	8009b76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800abf6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac6c <USBD_SetConfig+0x150>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac00:	4b1a      	ldr	r3, [pc, #104]	@ (800ac6c <USBD_SetConfig+0x150>)
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	4619      	mov	r1, r3
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7fe ff99 	bl	8009b3e <USBD_SetClassConfig>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00f      	beq.n	800ac36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f918 	bl	800ae4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7fe ffa5 	bl	8009b76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ac34:	e014      	b.n	800ac60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f9d4 	bl	800afe4 <USBD_CtlSendStatus>
      break;
 800ac3c:	e010      	b.n	800ac60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f9d0 	bl	800afe4 <USBD_CtlSendStatus>
      break;
 800ac44:	e00c      	b.n	800ac60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f900 	bl	800ae4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac4e:	4b07      	ldr	r3, [pc, #28]	@ (800ac6c <USBD_SetConfig+0x150>)
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f7fe ff8e 	bl	8009b76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac5e:	bf00      	nop
  }

  return ret;
 800ac60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	200003e0 	.word	0x200003e0

0800ac70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	88db      	ldrh	r3, [r3, #6]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d004      	beq.n	800ac8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f8e2 	bl	800ae4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac8a:	e023      	b.n	800acd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	dc02      	bgt.n	800ac9e <USBD_GetConfig+0x2e>
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dc03      	bgt.n	800aca4 <USBD_GetConfig+0x34>
 800ac9c:	e015      	b.n	800acca <USBD_GetConfig+0x5a>
 800ac9e:	2b03      	cmp	r3, #3
 800aca0:	d00b      	beq.n	800acba <USBD_GetConfig+0x4a>
 800aca2:	e012      	b.n	800acca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3308      	adds	r3, #8
 800acae:	2201      	movs	r2, #1
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f93c 	bl	800af30 <USBD_CtlSendData>
        break;
 800acb8:	e00c      	b.n	800acd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	3304      	adds	r3, #4
 800acbe:	2201      	movs	r2, #1
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f934 	bl	800af30 <USBD_CtlSendData>
        break;
 800acc8:	e004      	b.n	800acd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f8be 	bl	800ae4e <USBD_CtlError>
        break;
 800acd2:	bf00      	nop
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acec:	b2db      	uxtb	r3, r3
 800acee:	3b01      	subs	r3, #1
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d81e      	bhi.n	800ad32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	88db      	ldrh	r3, [r3, #6]
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d004      	beq.n	800ad06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f8a5 	bl	800ae4e <USBD_CtlError>
        break;
 800ad04:	e01a      	b.n	800ad3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d005      	beq.n	800ad22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	f043 0202 	orr.w	r2, r3, #2
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	330c      	adds	r3, #12
 800ad26:	2202      	movs	r2, #2
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f900 	bl	800af30 <USBD_CtlSendData>
      break;
 800ad30:	e004      	b.n	800ad3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f88a 	bl	800ae4e <USBD_CtlError>
      break;
 800ad3a:	bf00      	nop
  }
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	885b      	ldrh	r3, [r3, #2]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d107      	bne.n	800ad66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f940 	bl	800afe4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ad64:	e013      	b.n	800ad8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	885b      	ldrh	r3, [r3, #2]
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d10b      	bne.n	800ad86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	889b      	ldrh	r3, [r3, #4]
 800ad72:	0a1b      	lsrs	r3, r3, #8
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f930 	bl	800afe4 <USBD_CtlSendStatus>
}
 800ad84:	e003      	b.n	800ad8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f860 	bl	800ae4e <USBD_CtlError>
}
 800ad8e:	bf00      	nop
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	3b01      	subs	r3, #1
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d80b      	bhi.n	800adc6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	885b      	ldrh	r3, [r3, #2]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d10c      	bne.n	800add0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f910 	bl	800afe4 <USBD_CtlSendStatus>
      }
      break;
 800adc4:	e004      	b.n	800add0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 f840 	bl	800ae4e <USBD_CtlError>
      break;
 800adce:	e000      	b.n	800add2 <USBD_ClrFeature+0x3c>
      break;
 800add0:	bf00      	nop
  }
}
 800add2:	bf00      	nop
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b084      	sub	sp, #16
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	3301      	adds	r3, #1
 800adf4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	781a      	ldrb	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3301      	adds	r3, #1
 800ae02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f7ff fa40 	bl	800a28a <SWAPBYTE>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	3301      	adds	r3, #1
 800ae16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7ff fa33 	bl	800a28a <SWAPBYTE>
 800ae24:	4603      	mov	r3, r0
 800ae26:	461a      	mov	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	3301      	adds	r3, #1
 800ae36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f7ff fa26 	bl	800a28a <SWAPBYTE>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	461a      	mov	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	80da      	strh	r2, [r3, #6]
}
 800ae46:	bf00      	nop
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b082      	sub	sp, #8
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae58:	2180      	movs	r1, #128	@ 0x80
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fdda 	bl	800ba14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae60:	2100      	movs	r1, #0
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fdd6 	bl	800ba14 <USBD_LL_StallEP>
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d036      	beq.n	800aef4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ae8a:	6938      	ldr	r0, [r7, #16]
 800ae8c:	f000 f836 	bl	800aefc <USBD_GetLen>
 800ae90:	4603      	mov	r3, r0
 800ae92:	3301      	adds	r3, #1
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	4413      	add	r3, r2
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	7812      	ldrb	r2, [r2, #0]
 800aea8:	701a      	strb	r2, [r3, #0]
  idx++;
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
 800aeac:	3301      	adds	r3, #1
 800aeae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aeb0:	7dfb      	ldrb	r3, [r7, #23]
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	2203      	movs	r2, #3
 800aeb8:	701a      	strb	r2, [r3, #0]
  idx++;
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	3301      	adds	r3, #1
 800aebe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aec0:	e013      	b.n	800aeea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	4413      	add	r3, r2
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	7812      	ldrb	r2, [r2, #0]
 800aecc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	3301      	adds	r3, #1
 800aed2:	613b      	str	r3, [r7, #16]
    idx++;
 800aed4:	7dfb      	ldrb	r3, [r7, #23]
 800aed6:	3301      	adds	r3, #1
 800aed8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	4413      	add	r3, r2
 800aee0:	2200      	movs	r2, #0
 800aee2:	701a      	strb	r2, [r3, #0]
    idx++;
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	3301      	adds	r3, #1
 800aee8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e7      	bne.n	800aec2 <USBD_GetString+0x52>
 800aef2:	e000      	b.n	800aef6 <USBD_GetString+0x86>
    return;
 800aef4:	bf00      	nop
  }
}
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af0c:	e005      	b.n	800af1a <USBD_GetLen+0x1e>
  {
    len++;
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
 800af10:	3301      	adds	r3, #1
 800af12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	3301      	adds	r3, #1
 800af18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1f5      	bne.n	800af0e <USBD_GetLen+0x12>
  }

  return len;
 800af22:	7bfb      	ldrb	r3, [r7, #15]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2202      	movs	r2, #2
 800af40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	2100      	movs	r1, #0
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 fde5 	bl	800bb26 <USBD_LL_Transmit>

  return USBD_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	2100      	movs	r1, #0
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 fdd4 	bl	800bb26 <USBD_LL_Transmit>

  return USBD_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2203      	movs	r2, #3
 800af98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	2100      	movs	r1, #0
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f000 fdd8 	bl	800bb68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b084      	sub	sp, #16
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	2100      	movs	r1, #0
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 fdc7 	bl	800bb68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2204      	movs	r2, #4
 800aff0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aff4:	2300      	movs	r3, #0
 800aff6:	2200      	movs	r2, #0
 800aff8:	2100      	movs	r1, #0
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fd93 	bl	800bb26 <USBD_LL_Transmit>

  return USBD_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2205      	movs	r2, #5
 800b016:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b01a:	2300      	movs	r3, #0
 800b01c:	2200      	movs	r2, #0
 800b01e:	2100      	movs	r1, #0
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fda1 	bl	800bb68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b030:	b480      	push	{r7}
 800b032:	b087      	sub	sp, #28
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	4613      	mov	r3, r2
 800b03c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b03e:	2301      	movs	r3, #1
 800b040:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b042:	2300      	movs	r3, #0
 800b044:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b046:	4b1f      	ldr	r3, [pc, #124]	@ (800b0c4 <FATFS_LinkDriverEx+0x94>)
 800b048:	7a5b      	ldrb	r3, [r3, #9]
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d131      	bne.n	800b0b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b050:	4b1c      	ldr	r3, [pc, #112]	@ (800b0c4 <FATFS_LinkDriverEx+0x94>)
 800b052:	7a5b      	ldrb	r3, [r3, #9]
 800b054:	b2db      	uxtb	r3, r3
 800b056:	461a      	mov	r2, r3
 800b058:	4b1a      	ldr	r3, [pc, #104]	@ (800b0c4 <FATFS_LinkDriverEx+0x94>)
 800b05a:	2100      	movs	r1, #0
 800b05c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b05e:	4b19      	ldr	r3, [pc, #100]	@ (800b0c4 <FATFS_LinkDriverEx+0x94>)
 800b060:	7a5b      	ldrb	r3, [r3, #9]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	4a17      	ldr	r2, [pc, #92]	@ (800b0c4 <FATFS_LinkDriverEx+0x94>)
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b06e:	4b15      	ldr	r3, [pc, #84]	@ (800b0c4 <FATFS_LinkDriverEx+0x94>)
 800b070:	7a5b      	ldrb	r3, [r3, #9]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	461a      	mov	r2, r3
 800b076:	4b13      	ldr	r3, [pc, #76]	@ (800b0c4 <FATFS_LinkDriverEx+0x94>)
 800b078:	4413      	add	r3, r2
 800b07a:	79fa      	ldrb	r2, [r7, #7]
 800b07c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b07e:	4b11      	ldr	r3, [pc, #68]	@ (800b0c4 <FATFS_LinkDriverEx+0x94>)
 800b080:	7a5b      	ldrb	r3, [r3, #9]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	b2d1      	uxtb	r1, r2
 800b088:	4a0e      	ldr	r2, [pc, #56]	@ (800b0c4 <FATFS_LinkDriverEx+0x94>)
 800b08a:	7251      	strb	r1, [r2, #9]
 800b08c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b08e:	7dbb      	ldrb	r3, [r7, #22]
 800b090:	3330      	adds	r3, #48	@ 0x30
 800b092:	b2da      	uxtb	r2, r3
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	3301      	adds	r3, #1
 800b09c:	223a      	movs	r2, #58	@ 0x3a
 800b09e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	3302      	adds	r3, #2
 800b0a4:	222f      	movs	r2, #47	@ 0x2f
 800b0a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	3303      	adds	r3, #3
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	200003e4 	.word	0x200003e4

0800b0c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff ffaa 	bl	800b030 <FATFS_LinkDriverEx>
 800b0dc:	4603      	mov	r3, r0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
	...

0800b0e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	4912      	ldr	r1, [pc, #72]	@ (800b138 <MX_USB_DEVICE_Init+0x50>)
 800b0f0:	4812      	ldr	r0, [pc, #72]	@ (800b13c <MX_USB_DEVICE_Init+0x54>)
 800b0f2:	f7fe fca7 	bl	8009a44 <USBD_Init>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b0fc:	f7f5 fed2 	bl	8000ea4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b100:	490f      	ldr	r1, [pc, #60]	@ (800b140 <MX_USB_DEVICE_Init+0x58>)
 800b102:	480e      	ldr	r0, [pc, #56]	@ (800b13c <MX_USB_DEVICE_Init+0x54>)
 800b104:	f7fe fcce 	bl	8009aa4 <USBD_RegisterClass>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b10e:	f7f5 fec9 	bl	8000ea4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b112:	490c      	ldr	r1, [pc, #48]	@ (800b144 <MX_USB_DEVICE_Init+0x5c>)
 800b114:	4809      	ldr	r0, [pc, #36]	@ (800b13c <MX_USB_DEVICE_Init+0x54>)
 800b116:	f7fe fbc5 	bl	80098a4 <USBD_CDC_RegisterInterface>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b120:	f7f5 fec0 	bl	8000ea4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b124:	4805      	ldr	r0, [pc, #20]	@ (800b13c <MX_USB_DEVICE_Init+0x54>)
 800b126:	f7fe fcf3 	bl	8009b10 <USBD_Start>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b130:	f7f5 feb8 	bl	8000ea4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b134:	bf00      	nop
 800b136:	bd80      	pop	{r7, pc}
 800b138:	200000ac 	.word	0x200000ac
 800b13c:	200003f0 	.word	0x200003f0
 800b140:	20000018 	.word	0x20000018
 800b144:	20000098 	.word	0x20000098

0800b148 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b14c:	2200      	movs	r2, #0
 800b14e:	4905      	ldr	r1, [pc, #20]	@ (800b164 <CDC_Init_FS+0x1c>)
 800b150:	4805      	ldr	r0, [pc, #20]	@ (800b168 <CDC_Init_FS+0x20>)
 800b152:	f7fe fbc1 	bl	80098d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b156:	4905      	ldr	r1, [pc, #20]	@ (800b16c <CDC_Init_FS+0x24>)
 800b158:	4803      	ldr	r0, [pc, #12]	@ (800b168 <CDC_Init_FS+0x20>)
 800b15a:	f7fe fbdf 	bl	800991c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b15e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b160:	4618      	mov	r0, r3
 800b162:	bd80      	pop	{r7, pc}
 800b164:	20000ecc 	.word	0x20000ecc
 800b168:	200003f0 	.word	0x200003f0
 800b16c:	200006cc 	.word	0x200006cc

0800b170 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b170:	b480      	push	{r7}
 800b172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b174:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b176:	4618      	mov	r0, r3
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	4603      	mov	r3, r0
 800b188:	6039      	str	r1, [r7, #0]
 800b18a:	71fb      	strb	r3, [r7, #7]
 800b18c:	4613      	mov	r3, r2
 800b18e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b190:	79fb      	ldrb	r3, [r7, #7]
 800b192:	2b23      	cmp	r3, #35	@ 0x23
 800b194:	d84a      	bhi.n	800b22c <CDC_Control_FS+0xac>
 800b196:	a201      	add	r2, pc, #4	@ (adr r2, 800b19c <CDC_Control_FS+0x1c>)
 800b198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19c:	0800b22d 	.word	0x0800b22d
 800b1a0:	0800b22d 	.word	0x0800b22d
 800b1a4:	0800b22d 	.word	0x0800b22d
 800b1a8:	0800b22d 	.word	0x0800b22d
 800b1ac:	0800b22d 	.word	0x0800b22d
 800b1b0:	0800b22d 	.word	0x0800b22d
 800b1b4:	0800b22d 	.word	0x0800b22d
 800b1b8:	0800b22d 	.word	0x0800b22d
 800b1bc:	0800b22d 	.word	0x0800b22d
 800b1c0:	0800b22d 	.word	0x0800b22d
 800b1c4:	0800b22d 	.word	0x0800b22d
 800b1c8:	0800b22d 	.word	0x0800b22d
 800b1cc:	0800b22d 	.word	0x0800b22d
 800b1d0:	0800b22d 	.word	0x0800b22d
 800b1d4:	0800b22d 	.word	0x0800b22d
 800b1d8:	0800b22d 	.word	0x0800b22d
 800b1dc:	0800b22d 	.word	0x0800b22d
 800b1e0:	0800b22d 	.word	0x0800b22d
 800b1e4:	0800b22d 	.word	0x0800b22d
 800b1e8:	0800b22d 	.word	0x0800b22d
 800b1ec:	0800b22d 	.word	0x0800b22d
 800b1f0:	0800b22d 	.word	0x0800b22d
 800b1f4:	0800b22d 	.word	0x0800b22d
 800b1f8:	0800b22d 	.word	0x0800b22d
 800b1fc:	0800b22d 	.word	0x0800b22d
 800b200:	0800b22d 	.word	0x0800b22d
 800b204:	0800b22d 	.word	0x0800b22d
 800b208:	0800b22d 	.word	0x0800b22d
 800b20c:	0800b22d 	.word	0x0800b22d
 800b210:	0800b22d 	.word	0x0800b22d
 800b214:	0800b22d 	.word	0x0800b22d
 800b218:	0800b22d 	.word	0x0800b22d
 800b21c:	0800b22d 	.word	0x0800b22d
 800b220:	0800b22d 	.word	0x0800b22d
 800b224:	0800b22d 	.word	0x0800b22d
 800b228:	0800b22d 	.word	0x0800b22d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b22c:	bf00      	nop
  }

  return (USBD_OK);
 800b22e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	static uint8_t rxBuffer[RX_BUFFER_SIZE];
	static uint32_t rxLength = 0;
    // Copiez les données reçues dans rxBuffer
    for (uint32_t i = 0; i < *Len; i++) {
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
 800b24a:	e014      	b.n	800b276 <CDC_Receive_FS+0x3a>
        rxBuffer[rxLength++] = Buf[i];
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	441a      	add	r2, r3
 800b252:	4b11      	ldr	r3, [pc, #68]	@ (800b298 <CDC_Receive_FS+0x5c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	1c59      	adds	r1, r3, #1
 800b258:	480f      	ldr	r0, [pc, #60]	@ (800b298 <CDC_Receive_FS+0x5c>)
 800b25a:	6001      	str	r1, [r0, #0]
 800b25c:	7811      	ldrb	r1, [r2, #0]
 800b25e:	4a0f      	ldr	r2, [pc, #60]	@ (800b29c <CDC_Receive_FS+0x60>)
 800b260:	54d1      	strb	r1, [r2, r3]
        if (rxLength >= RX_BUFFER_SIZE) {
 800b262:	4b0d      	ldr	r3, [pc, #52]	@ (800b298 <CDC_Receive_FS+0x5c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b7f      	cmp	r3, #127	@ 0x7f
 800b268:	d902      	bls.n	800b270 <CDC_Receive_FS+0x34>
            rxLength = 0; // ou traiter comme une erreur de dépassement
 800b26a:	4b0b      	ldr	r3, [pc, #44]	@ (800b298 <CDC_Receive_FS+0x5c>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < *Len; i++) {
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3301      	adds	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d3e5      	bcc.n	800b24c <CDC_Receive_FS+0x10>
        }
    }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b280:	6879      	ldr	r1, [r7, #4]
 800b282:	4807      	ldr	r0, [pc, #28]	@ (800b2a0 <CDC_Receive_FS+0x64>)
 800b284:	f7fe fb4a 	bl	800991c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b288:	4805      	ldr	r0, [pc, #20]	@ (800b2a0 <CDC_Receive_FS+0x64>)
 800b28a:	f7fe fba5 	bl	80099d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b28e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	20001ad4 	.word	0x20001ad4
 800b29c:	20001ad8 	.word	0x20001ad8
 800b2a0:	200003f0 	.word	0x200003f0

0800b2a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ec <CDC_Transmit_FS+0x48>)
 800b2b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e00b      	b.n	800b2e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b2ca:	887b      	ldrh	r3, [r7, #2]
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	6879      	ldr	r1, [r7, #4]
 800b2d0:	4806      	ldr	r0, [pc, #24]	@ (800b2ec <CDC_Transmit_FS+0x48>)
 800b2d2:	f7fe fb01 	bl	80098d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b2d6:	4805      	ldr	r0, [pc, #20]	@ (800b2ec <CDC_Transmit_FS+0x48>)
 800b2d8:	f7fe fb3e 	bl	8009958 <USBD_CDC_TransmitPacket>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	200003f0 	.word	0x200003f0

0800b2f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b087      	sub	sp, #28
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b2fe:	2300      	movs	r3, #0
 800b300:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b302:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b306:	4618      	mov	r0, r3
 800b308:	371c      	adds	r7, #28
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
	...

0800b314 <_write>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int _write(int file, char *ptr, int len) {
 800b314:	b480      	push	{r7}
 800b316:	b087      	sub	sp, #28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++) {
 800b320:	2300      	movs	r3, #0
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	e01a      	b.n	800b35c <_write+0x48>
	  uint32_t next_write_index = (tx_write_index + 1) % TX_CIRCULAR_BUFFER_SIZE;
 800b326:	4b13      	ldr	r3, [pc, #76]	@ (800b374 <_write+0x60>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3301      	adds	r3, #1
 800b32c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b330:	613b      	str	r3, [r7, #16]

	  // Si le prochain indice d'écriture serait égal à l'indice de lecture, le buffer est plein
	  if (next_write_index == tx_read_index) {
 800b332:	4b11      	ldr	r3, [pc, #68]	@ (800b378 <_write+0x64>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d101      	bne.n	800b340 <_write+0x2c>
	    return i; // Buffer plein, caractère perdu
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	e012      	b.n	800b366 <_write+0x52>
	  }

	  tx_circular_buffer[tx_write_index] = ptr[i];
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	441a      	add	r2, r3
 800b346:	4b0b      	ldr	r3, [pc, #44]	@ (800b374 <_write+0x60>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	7811      	ldrb	r1, [r2, #0]
 800b34c:	4a0b      	ldr	r2, [pc, #44]	@ (800b37c <_write+0x68>)
 800b34e:	54d1      	strb	r1, [r2, r3]
	  tx_write_index = next_write_index;
 800b350:	4a08      	ldr	r2, [pc, #32]	@ (800b374 <_write+0x60>)
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < len; i++) {
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	3301      	adds	r3, #1
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	429a      	cmp	r2, r3
 800b362:	dbe0      	blt.n	800b326 <_write+0x12>
  }
  return len;
 800b364:	687b      	ldr	r3, [r7, #4]
}
 800b366:	4618      	mov	r0, r3
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	20001acc 	.word	0x20001acc
 800b378:	20001ad0 	.word	0x20001ad0
 800b37c:	200016cc 	.word	0x200016cc

0800b380 <transmit_from_buffer>:

void transmit_from_buffer(void) {
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
  // Vérifiez si la transmission précédente est toujours en cours
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b386:	4b1e      	ldr	r3, [pc, #120]	@ (800b400 <transmit_from_buffer+0x80>)
 800b388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b38c:	603b      	str	r3, [r7, #0]
  if (hcdc->TxState || tx_read_index == tx_write_index) {
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b394:	2b00      	cmp	r3, #0
 800b396:	d12f      	bne.n	800b3f8 <transmit_from_buffer+0x78>
 800b398:	4b1a      	ldr	r3, [pc, #104]	@ (800b404 <transmit_from_buffer+0x84>)
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	4b1a      	ldr	r3, [pc, #104]	@ (800b408 <transmit_from_buffer+0x88>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d029      	beq.n	800b3f8 <transmit_from_buffer+0x78>
    return; // Ne faites rien si la transmission est en cours ou si le buffer est vide
  }

  uint32_t count;
    if (tx_write_index > tx_read_index) {
 800b3a4:	4b18      	ldr	r3, [pc, #96]	@ (800b408 <transmit_from_buffer+0x88>)
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	4b16      	ldr	r3, [pc, #88]	@ (800b404 <transmit_from_buffer+0x84>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d906      	bls.n	800b3be <transmit_from_buffer+0x3e>
      count = tx_write_index - tx_read_index;
 800b3b0:	4b15      	ldr	r3, [pc, #84]	@ (800b408 <transmit_from_buffer+0x88>)
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	4b13      	ldr	r3, [pc, #76]	@ (800b404 <transmit_from_buffer+0x84>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	607b      	str	r3, [r7, #4]
 800b3bc:	e004      	b.n	800b3c8 <transmit_from_buffer+0x48>
    } else {
      // Cas où les données s'enroulent autour de la fin du buffer
      count = TX_CIRCULAR_BUFFER_SIZE - tx_read_index;
 800b3be:	4b11      	ldr	r3, [pc, #68]	@ (800b404 <transmit_from_buffer+0x84>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 800b3c6:	607b      	str	r3, [r7, #4]
    }

    // Limitons à une taille de paquet si nécessaire (par exemple, la taille de paquet maximale USB)
    if (count > MAX_PACKET_SIZE) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b20      	cmp	r3, #32
 800b3cc:	d901      	bls.n	800b3d2 <transmit_from_buffer+0x52>
      count = MAX_PACKET_SIZE;
 800b3ce:	2320      	movs	r3, #32
 800b3d0:	607b      	str	r3, [r7, #4]
    }

    CDC_Transmit_FS(&tx_circular_buffer[tx_read_index], count);
 800b3d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b404 <transmit_from_buffer+0x84>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a0d      	ldr	r2, [pc, #52]	@ (800b40c <transmit_from_buffer+0x8c>)
 800b3d8:	4413      	add	r3, r2
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	b292      	uxth	r2, r2
 800b3de:	4611      	mov	r1, r2
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff ff5f 	bl	800b2a4 <CDC_Transmit_FS>

    tx_read_index = (tx_read_index + count) % TX_CIRCULAR_BUFFER_SIZE;
 800b3e6:	4b07      	ldr	r3, [pc, #28]	@ (800b404 <transmit_from_buffer+0x84>)
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3f2:	4a04      	ldr	r2, [pc, #16]	@ (800b404 <transmit_from_buffer+0x84>)
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	e000      	b.n	800b3fa <transmit_from_buffer+0x7a>
    return; // Ne faites rien si la transmission est en cours ou si le buffer est vide
 800b3f8:	bf00      	nop
}
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	200003f0 	.word	0x200003f0
 800b404:	20001ad0 	.word	0x20001ad0
 800b408:	20001acc 	.word	0x20001acc
 800b40c:	200016cc 	.word	0x200016cc

0800b410 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	4603      	mov	r3, r0
 800b418:	6039      	str	r1, [r7, #0]
 800b41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2212      	movs	r2, #18
 800b420:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b422:	4b03      	ldr	r3, [pc, #12]	@ (800b430 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b424:	4618      	mov	r0, r3
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	200000c8 	.word	0x200000c8

0800b434 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	4603      	mov	r3, r0
 800b43c:	6039      	str	r1, [r7, #0]
 800b43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	2204      	movs	r2, #4
 800b444:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b446:	4b03      	ldr	r3, [pc, #12]	@ (800b454 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b448:	4618      	mov	r0, r3
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr
 800b454:	200000dc 	.word	0x200000dc

0800b458 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	4603      	mov	r3, r0
 800b460:	6039      	str	r1, [r7, #0]
 800b462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d105      	bne.n	800b476 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	4907      	ldr	r1, [pc, #28]	@ (800b48c <USBD_FS_ProductStrDescriptor+0x34>)
 800b46e:	4808      	ldr	r0, [pc, #32]	@ (800b490 <USBD_FS_ProductStrDescriptor+0x38>)
 800b470:	f7ff fcfe 	bl	800ae70 <USBD_GetString>
 800b474:	e004      	b.n	800b480 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	4904      	ldr	r1, [pc, #16]	@ (800b48c <USBD_FS_ProductStrDescriptor+0x34>)
 800b47a:	4805      	ldr	r0, [pc, #20]	@ (800b490 <USBD_FS_ProductStrDescriptor+0x38>)
 800b47c:	f7ff fcf8 	bl	800ae70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b480:	4b02      	ldr	r3, [pc, #8]	@ (800b48c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	20001b58 	.word	0x20001b58
 800b490:	0800c5d8 	.word	0x0800c5d8

0800b494 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	6039      	str	r1, [r7, #0]
 800b49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	4904      	ldr	r1, [pc, #16]	@ (800b4b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b4a4:	4804      	ldr	r0, [pc, #16]	@ (800b4b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b4a6:	f7ff fce3 	bl	800ae70 <USBD_GetString>
  return USBD_StrDesc;
 800b4aa:	4b02      	ldr	r3, [pc, #8]	@ (800b4b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	20001b58 	.word	0x20001b58
 800b4b8:	0800c5f0 	.word	0x0800c5f0

0800b4bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	6039      	str	r1, [r7, #0]
 800b4c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	221a      	movs	r2, #26
 800b4cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4ce:	f000 f843 	bl	800b558 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4d2:	4b02      	ldr	r3, [pc, #8]	@ (800b4dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	200000e0 	.word	0x200000e0

0800b4e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	6039      	str	r1, [r7, #0]
 800b4ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4ec:	79fb      	ldrb	r3, [r7, #7]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d105      	bne.n	800b4fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	4907      	ldr	r1, [pc, #28]	@ (800b514 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4f6:	4808      	ldr	r0, [pc, #32]	@ (800b518 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4f8:	f7ff fcba 	bl	800ae70 <USBD_GetString>
 800b4fc:	e004      	b.n	800b508 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	4904      	ldr	r1, [pc, #16]	@ (800b514 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b502:	4805      	ldr	r0, [pc, #20]	@ (800b518 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b504:	f7ff fcb4 	bl	800ae70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b508:	4b02      	ldr	r3, [pc, #8]	@ (800b514 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3708      	adds	r7, #8
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	20001b58 	.word	0x20001b58
 800b518:	0800c604 	.word	0x0800c604

0800b51c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	4603      	mov	r3, r0
 800b524:	6039      	str	r1, [r7, #0]
 800b526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b528:	79fb      	ldrb	r3, [r7, #7]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d105      	bne.n	800b53a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	4907      	ldr	r1, [pc, #28]	@ (800b550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b532:	4808      	ldr	r0, [pc, #32]	@ (800b554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b534:	f7ff fc9c 	bl	800ae70 <USBD_GetString>
 800b538:	e004      	b.n	800b544 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	4904      	ldr	r1, [pc, #16]	@ (800b550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b53e:	4805      	ldr	r0, [pc, #20]	@ (800b554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b540:	f7ff fc96 	bl	800ae70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b544:	4b02      	ldr	r3, [pc, #8]	@ (800b550 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b546:	4618      	mov	r0, r3
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20001b58 	.word	0x20001b58
 800b554:	0800c610 	.word	0x0800c610

0800b558 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b55e:	4b0f      	ldr	r3, [pc, #60]	@ (800b59c <Get_SerialNum+0x44>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b564:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a0 <Get_SerialNum+0x48>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b56a:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a4 <Get_SerialNum+0x4c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4413      	add	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d009      	beq.n	800b592 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b57e:	2208      	movs	r2, #8
 800b580:	4909      	ldr	r1, [pc, #36]	@ (800b5a8 <Get_SerialNum+0x50>)
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 f814 	bl	800b5b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b588:	2204      	movs	r2, #4
 800b58a:	4908      	ldr	r1, [pc, #32]	@ (800b5ac <Get_SerialNum+0x54>)
 800b58c:	68b8      	ldr	r0, [r7, #8]
 800b58e:	f000 f80f 	bl	800b5b0 <IntToUnicode>
  }
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	1fff7a10 	.word	0x1fff7a10
 800b5a0:	1fff7a14 	.word	0x1fff7a14
 800b5a4:	1fff7a18 	.word	0x1fff7a18
 800b5a8:	200000e2 	.word	0x200000e2
 800b5ac:	200000f2 	.word	0x200000f2

0800b5b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	75fb      	strb	r3, [r7, #23]
 800b5c6:	e027      	b.n	800b618 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	0f1b      	lsrs	r3, r3, #28
 800b5cc:	2b09      	cmp	r3, #9
 800b5ce:	d80b      	bhi.n	800b5e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	0f1b      	lsrs	r3, r3, #28
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	7dfb      	ldrb	r3, [r7, #23]
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	4619      	mov	r1, r3
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	440b      	add	r3, r1
 800b5e0:	3230      	adds	r2, #48	@ 0x30
 800b5e2:	b2d2      	uxtb	r2, r2
 800b5e4:	701a      	strb	r2, [r3, #0]
 800b5e6:	e00a      	b.n	800b5fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	0f1b      	lsrs	r3, r3, #28
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	005b      	lsls	r3, r3, #1
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	440b      	add	r3, r1
 800b5f8:	3237      	adds	r2, #55	@ 0x37
 800b5fa:	b2d2      	uxtb	r2, r2
 800b5fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	011b      	lsls	r3, r3, #4
 800b602:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b604:	7dfb      	ldrb	r3, [r7, #23]
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	3301      	adds	r3, #1
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	4413      	add	r3, r2
 800b60e:	2200      	movs	r2, #0
 800b610:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b612:	7dfb      	ldrb	r3, [r7, #23]
 800b614:	3301      	adds	r3, #1
 800b616:	75fb      	strb	r3, [r7, #23]
 800b618:	7dfa      	ldrb	r2, [r7, #23]
 800b61a:	79fb      	ldrb	r3, [r7, #7]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d3d3      	bcc.n	800b5c8 <IntToUnicode+0x18>
  }
}
 800b620:	bf00      	nop
 800b622:	bf00      	nop
 800b624:	371c      	adds	r7, #28
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
	...

0800b630 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b08a      	sub	sp, #40	@ 0x28
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b638:	f107 0314 	add.w	r3, r7, #20
 800b63c:	2200      	movs	r2, #0
 800b63e:	601a      	str	r2, [r3, #0]
 800b640:	605a      	str	r2, [r3, #4]
 800b642:	609a      	str	r2, [r3, #8]
 800b644:	60da      	str	r2, [r3, #12]
 800b646:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b650:	d13a      	bne.n	800b6c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b652:	2300      	movs	r3, #0
 800b654:	613b      	str	r3, [r7, #16]
 800b656:	4b1e      	ldr	r3, [pc, #120]	@ (800b6d0 <HAL_PCD_MspInit+0xa0>)
 800b658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b65a:	4a1d      	ldr	r2, [pc, #116]	@ (800b6d0 <HAL_PCD_MspInit+0xa0>)
 800b65c:	f043 0301 	orr.w	r3, r3, #1
 800b660:	6313      	str	r3, [r2, #48]	@ 0x30
 800b662:	4b1b      	ldr	r3, [pc, #108]	@ (800b6d0 <HAL_PCD_MspInit+0xa0>)
 800b664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	613b      	str	r3, [r7, #16]
 800b66c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b66e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b674:	2302      	movs	r3, #2
 800b676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b678:	2300      	movs	r3, #0
 800b67a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b67c:	2303      	movs	r3, #3
 800b67e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b680:	230a      	movs	r3, #10
 800b682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b684:	f107 0314 	add.w	r3, r7, #20
 800b688:	4619      	mov	r1, r3
 800b68a:	4812      	ldr	r0, [pc, #72]	@ (800b6d4 <HAL_PCD_MspInit+0xa4>)
 800b68c:	f7f6 fc4e 	bl	8001f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b690:	4b0f      	ldr	r3, [pc, #60]	@ (800b6d0 <HAL_PCD_MspInit+0xa0>)
 800b692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b694:	4a0e      	ldr	r2, [pc, #56]	@ (800b6d0 <HAL_PCD_MspInit+0xa0>)
 800b696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b69a:	6353      	str	r3, [r2, #52]	@ 0x34
 800b69c:	2300      	movs	r3, #0
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b6d0 <HAL_PCD_MspInit+0xa0>)
 800b6a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6a4:	4a0a      	ldr	r2, [pc, #40]	@ (800b6d0 <HAL_PCD_MspInit+0xa0>)
 800b6a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b6aa:	6453      	str	r3, [r2, #68]	@ 0x44
 800b6ac:	4b08      	ldr	r3, [pc, #32]	@ (800b6d0 <HAL_PCD_MspInit+0xa0>)
 800b6ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	2043      	movs	r0, #67	@ 0x43
 800b6be:	f7f6 f8d6 	bl	800186e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6c2:	2043      	movs	r0, #67	@ 0x43
 800b6c4:	f7f6 f8ef 	bl	80018a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6c8:	bf00      	nop
 800b6ca:	3728      	adds	r7, #40	@ 0x28
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	40023800 	.word	0x40023800
 800b6d4:	40020000 	.word	0x40020000

0800b6d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	f7fe fa5b 	bl	8009baa <USBD_LL_SetupStage>
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b70e:	78fa      	ldrb	r2, [r7, #3]
 800b710:	6879      	ldr	r1, [r7, #4]
 800b712:	4613      	mov	r3, r2
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	4413      	add	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	440b      	add	r3, r1
 800b71c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	78fb      	ldrb	r3, [r7, #3]
 800b724:	4619      	mov	r1, r3
 800b726:	f7fe fa95 	bl	8009c54 <USBD_LL_DataOutStage>
}
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b082      	sub	sp, #8
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	460b      	mov	r3, r1
 800b73c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b744:	78fa      	ldrb	r2, [r7, #3]
 800b746:	6879      	ldr	r1, [r7, #4]
 800b748:	4613      	mov	r3, r2
 800b74a:	00db      	lsls	r3, r3, #3
 800b74c:	4413      	add	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	440b      	add	r3, r1
 800b752:	3320      	adds	r3, #32
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	78fb      	ldrb	r3, [r7, #3]
 800b758:	4619      	mov	r1, r3
 800b75a:	f7fe fb2e 	bl	8009dba <USBD_LL_DataInStage>
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b774:	4618      	mov	r0, r3
 800b776:	f7fe fc68 	bl	800a04a <USBD_LL_SOF>
}
 800b77a:	bf00      	nop
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b084      	sub	sp, #16
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b78a:	2301      	movs	r3, #1
 800b78c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	79db      	ldrb	r3, [r3, #7]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d102      	bne.n	800b79c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b796:	2300      	movs	r3, #0
 800b798:	73fb      	strb	r3, [r7, #15]
 800b79a:	e008      	b.n	800b7ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	79db      	ldrb	r3, [r3, #7]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d102      	bne.n	800b7aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	73fb      	strb	r3, [r7, #15]
 800b7a8:	e001      	b.n	800b7ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b7aa:	f7f5 fb7b 	bl	8000ea4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7b4:	7bfa      	ldrb	r2, [r7, #15]
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fe fc02 	bl	8009fc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7fe fbaa 	bl	8009f1e <USBD_LL_Reset>
}
 800b7ca:	bf00      	nop
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
	...

0800b7d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fe fbfd 	bl	8009fe2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	6812      	ldr	r2, [r2, #0]
 800b7f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b7fa:	f043 0301 	orr.w	r3, r3, #1
 800b7fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	7adb      	ldrb	r3, [r3, #11]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d005      	beq.n	800b814 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b808:	4b04      	ldr	r3, [pc, #16]	@ (800b81c <HAL_PCD_SuspendCallback+0x48>)
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	4a03      	ldr	r2, [pc, #12]	@ (800b81c <HAL_PCD_SuspendCallback+0x48>)
 800b80e:	f043 0306 	orr.w	r3, r3, #6
 800b812:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	e000ed00 	.word	0xe000ed00

0800b820 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fbf3 	bl	800a01a <USBD_LL_Resume>
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b84e:	78fa      	ldrb	r2, [r7, #3]
 800b850:	4611      	mov	r1, r2
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe fc4b 	bl	800a0ee <USBD_LL_IsoOUTIncomplete>
}
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b872:	78fa      	ldrb	r2, [r7, #3]
 800b874:	4611      	mov	r1, r2
 800b876:	4618      	mov	r0, r3
 800b878:	f7fe fc07 	bl	800a08a <USBD_LL_IsoINIncomplete>
}
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fc5d 	bl	800a152 <USBD_LL_DevConnected>
}
 800b898:	bf00      	nop
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fe fc5a 	bl	800a168 <USBD_LL_DevDisconnected>
}
 800b8b4:	bf00      	nop
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d13c      	bne.n	800b946 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8cc:	4a20      	ldr	r2, [pc, #128]	@ (800b950 <USBD_LL_Init+0x94>)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a1e      	ldr	r2, [pc, #120]	@ (800b950 <USBD_LL_Init+0x94>)
 800b8d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8dc:	4b1c      	ldr	r3, [pc, #112]	@ (800b950 <USBD_LL_Init+0x94>)
 800b8de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b8e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b8e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b950 <USBD_LL_Init+0x94>)
 800b8e6:	2204      	movs	r2, #4
 800b8e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8ea:	4b19      	ldr	r3, [pc, #100]	@ (800b950 <USBD_LL_Init+0x94>)
 800b8ec:	2202      	movs	r2, #2
 800b8ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8f0:	4b17      	ldr	r3, [pc, #92]	@ (800b950 <USBD_LL_Init+0x94>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8f6:	4b16      	ldr	r3, [pc, #88]	@ (800b950 <USBD_LL_Init+0x94>)
 800b8f8:	2202      	movs	r2, #2
 800b8fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8fc:	4b14      	ldr	r3, [pc, #80]	@ (800b950 <USBD_LL_Init+0x94>)
 800b8fe:	2200      	movs	r2, #0
 800b900:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b902:	4b13      	ldr	r3, [pc, #76]	@ (800b950 <USBD_LL_Init+0x94>)
 800b904:	2200      	movs	r2, #0
 800b906:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b908:	4b11      	ldr	r3, [pc, #68]	@ (800b950 <USBD_LL_Init+0x94>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b90e:	4b10      	ldr	r3, [pc, #64]	@ (800b950 <USBD_LL_Init+0x94>)
 800b910:	2200      	movs	r2, #0
 800b912:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b914:	4b0e      	ldr	r3, [pc, #56]	@ (800b950 <USBD_LL_Init+0x94>)
 800b916:	2200      	movs	r2, #0
 800b918:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b91a:	480d      	ldr	r0, [pc, #52]	@ (800b950 <USBD_LL_Init+0x94>)
 800b91c:	f7f6 fcd3 	bl	80022c6 <HAL_PCD_Init>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d001      	beq.n	800b92a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b926:	f7f5 fabd 	bl	8000ea4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b92a:	2180      	movs	r1, #128	@ 0x80
 800b92c:	4808      	ldr	r0, [pc, #32]	@ (800b950 <USBD_LL_Init+0x94>)
 800b92e:	f7f7 fefe 	bl	800372e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b932:	2240      	movs	r2, #64	@ 0x40
 800b934:	2100      	movs	r1, #0
 800b936:	4806      	ldr	r0, [pc, #24]	@ (800b950 <USBD_LL_Init+0x94>)
 800b938:	f7f7 feb2 	bl	80036a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b93c:	2280      	movs	r2, #128	@ 0x80
 800b93e:	2101      	movs	r1, #1
 800b940:	4803      	ldr	r0, [pc, #12]	@ (800b950 <USBD_LL_Init+0x94>)
 800b942:	f7f7 fead 	bl	80036a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20001d58 	.word	0x20001d58

0800b954 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7f6 fdba 	bl	80024e4 <HAL_PCD_Start>
 800b970:	4603      	mov	r3, r0
 800b972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b974:	7bfb      	ldrb	r3, [r7, #15]
 800b976:	4618      	mov	r0, r3
 800b978:	f000 f942 	bl	800bc00 <USBD_Get_USB_Status>
 800b97c:	4603      	mov	r3, r0
 800b97e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b980:	7bbb      	ldrb	r3, [r7, #14]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	4608      	mov	r0, r1
 800b994:	4611      	mov	r1, r2
 800b996:	461a      	mov	r2, r3
 800b998:	4603      	mov	r3, r0
 800b99a:	70fb      	strb	r3, [r7, #3]
 800b99c:	460b      	mov	r3, r1
 800b99e:	70bb      	strb	r3, [r7, #2]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b9b2:	78bb      	ldrb	r3, [r7, #2]
 800b9b4:	883a      	ldrh	r2, [r7, #0]
 800b9b6:	78f9      	ldrb	r1, [r7, #3]
 800b9b8:	f7f7 fa8e 	bl	8002ed8 <HAL_PCD_EP_Open>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 f91c 	bl	800bc00 <USBD_Get_USB_Status>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b084      	sub	sp, #16
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	460b      	mov	r3, r1
 800b9e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9f0:	78fa      	ldrb	r2, [r7, #3]
 800b9f2:	4611      	mov	r1, r2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7f7 fad7 	bl	8002fa8 <HAL_PCD_EP_Close>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 f8fd 	bl	800bc00 <USBD_Get_USB_Status>
 800ba06:	4603      	mov	r3, r0
 800ba08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba2e:	78fa      	ldrb	r2, [r7, #3]
 800ba30:	4611      	mov	r1, r2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7f7 fb8f 	bl	8003156 <HAL_PCD_EP_SetStall>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f8de 	bl	800bc00 <USBD_Get_USB_Status>
 800ba44:	4603      	mov	r3, r0
 800ba46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba6c:	78fa      	ldrb	r2, [r7, #3]
 800ba6e:	4611      	mov	r1, r2
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7f7 fbd3 	bl	800321c <HAL_PCD_EP_ClrStall>
 800ba76:	4603      	mov	r3, r0
 800ba78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 f8bf 	bl	800bc00 <USBD_Get_USB_Status>
 800ba82:	4603      	mov	r3, r0
 800ba84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800baa2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800baa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	da0b      	bge.n	800bac4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800baac:	78fb      	ldrb	r3, [r7, #3]
 800baae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bab2:	68f9      	ldr	r1, [r7, #12]
 800bab4:	4613      	mov	r3, r2
 800bab6:	00db      	lsls	r3, r3, #3
 800bab8:	4413      	add	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	440b      	add	r3, r1
 800babe:	3316      	adds	r3, #22
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	e00b      	b.n	800badc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bac4:	78fb      	ldrb	r3, [r7, #3]
 800bac6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800baca:	68f9      	ldr	r1, [r7, #12]
 800bacc:	4613      	mov	r3, r2
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	4413      	add	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	440b      	add	r3, r1
 800bad6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bada:	781b      	ldrb	r3, [r3, #0]
  }
}
 800badc:	4618      	mov	r0, r3
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb02:	78fa      	ldrb	r2, [r7, #3]
 800bb04:	4611      	mov	r1, r2
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7f7 f9c2 	bl	8002e90 <HAL_PCD_SetAddress>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 f874 	bl	800bc00 <USBD_Get_USB_Status>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b086      	sub	sp, #24
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	607a      	str	r2, [r7, #4]
 800bb30:	603b      	str	r3, [r7, #0]
 800bb32:	460b      	mov	r3, r1
 800bb34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb44:	7af9      	ldrb	r1, [r7, #11]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	f7f7 faca 	bl	80030e2 <HAL_PCD_EP_Transmit>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb52:	7dfb      	ldrb	r3, [r7, #23]
 800bb54:	4618      	mov	r0, r3
 800bb56:	f000 f853 	bl	800bc00 <USBD_Get_USB_Status>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	607a      	str	r2, [r7, #4]
 800bb72:	603b      	str	r3, [r7, #0]
 800bb74:	460b      	mov	r3, r1
 800bb76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb86:	7af9      	ldrb	r1, [r7, #11]
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	f7f7 fa56 	bl	800303c <HAL_PCD_EP_Receive>
 800bb90:	4603      	mov	r3, r0
 800bb92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb94:	7dfb      	ldrb	r3, [r7, #23]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 f832 	bl	800bc00 <USBD_Get_USB_Status>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bba0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b082      	sub	sp, #8
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbbc:	78fa      	ldrb	r2, [r7, #3]
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7f7 fa76 	bl	80030b2 <HAL_PCD_EP_GetRxCount>
 800bbc6:	4603      	mov	r3, r0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bbd8:	4b03      	ldr	r3, [pc, #12]	@ (800bbe8 <USBD_static_malloc+0x18>)
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	370c      	adds	r7, #12
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	2000223c 	.word	0x2000223c

0800bbec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]

}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4603      	mov	r3, r0
 800bc08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	2b03      	cmp	r3, #3
 800bc12:	d817      	bhi.n	800bc44 <USBD_Get_USB_Status+0x44>
 800bc14:	a201      	add	r2, pc, #4	@ (adr r2, 800bc1c <USBD_Get_USB_Status+0x1c>)
 800bc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1a:	bf00      	nop
 800bc1c:	0800bc2d 	.word	0x0800bc2d
 800bc20:	0800bc33 	.word	0x0800bc33
 800bc24:	0800bc39 	.word	0x0800bc39
 800bc28:	0800bc3f 	.word	0x0800bc3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc30:	e00b      	b.n	800bc4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc32:	2303      	movs	r3, #3
 800bc34:	73fb      	strb	r3, [r7, #15]
    break;
 800bc36:	e008      	b.n	800bc4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc3c:	e005      	b.n	800bc4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	73fb      	strb	r3, [r7, #15]
    break;
 800bc42:	e002      	b.n	800bc4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc44:	2303      	movs	r3, #3
 800bc46:	73fb      	strb	r3, [r7, #15]
    break;
 800bc48:	bf00      	nop
  }
  return usb_status;
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <sbrk_aligned>:
 800bc58:	b570      	push	{r4, r5, r6, lr}
 800bc5a:	4e0f      	ldr	r6, [pc, #60]	@ (800bc98 <sbrk_aligned+0x40>)
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	6831      	ldr	r1, [r6, #0]
 800bc60:	4605      	mov	r5, r0
 800bc62:	b911      	cbnz	r1, 800bc6a <sbrk_aligned+0x12>
 800bc64:	f000 fada 	bl	800c21c <_sbrk_r>
 800bc68:	6030      	str	r0, [r6, #0]
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	f000 fad5 	bl	800c21c <_sbrk_r>
 800bc72:	1c43      	adds	r3, r0, #1
 800bc74:	d103      	bne.n	800bc7e <sbrk_aligned+0x26>
 800bc76:	f04f 34ff 	mov.w	r4, #4294967295
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	bd70      	pop	{r4, r5, r6, pc}
 800bc7e:	1cc4      	adds	r4, r0, #3
 800bc80:	f024 0403 	bic.w	r4, r4, #3
 800bc84:	42a0      	cmp	r0, r4
 800bc86:	d0f8      	beq.n	800bc7a <sbrk_aligned+0x22>
 800bc88:	1a21      	subs	r1, r4, r0
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f000 fac6 	bl	800c21c <_sbrk_r>
 800bc90:	3001      	adds	r0, #1
 800bc92:	d1f2      	bne.n	800bc7a <sbrk_aligned+0x22>
 800bc94:	e7ef      	b.n	800bc76 <sbrk_aligned+0x1e>
 800bc96:	bf00      	nop
 800bc98:	2000245c 	.word	0x2000245c

0800bc9c <_malloc_r>:
 800bc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca0:	1ccd      	adds	r5, r1, #3
 800bca2:	f025 0503 	bic.w	r5, r5, #3
 800bca6:	3508      	adds	r5, #8
 800bca8:	2d0c      	cmp	r5, #12
 800bcaa:	bf38      	it	cc
 800bcac:	250c      	movcc	r5, #12
 800bcae:	2d00      	cmp	r5, #0
 800bcb0:	4606      	mov	r6, r0
 800bcb2:	db01      	blt.n	800bcb8 <_malloc_r+0x1c>
 800bcb4:	42a9      	cmp	r1, r5
 800bcb6:	d904      	bls.n	800bcc2 <_malloc_r+0x26>
 800bcb8:	230c      	movs	r3, #12
 800bcba:	6033      	str	r3, [r6, #0]
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd98 <_malloc_r+0xfc>
 800bcc6:	f000 f869 	bl	800bd9c <__malloc_lock>
 800bcca:	f8d8 3000 	ldr.w	r3, [r8]
 800bcce:	461c      	mov	r4, r3
 800bcd0:	bb44      	cbnz	r4, 800bd24 <_malloc_r+0x88>
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f7ff ffbf 	bl	800bc58 <sbrk_aligned>
 800bcda:	1c43      	adds	r3, r0, #1
 800bcdc:	4604      	mov	r4, r0
 800bcde:	d158      	bne.n	800bd92 <_malloc_r+0xf6>
 800bce0:	f8d8 4000 	ldr.w	r4, [r8]
 800bce4:	4627      	mov	r7, r4
 800bce6:	2f00      	cmp	r7, #0
 800bce8:	d143      	bne.n	800bd72 <_malloc_r+0xd6>
 800bcea:	2c00      	cmp	r4, #0
 800bcec:	d04b      	beq.n	800bd86 <_malloc_r+0xea>
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	eb04 0903 	add.w	r9, r4, r3
 800bcf8:	f000 fa90 	bl	800c21c <_sbrk_r>
 800bcfc:	4581      	cmp	r9, r0
 800bcfe:	d142      	bne.n	800bd86 <_malloc_r+0xea>
 800bd00:	6821      	ldr	r1, [r4, #0]
 800bd02:	1a6d      	subs	r5, r5, r1
 800bd04:	4629      	mov	r1, r5
 800bd06:	4630      	mov	r0, r6
 800bd08:	f7ff ffa6 	bl	800bc58 <sbrk_aligned>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d03a      	beq.n	800bd86 <_malloc_r+0xea>
 800bd10:	6823      	ldr	r3, [r4, #0]
 800bd12:	442b      	add	r3, r5
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	f8d8 3000 	ldr.w	r3, [r8]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	bb62      	cbnz	r2, 800bd78 <_malloc_r+0xdc>
 800bd1e:	f8c8 7000 	str.w	r7, [r8]
 800bd22:	e00f      	b.n	800bd44 <_malloc_r+0xa8>
 800bd24:	6822      	ldr	r2, [r4, #0]
 800bd26:	1b52      	subs	r2, r2, r5
 800bd28:	d420      	bmi.n	800bd6c <_malloc_r+0xd0>
 800bd2a:	2a0b      	cmp	r2, #11
 800bd2c:	d917      	bls.n	800bd5e <_malloc_r+0xc2>
 800bd2e:	1961      	adds	r1, r4, r5
 800bd30:	42a3      	cmp	r3, r4
 800bd32:	6025      	str	r5, [r4, #0]
 800bd34:	bf18      	it	ne
 800bd36:	6059      	strne	r1, [r3, #4]
 800bd38:	6863      	ldr	r3, [r4, #4]
 800bd3a:	bf08      	it	eq
 800bd3c:	f8c8 1000 	streq.w	r1, [r8]
 800bd40:	5162      	str	r2, [r4, r5]
 800bd42:	604b      	str	r3, [r1, #4]
 800bd44:	4630      	mov	r0, r6
 800bd46:	f000 f82f 	bl	800bda8 <__malloc_unlock>
 800bd4a:	f104 000b 	add.w	r0, r4, #11
 800bd4e:	1d23      	adds	r3, r4, #4
 800bd50:	f020 0007 	bic.w	r0, r0, #7
 800bd54:	1ac2      	subs	r2, r0, r3
 800bd56:	bf1c      	itt	ne
 800bd58:	1a1b      	subne	r3, r3, r0
 800bd5a:	50a3      	strne	r3, [r4, r2]
 800bd5c:	e7af      	b.n	800bcbe <_malloc_r+0x22>
 800bd5e:	6862      	ldr	r2, [r4, #4]
 800bd60:	42a3      	cmp	r3, r4
 800bd62:	bf0c      	ite	eq
 800bd64:	f8c8 2000 	streq.w	r2, [r8]
 800bd68:	605a      	strne	r2, [r3, #4]
 800bd6a:	e7eb      	b.n	800bd44 <_malloc_r+0xa8>
 800bd6c:	4623      	mov	r3, r4
 800bd6e:	6864      	ldr	r4, [r4, #4]
 800bd70:	e7ae      	b.n	800bcd0 <_malloc_r+0x34>
 800bd72:	463c      	mov	r4, r7
 800bd74:	687f      	ldr	r7, [r7, #4]
 800bd76:	e7b6      	b.n	800bce6 <_malloc_r+0x4a>
 800bd78:	461a      	mov	r2, r3
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	d1fb      	bne.n	800bd78 <_malloc_r+0xdc>
 800bd80:	2300      	movs	r3, #0
 800bd82:	6053      	str	r3, [r2, #4]
 800bd84:	e7de      	b.n	800bd44 <_malloc_r+0xa8>
 800bd86:	230c      	movs	r3, #12
 800bd88:	6033      	str	r3, [r6, #0]
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	f000 f80c 	bl	800bda8 <__malloc_unlock>
 800bd90:	e794      	b.n	800bcbc <_malloc_r+0x20>
 800bd92:	6005      	str	r5, [r0, #0]
 800bd94:	e7d6      	b.n	800bd44 <_malloc_r+0xa8>
 800bd96:	bf00      	nop
 800bd98:	20002460 	.word	0x20002460

0800bd9c <__malloc_lock>:
 800bd9c:	4801      	ldr	r0, [pc, #4]	@ (800bda4 <__malloc_lock+0x8>)
 800bd9e:	f000 ba8a 	b.w	800c2b6 <__retarget_lock_acquire_recursive>
 800bda2:	bf00      	nop
 800bda4:	200025a4 	.word	0x200025a4

0800bda8 <__malloc_unlock>:
 800bda8:	4801      	ldr	r0, [pc, #4]	@ (800bdb0 <__malloc_unlock+0x8>)
 800bdaa:	f000 ba85 	b.w	800c2b8 <__retarget_lock_release_recursive>
 800bdae:	bf00      	nop
 800bdb0:	200025a4 	.word	0x200025a4

0800bdb4 <std>:
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	b510      	push	{r4, lr}
 800bdb8:	4604      	mov	r4, r0
 800bdba:	e9c0 3300 	strd	r3, r3, [r0]
 800bdbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdc2:	6083      	str	r3, [r0, #8]
 800bdc4:	8181      	strh	r1, [r0, #12]
 800bdc6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bdc8:	81c2      	strh	r2, [r0, #14]
 800bdca:	6183      	str	r3, [r0, #24]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	2208      	movs	r2, #8
 800bdd0:	305c      	adds	r0, #92	@ 0x5c
 800bdd2:	f000 f9e7 	bl	800c1a4 <memset>
 800bdd6:	4b0d      	ldr	r3, [pc, #52]	@ (800be0c <std+0x58>)
 800bdd8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bdda:	4b0d      	ldr	r3, [pc, #52]	@ (800be10 <std+0x5c>)
 800bddc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bdde:	4b0d      	ldr	r3, [pc, #52]	@ (800be14 <std+0x60>)
 800bde0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bde2:	4b0d      	ldr	r3, [pc, #52]	@ (800be18 <std+0x64>)
 800bde4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bde6:	4b0d      	ldr	r3, [pc, #52]	@ (800be1c <std+0x68>)
 800bde8:	6224      	str	r4, [r4, #32]
 800bdea:	429c      	cmp	r4, r3
 800bdec:	d006      	beq.n	800bdfc <std+0x48>
 800bdee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bdf2:	4294      	cmp	r4, r2
 800bdf4:	d002      	beq.n	800bdfc <std+0x48>
 800bdf6:	33d0      	adds	r3, #208	@ 0xd0
 800bdf8:	429c      	cmp	r4, r3
 800bdfa:	d105      	bne.n	800be08 <std+0x54>
 800bdfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be04:	f000 ba56 	b.w	800c2b4 <__retarget_lock_init_recursive>
 800be08:	bd10      	pop	{r4, pc}
 800be0a:	bf00      	nop
 800be0c:	0800bff5 	.word	0x0800bff5
 800be10:	0800c017 	.word	0x0800c017
 800be14:	0800c04f 	.word	0x0800c04f
 800be18:	0800c073 	.word	0x0800c073
 800be1c:	20002464 	.word	0x20002464

0800be20 <stdio_exit_handler>:
 800be20:	4a02      	ldr	r2, [pc, #8]	@ (800be2c <stdio_exit_handler+0xc>)
 800be22:	4903      	ldr	r1, [pc, #12]	@ (800be30 <stdio_exit_handler+0x10>)
 800be24:	4803      	ldr	r0, [pc, #12]	@ (800be34 <stdio_exit_handler+0x14>)
 800be26:	f000 b869 	b.w	800befc <_fwalk_sglue>
 800be2a:	bf00      	nop
 800be2c:	200000fc 	.word	0x200000fc
 800be30:	0800c459 	.word	0x0800c459
 800be34:	2000010c 	.word	0x2000010c

0800be38 <cleanup_stdio>:
 800be38:	6841      	ldr	r1, [r0, #4]
 800be3a:	4b0c      	ldr	r3, [pc, #48]	@ (800be6c <cleanup_stdio+0x34>)
 800be3c:	4299      	cmp	r1, r3
 800be3e:	b510      	push	{r4, lr}
 800be40:	4604      	mov	r4, r0
 800be42:	d001      	beq.n	800be48 <cleanup_stdio+0x10>
 800be44:	f000 fb08 	bl	800c458 <_fflush_r>
 800be48:	68a1      	ldr	r1, [r4, #8]
 800be4a:	4b09      	ldr	r3, [pc, #36]	@ (800be70 <cleanup_stdio+0x38>)
 800be4c:	4299      	cmp	r1, r3
 800be4e:	d002      	beq.n	800be56 <cleanup_stdio+0x1e>
 800be50:	4620      	mov	r0, r4
 800be52:	f000 fb01 	bl	800c458 <_fflush_r>
 800be56:	68e1      	ldr	r1, [r4, #12]
 800be58:	4b06      	ldr	r3, [pc, #24]	@ (800be74 <cleanup_stdio+0x3c>)
 800be5a:	4299      	cmp	r1, r3
 800be5c:	d004      	beq.n	800be68 <cleanup_stdio+0x30>
 800be5e:	4620      	mov	r0, r4
 800be60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be64:	f000 baf8 	b.w	800c458 <_fflush_r>
 800be68:	bd10      	pop	{r4, pc}
 800be6a:	bf00      	nop
 800be6c:	20002464 	.word	0x20002464
 800be70:	200024cc 	.word	0x200024cc
 800be74:	20002534 	.word	0x20002534

0800be78 <global_stdio_init.part.0>:
 800be78:	b510      	push	{r4, lr}
 800be7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bea8 <global_stdio_init.part.0+0x30>)
 800be7c:	4c0b      	ldr	r4, [pc, #44]	@ (800beac <global_stdio_init.part.0+0x34>)
 800be7e:	4a0c      	ldr	r2, [pc, #48]	@ (800beb0 <global_stdio_init.part.0+0x38>)
 800be80:	601a      	str	r2, [r3, #0]
 800be82:	4620      	mov	r0, r4
 800be84:	2200      	movs	r2, #0
 800be86:	2104      	movs	r1, #4
 800be88:	f7ff ff94 	bl	800bdb4 <std>
 800be8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800be90:	2201      	movs	r2, #1
 800be92:	2109      	movs	r1, #9
 800be94:	f7ff ff8e 	bl	800bdb4 <std>
 800be98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be9c:	2202      	movs	r2, #2
 800be9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bea2:	2112      	movs	r1, #18
 800bea4:	f7ff bf86 	b.w	800bdb4 <std>
 800bea8:	2000259c 	.word	0x2000259c
 800beac:	20002464 	.word	0x20002464
 800beb0:	0800be21 	.word	0x0800be21

0800beb4 <__sfp_lock_acquire>:
 800beb4:	4801      	ldr	r0, [pc, #4]	@ (800bebc <__sfp_lock_acquire+0x8>)
 800beb6:	f000 b9fe 	b.w	800c2b6 <__retarget_lock_acquire_recursive>
 800beba:	bf00      	nop
 800bebc:	200025a5 	.word	0x200025a5

0800bec0 <__sfp_lock_release>:
 800bec0:	4801      	ldr	r0, [pc, #4]	@ (800bec8 <__sfp_lock_release+0x8>)
 800bec2:	f000 b9f9 	b.w	800c2b8 <__retarget_lock_release_recursive>
 800bec6:	bf00      	nop
 800bec8:	200025a5 	.word	0x200025a5

0800becc <__sinit>:
 800becc:	b510      	push	{r4, lr}
 800bece:	4604      	mov	r4, r0
 800bed0:	f7ff fff0 	bl	800beb4 <__sfp_lock_acquire>
 800bed4:	6a23      	ldr	r3, [r4, #32]
 800bed6:	b11b      	cbz	r3, 800bee0 <__sinit+0x14>
 800bed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bedc:	f7ff bff0 	b.w	800bec0 <__sfp_lock_release>
 800bee0:	4b04      	ldr	r3, [pc, #16]	@ (800bef4 <__sinit+0x28>)
 800bee2:	6223      	str	r3, [r4, #32]
 800bee4:	4b04      	ldr	r3, [pc, #16]	@ (800bef8 <__sinit+0x2c>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1f5      	bne.n	800bed8 <__sinit+0xc>
 800beec:	f7ff ffc4 	bl	800be78 <global_stdio_init.part.0>
 800bef0:	e7f2      	b.n	800bed8 <__sinit+0xc>
 800bef2:	bf00      	nop
 800bef4:	0800be39 	.word	0x0800be39
 800bef8:	2000259c 	.word	0x2000259c

0800befc <_fwalk_sglue>:
 800befc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf00:	4607      	mov	r7, r0
 800bf02:	4688      	mov	r8, r1
 800bf04:	4614      	mov	r4, r2
 800bf06:	2600      	movs	r6, #0
 800bf08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf0c:	f1b9 0901 	subs.w	r9, r9, #1
 800bf10:	d505      	bpl.n	800bf1e <_fwalk_sglue+0x22>
 800bf12:	6824      	ldr	r4, [r4, #0]
 800bf14:	2c00      	cmp	r4, #0
 800bf16:	d1f7      	bne.n	800bf08 <_fwalk_sglue+0xc>
 800bf18:	4630      	mov	r0, r6
 800bf1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf1e:	89ab      	ldrh	r3, [r5, #12]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d907      	bls.n	800bf34 <_fwalk_sglue+0x38>
 800bf24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	d003      	beq.n	800bf34 <_fwalk_sglue+0x38>
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4638      	mov	r0, r7
 800bf30:	47c0      	blx	r8
 800bf32:	4306      	orrs	r6, r0
 800bf34:	3568      	adds	r5, #104	@ 0x68
 800bf36:	e7e9      	b.n	800bf0c <_fwalk_sglue+0x10>

0800bf38 <_puts_r>:
 800bf38:	6a03      	ldr	r3, [r0, #32]
 800bf3a:	b570      	push	{r4, r5, r6, lr}
 800bf3c:	6884      	ldr	r4, [r0, #8]
 800bf3e:	4605      	mov	r5, r0
 800bf40:	460e      	mov	r6, r1
 800bf42:	b90b      	cbnz	r3, 800bf48 <_puts_r+0x10>
 800bf44:	f7ff ffc2 	bl	800becc <__sinit>
 800bf48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf4a:	07db      	lsls	r3, r3, #31
 800bf4c:	d405      	bmi.n	800bf5a <_puts_r+0x22>
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	0598      	lsls	r0, r3, #22
 800bf52:	d402      	bmi.n	800bf5a <_puts_r+0x22>
 800bf54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf56:	f000 f9ae 	bl	800c2b6 <__retarget_lock_acquire_recursive>
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	0719      	lsls	r1, r3, #28
 800bf5e:	d502      	bpl.n	800bf66 <_puts_r+0x2e>
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d135      	bne.n	800bfd2 <_puts_r+0x9a>
 800bf66:	4621      	mov	r1, r4
 800bf68:	4628      	mov	r0, r5
 800bf6a:	f000 f8c5 	bl	800c0f8 <__swsetup_r>
 800bf6e:	b380      	cbz	r0, 800bfd2 <_puts_r+0x9a>
 800bf70:	f04f 35ff 	mov.w	r5, #4294967295
 800bf74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf76:	07da      	lsls	r2, r3, #31
 800bf78:	d405      	bmi.n	800bf86 <_puts_r+0x4e>
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	059b      	lsls	r3, r3, #22
 800bf7e:	d402      	bmi.n	800bf86 <_puts_r+0x4e>
 800bf80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf82:	f000 f999 	bl	800c2b8 <__retarget_lock_release_recursive>
 800bf86:	4628      	mov	r0, r5
 800bf88:	bd70      	pop	{r4, r5, r6, pc}
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	da04      	bge.n	800bf98 <_puts_r+0x60>
 800bf8e:	69a2      	ldr	r2, [r4, #24]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	dc17      	bgt.n	800bfc4 <_puts_r+0x8c>
 800bf94:	290a      	cmp	r1, #10
 800bf96:	d015      	beq.n	800bfc4 <_puts_r+0x8c>
 800bf98:	6823      	ldr	r3, [r4, #0]
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	6022      	str	r2, [r4, #0]
 800bf9e:	7019      	strb	r1, [r3, #0]
 800bfa0:	68a3      	ldr	r3, [r4, #8]
 800bfa2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	60a3      	str	r3, [r4, #8]
 800bfaa:	2900      	cmp	r1, #0
 800bfac:	d1ed      	bne.n	800bf8a <_puts_r+0x52>
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	da11      	bge.n	800bfd6 <_puts_r+0x9e>
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	210a      	movs	r1, #10
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	f000 f85f 	bl	800c07a <__swbuf_r>
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d0d7      	beq.n	800bf70 <_puts_r+0x38>
 800bfc0:	250a      	movs	r5, #10
 800bfc2:	e7d7      	b.n	800bf74 <_puts_r+0x3c>
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f000 f857 	bl	800c07a <__swbuf_r>
 800bfcc:	3001      	adds	r0, #1
 800bfce:	d1e7      	bne.n	800bfa0 <_puts_r+0x68>
 800bfd0:	e7ce      	b.n	800bf70 <_puts_r+0x38>
 800bfd2:	3e01      	subs	r6, #1
 800bfd4:	e7e4      	b.n	800bfa0 <_puts_r+0x68>
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	1c5a      	adds	r2, r3, #1
 800bfda:	6022      	str	r2, [r4, #0]
 800bfdc:	220a      	movs	r2, #10
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	e7ee      	b.n	800bfc0 <_puts_r+0x88>
	...

0800bfe4 <puts>:
 800bfe4:	4b02      	ldr	r3, [pc, #8]	@ (800bff0 <puts+0xc>)
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	6818      	ldr	r0, [r3, #0]
 800bfea:	f7ff bfa5 	b.w	800bf38 <_puts_r>
 800bfee:	bf00      	nop
 800bff0:	20000108 	.word	0x20000108

0800bff4 <__sread>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	460c      	mov	r4, r1
 800bff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffc:	f000 f8fc 	bl	800c1f8 <_read_r>
 800c000:	2800      	cmp	r0, #0
 800c002:	bfab      	itete	ge
 800c004:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c006:	89a3      	ldrhlt	r3, [r4, #12]
 800c008:	181b      	addge	r3, r3, r0
 800c00a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c00e:	bfac      	ite	ge
 800c010:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c012:	81a3      	strhlt	r3, [r4, #12]
 800c014:	bd10      	pop	{r4, pc}

0800c016 <__swrite>:
 800c016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c01a:	461f      	mov	r7, r3
 800c01c:	898b      	ldrh	r3, [r1, #12]
 800c01e:	05db      	lsls	r3, r3, #23
 800c020:	4605      	mov	r5, r0
 800c022:	460c      	mov	r4, r1
 800c024:	4616      	mov	r6, r2
 800c026:	d505      	bpl.n	800c034 <__swrite+0x1e>
 800c028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c02c:	2302      	movs	r3, #2
 800c02e:	2200      	movs	r2, #0
 800c030:	f000 f8d0 	bl	800c1d4 <_lseek_r>
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c03a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	4632      	mov	r2, r6
 800c042:	463b      	mov	r3, r7
 800c044:	4628      	mov	r0, r5
 800c046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c04a:	f000 b8f7 	b.w	800c23c <_write_r>

0800c04e <__sseek>:
 800c04e:	b510      	push	{r4, lr}
 800c050:	460c      	mov	r4, r1
 800c052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c056:	f000 f8bd 	bl	800c1d4 <_lseek_r>
 800c05a:	1c43      	adds	r3, r0, #1
 800c05c:	89a3      	ldrh	r3, [r4, #12]
 800c05e:	bf15      	itete	ne
 800c060:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c062:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c066:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c06a:	81a3      	strheq	r3, [r4, #12]
 800c06c:	bf18      	it	ne
 800c06e:	81a3      	strhne	r3, [r4, #12]
 800c070:	bd10      	pop	{r4, pc}

0800c072 <__sclose>:
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	f000 b89d 	b.w	800c1b4 <_close_r>

0800c07a <__swbuf_r>:
 800c07a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07c:	460e      	mov	r6, r1
 800c07e:	4614      	mov	r4, r2
 800c080:	4605      	mov	r5, r0
 800c082:	b118      	cbz	r0, 800c08c <__swbuf_r+0x12>
 800c084:	6a03      	ldr	r3, [r0, #32]
 800c086:	b90b      	cbnz	r3, 800c08c <__swbuf_r+0x12>
 800c088:	f7ff ff20 	bl	800becc <__sinit>
 800c08c:	69a3      	ldr	r3, [r4, #24]
 800c08e:	60a3      	str	r3, [r4, #8]
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	071a      	lsls	r2, r3, #28
 800c094:	d501      	bpl.n	800c09a <__swbuf_r+0x20>
 800c096:	6923      	ldr	r3, [r4, #16]
 800c098:	b943      	cbnz	r3, 800c0ac <__swbuf_r+0x32>
 800c09a:	4621      	mov	r1, r4
 800c09c:	4628      	mov	r0, r5
 800c09e:	f000 f82b 	bl	800c0f8 <__swsetup_r>
 800c0a2:	b118      	cbz	r0, 800c0ac <__swbuf_r+0x32>
 800c0a4:	f04f 37ff 	mov.w	r7, #4294967295
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ac:	6823      	ldr	r3, [r4, #0]
 800c0ae:	6922      	ldr	r2, [r4, #16]
 800c0b0:	1a98      	subs	r0, r3, r2
 800c0b2:	6963      	ldr	r3, [r4, #20]
 800c0b4:	b2f6      	uxtb	r6, r6
 800c0b6:	4283      	cmp	r3, r0
 800c0b8:	4637      	mov	r7, r6
 800c0ba:	dc05      	bgt.n	800c0c8 <__swbuf_r+0x4e>
 800c0bc:	4621      	mov	r1, r4
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f000 f9ca 	bl	800c458 <_fflush_r>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d1ed      	bne.n	800c0a4 <__swbuf_r+0x2a>
 800c0c8:	68a3      	ldr	r3, [r4, #8]
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	60a3      	str	r3, [r4, #8]
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	6022      	str	r2, [r4, #0]
 800c0d4:	701e      	strb	r6, [r3, #0]
 800c0d6:	6962      	ldr	r2, [r4, #20]
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d004      	beq.n	800c0e8 <__swbuf_r+0x6e>
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	07db      	lsls	r3, r3, #31
 800c0e2:	d5e1      	bpl.n	800c0a8 <__swbuf_r+0x2e>
 800c0e4:	2e0a      	cmp	r6, #10
 800c0e6:	d1df      	bne.n	800c0a8 <__swbuf_r+0x2e>
 800c0e8:	4621      	mov	r1, r4
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	f000 f9b4 	bl	800c458 <_fflush_r>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d0d9      	beq.n	800c0a8 <__swbuf_r+0x2e>
 800c0f4:	e7d6      	b.n	800c0a4 <__swbuf_r+0x2a>
	...

0800c0f8 <__swsetup_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4b29      	ldr	r3, [pc, #164]	@ (800c1a0 <__swsetup_r+0xa8>)
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	6818      	ldr	r0, [r3, #0]
 800c100:	460c      	mov	r4, r1
 800c102:	b118      	cbz	r0, 800c10c <__swsetup_r+0x14>
 800c104:	6a03      	ldr	r3, [r0, #32]
 800c106:	b90b      	cbnz	r3, 800c10c <__swsetup_r+0x14>
 800c108:	f7ff fee0 	bl	800becc <__sinit>
 800c10c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c110:	0719      	lsls	r1, r3, #28
 800c112:	d422      	bmi.n	800c15a <__swsetup_r+0x62>
 800c114:	06da      	lsls	r2, r3, #27
 800c116:	d407      	bmi.n	800c128 <__swsetup_r+0x30>
 800c118:	2209      	movs	r2, #9
 800c11a:	602a      	str	r2, [r5, #0]
 800c11c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c120:	81a3      	strh	r3, [r4, #12]
 800c122:	f04f 30ff 	mov.w	r0, #4294967295
 800c126:	e033      	b.n	800c190 <__swsetup_r+0x98>
 800c128:	0758      	lsls	r0, r3, #29
 800c12a:	d512      	bpl.n	800c152 <__swsetup_r+0x5a>
 800c12c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c12e:	b141      	cbz	r1, 800c142 <__swsetup_r+0x4a>
 800c130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c134:	4299      	cmp	r1, r3
 800c136:	d002      	beq.n	800c13e <__swsetup_r+0x46>
 800c138:	4628      	mov	r0, r5
 800c13a:	f000 f8bf 	bl	800c2bc <_free_r>
 800c13e:	2300      	movs	r3, #0
 800c140:	6363      	str	r3, [r4, #52]	@ 0x34
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	2300      	movs	r3, #0
 800c14c:	6063      	str	r3, [r4, #4]
 800c14e:	6923      	ldr	r3, [r4, #16]
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	f043 0308 	orr.w	r3, r3, #8
 800c158:	81a3      	strh	r3, [r4, #12]
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	b94b      	cbnz	r3, 800c172 <__swsetup_r+0x7a>
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c168:	d003      	beq.n	800c172 <__swsetup_r+0x7a>
 800c16a:	4621      	mov	r1, r4
 800c16c:	4628      	mov	r0, r5
 800c16e:	f000 f9c1 	bl	800c4f4 <__smakebuf_r>
 800c172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c176:	f013 0201 	ands.w	r2, r3, #1
 800c17a:	d00a      	beq.n	800c192 <__swsetup_r+0x9a>
 800c17c:	2200      	movs	r2, #0
 800c17e:	60a2      	str	r2, [r4, #8]
 800c180:	6962      	ldr	r2, [r4, #20]
 800c182:	4252      	negs	r2, r2
 800c184:	61a2      	str	r2, [r4, #24]
 800c186:	6922      	ldr	r2, [r4, #16]
 800c188:	b942      	cbnz	r2, 800c19c <__swsetup_r+0xa4>
 800c18a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c18e:	d1c5      	bne.n	800c11c <__swsetup_r+0x24>
 800c190:	bd38      	pop	{r3, r4, r5, pc}
 800c192:	0799      	lsls	r1, r3, #30
 800c194:	bf58      	it	pl
 800c196:	6962      	ldrpl	r2, [r4, #20]
 800c198:	60a2      	str	r2, [r4, #8]
 800c19a:	e7f4      	b.n	800c186 <__swsetup_r+0x8e>
 800c19c:	2000      	movs	r0, #0
 800c19e:	e7f7      	b.n	800c190 <__swsetup_r+0x98>
 800c1a0:	20000108 	.word	0x20000108

0800c1a4 <memset>:
 800c1a4:	4402      	add	r2, r0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d100      	bne.n	800c1ae <memset+0xa>
 800c1ac:	4770      	bx	lr
 800c1ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c1b2:	e7f9      	b.n	800c1a8 <memset+0x4>

0800c1b4 <_close_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d06      	ldr	r5, [pc, #24]	@ (800c1d0 <_close_r+0x1c>)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	f7f5 f937 	bl	8001432 <_close>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	d102      	bne.n	800c1ce <_close_r+0x1a>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	b103      	cbz	r3, 800c1ce <_close_r+0x1a>
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	200025a0 	.word	0x200025a0

0800c1d4 <_lseek_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d07      	ldr	r5, [pc, #28]	@ (800c1f4 <_lseek_r+0x20>)
 800c1d8:	4604      	mov	r4, r0
 800c1da:	4608      	mov	r0, r1
 800c1dc:	4611      	mov	r1, r2
 800c1de:	2200      	movs	r2, #0
 800c1e0:	602a      	str	r2, [r5, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f7f5 f94c 	bl	8001480 <_lseek>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	d102      	bne.n	800c1f2 <_lseek_r+0x1e>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	b103      	cbz	r3, 800c1f2 <_lseek_r+0x1e>
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	200025a0 	.word	0x200025a0

0800c1f8 <_read_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4d07      	ldr	r5, [pc, #28]	@ (800c218 <_read_r+0x20>)
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	4608      	mov	r0, r1
 800c200:	4611      	mov	r1, r2
 800c202:	2200      	movs	r2, #0
 800c204:	602a      	str	r2, [r5, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	f7f5 f8f6 	bl	80013f8 <_read>
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	d102      	bne.n	800c216 <_read_r+0x1e>
 800c210:	682b      	ldr	r3, [r5, #0]
 800c212:	b103      	cbz	r3, 800c216 <_read_r+0x1e>
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	200025a0 	.word	0x200025a0

0800c21c <_sbrk_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	4d06      	ldr	r5, [pc, #24]	@ (800c238 <_sbrk_r+0x1c>)
 800c220:	2300      	movs	r3, #0
 800c222:	4604      	mov	r4, r0
 800c224:	4608      	mov	r0, r1
 800c226:	602b      	str	r3, [r5, #0]
 800c228:	f7f5 f938 	bl	800149c <_sbrk>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_sbrk_r+0x1a>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_sbrk_r+0x1a>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	200025a0 	.word	0x200025a0

0800c23c <_write_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	@ (800c25c <_write_r+0x20>)
 800c240:	4604      	mov	r4, r0
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	2200      	movs	r2, #0
 800c248:	602a      	str	r2, [r5, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f7ff f862 	bl	800b314 <_write>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_write_r+0x1e>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_write_r+0x1e>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	200025a0 	.word	0x200025a0

0800c260 <__errno>:
 800c260:	4b01      	ldr	r3, [pc, #4]	@ (800c268 <__errno+0x8>)
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	20000108 	.word	0x20000108

0800c26c <__libc_init_array>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	4d0d      	ldr	r5, [pc, #52]	@ (800c2a4 <__libc_init_array+0x38>)
 800c270:	4c0d      	ldr	r4, [pc, #52]	@ (800c2a8 <__libc_init_array+0x3c>)
 800c272:	1b64      	subs	r4, r4, r5
 800c274:	10a4      	asrs	r4, r4, #2
 800c276:	2600      	movs	r6, #0
 800c278:	42a6      	cmp	r6, r4
 800c27a:	d109      	bne.n	800c290 <__libc_init_array+0x24>
 800c27c:	4d0b      	ldr	r5, [pc, #44]	@ (800c2ac <__libc_init_array+0x40>)
 800c27e:	4c0c      	ldr	r4, [pc, #48]	@ (800c2b0 <__libc_init_array+0x44>)
 800c280:	f000 f996 	bl	800c5b0 <_init>
 800c284:	1b64      	subs	r4, r4, r5
 800c286:	10a4      	asrs	r4, r4, #2
 800c288:	2600      	movs	r6, #0
 800c28a:	42a6      	cmp	r6, r4
 800c28c:	d105      	bne.n	800c29a <__libc_init_array+0x2e>
 800c28e:	bd70      	pop	{r4, r5, r6, pc}
 800c290:	f855 3b04 	ldr.w	r3, [r5], #4
 800c294:	4798      	blx	r3
 800c296:	3601      	adds	r6, #1
 800c298:	e7ee      	b.n	800c278 <__libc_init_array+0xc>
 800c29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c29e:	4798      	blx	r3
 800c2a0:	3601      	adds	r6, #1
 800c2a2:	e7f2      	b.n	800c28a <__libc_init_array+0x1e>
 800c2a4:	0800c65c 	.word	0x0800c65c
 800c2a8:	0800c65c 	.word	0x0800c65c
 800c2ac:	0800c65c 	.word	0x0800c65c
 800c2b0:	0800c660 	.word	0x0800c660

0800c2b4 <__retarget_lock_init_recursive>:
 800c2b4:	4770      	bx	lr

0800c2b6 <__retarget_lock_acquire_recursive>:
 800c2b6:	4770      	bx	lr

0800c2b8 <__retarget_lock_release_recursive>:
 800c2b8:	4770      	bx	lr
	...

0800c2bc <_free_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	4605      	mov	r5, r0
 800c2c0:	2900      	cmp	r1, #0
 800c2c2:	d041      	beq.n	800c348 <_free_r+0x8c>
 800c2c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2c8:	1f0c      	subs	r4, r1, #4
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	bfb8      	it	lt
 800c2ce:	18e4      	addlt	r4, r4, r3
 800c2d0:	f7ff fd64 	bl	800bd9c <__malloc_lock>
 800c2d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c34c <_free_r+0x90>)
 800c2d6:	6813      	ldr	r3, [r2, #0]
 800c2d8:	b933      	cbnz	r3, 800c2e8 <_free_r+0x2c>
 800c2da:	6063      	str	r3, [r4, #4]
 800c2dc:	6014      	str	r4, [r2, #0]
 800c2de:	4628      	mov	r0, r5
 800c2e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2e4:	f7ff bd60 	b.w	800bda8 <__malloc_unlock>
 800c2e8:	42a3      	cmp	r3, r4
 800c2ea:	d908      	bls.n	800c2fe <_free_r+0x42>
 800c2ec:	6820      	ldr	r0, [r4, #0]
 800c2ee:	1821      	adds	r1, r4, r0
 800c2f0:	428b      	cmp	r3, r1
 800c2f2:	bf01      	itttt	eq
 800c2f4:	6819      	ldreq	r1, [r3, #0]
 800c2f6:	685b      	ldreq	r3, [r3, #4]
 800c2f8:	1809      	addeq	r1, r1, r0
 800c2fa:	6021      	streq	r1, [r4, #0]
 800c2fc:	e7ed      	b.n	800c2da <_free_r+0x1e>
 800c2fe:	461a      	mov	r2, r3
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	b10b      	cbz	r3, 800c308 <_free_r+0x4c>
 800c304:	42a3      	cmp	r3, r4
 800c306:	d9fa      	bls.n	800c2fe <_free_r+0x42>
 800c308:	6811      	ldr	r1, [r2, #0]
 800c30a:	1850      	adds	r0, r2, r1
 800c30c:	42a0      	cmp	r0, r4
 800c30e:	d10b      	bne.n	800c328 <_free_r+0x6c>
 800c310:	6820      	ldr	r0, [r4, #0]
 800c312:	4401      	add	r1, r0
 800c314:	1850      	adds	r0, r2, r1
 800c316:	4283      	cmp	r3, r0
 800c318:	6011      	str	r1, [r2, #0]
 800c31a:	d1e0      	bne.n	800c2de <_free_r+0x22>
 800c31c:	6818      	ldr	r0, [r3, #0]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	6053      	str	r3, [r2, #4]
 800c322:	4408      	add	r0, r1
 800c324:	6010      	str	r0, [r2, #0]
 800c326:	e7da      	b.n	800c2de <_free_r+0x22>
 800c328:	d902      	bls.n	800c330 <_free_r+0x74>
 800c32a:	230c      	movs	r3, #12
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	e7d6      	b.n	800c2de <_free_r+0x22>
 800c330:	6820      	ldr	r0, [r4, #0]
 800c332:	1821      	adds	r1, r4, r0
 800c334:	428b      	cmp	r3, r1
 800c336:	bf04      	itt	eq
 800c338:	6819      	ldreq	r1, [r3, #0]
 800c33a:	685b      	ldreq	r3, [r3, #4]
 800c33c:	6063      	str	r3, [r4, #4]
 800c33e:	bf04      	itt	eq
 800c340:	1809      	addeq	r1, r1, r0
 800c342:	6021      	streq	r1, [r4, #0]
 800c344:	6054      	str	r4, [r2, #4]
 800c346:	e7ca      	b.n	800c2de <_free_r+0x22>
 800c348:	bd38      	pop	{r3, r4, r5, pc}
 800c34a:	bf00      	nop
 800c34c:	20002460 	.word	0x20002460

0800c350 <__sflush_r>:
 800c350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c358:	0716      	lsls	r6, r2, #28
 800c35a:	4605      	mov	r5, r0
 800c35c:	460c      	mov	r4, r1
 800c35e:	d454      	bmi.n	800c40a <__sflush_r+0xba>
 800c360:	684b      	ldr	r3, [r1, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	dc02      	bgt.n	800c36c <__sflush_r+0x1c>
 800c366:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c368:	2b00      	cmp	r3, #0
 800c36a:	dd48      	ble.n	800c3fe <__sflush_r+0xae>
 800c36c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c36e:	2e00      	cmp	r6, #0
 800c370:	d045      	beq.n	800c3fe <__sflush_r+0xae>
 800c372:	2300      	movs	r3, #0
 800c374:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c378:	682f      	ldr	r7, [r5, #0]
 800c37a:	6a21      	ldr	r1, [r4, #32]
 800c37c:	602b      	str	r3, [r5, #0]
 800c37e:	d030      	beq.n	800c3e2 <__sflush_r+0x92>
 800c380:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	0759      	lsls	r1, r3, #29
 800c386:	d505      	bpl.n	800c394 <__sflush_r+0x44>
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	1ad2      	subs	r2, r2, r3
 800c38c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c38e:	b10b      	cbz	r3, 800c394 <__sflush_r+0x44>
 800c390:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c392:	1ad2      	subs	r2, r2, r3
 800c394:	2300      	movs	r3, #0
 800c396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c398:	6a21      	ldr	r1, [r4, #32]
 800c39a:	4628      	mov	r0, r5
 800c39c:	47b0      	blx	r6
 800c39e:	1c43      	adds	r3, r0, #1
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	d106      	bne.n	800c3b2 <__sflush_r+0x62>
 800c3a4:	6829      	ldr	r1, [r5, #0]
 800c3a6:	291d      	cmp	r1, #29
 800c3a8:	d82b      	bhi.n	800c402 <__sflush_r+0xb2>
 800c3aa:	4a2a      	ldr	r2, [pc, #168]	@ (800c454 <__sflush_r+0x104>)
 800c3ac:	410a      	asrs	r2, r1
 800c3ae:	07d6      	lsls	r6, r2, #31
 800c3b0:	d427      	bmi.n	800c402 <__sflush_r+0xb2>
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	6062      	str	r2, [r4, #4]
 800c3b6:	04d9      	lsls	r1, r3, #19
 800c3b8:	6922      	ldr	r2, [r4, #16]
 800c3ba:	6022      	str	r2, [r4, #0]
 800c3bc:	d504      	bpl.n	800c3c8 <__sflush_r+0x78>
 800c3be:	1c42      	adds	r2, r0, #1
 800c3c0:	d101      	bne.n	800c3c6 <__sflush_r+0x76>
 800c3c2:	682b      	ldr	r3, [r5, #0]
 800c3c4:	b903      	cbnz	r3, 800c3c8 <__sflush_r+0x78>
 800c3c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3ca:	602f      	str	r7, [r5, #0]
 800c3cc:	b1b9      	cbz	r1, 800c3fe <__sflush_r+0xae>
 800c3ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3d2:	4299      	cmp	r1, r3
 800c3d4:	d002      	beq.n	800c3dc <__sflush_r+0x8c>
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f7ff ff70 	bl	800c2bc <_free_r>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3e0:	e00d      	b.n	800c3fe <__sflush_r+0xae>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	47b0      	blx	r6
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	1c50      	adds	r0, r2, #1
 800c3ec:	d1c9      	bne.n	800c382 <__sflush_r+0x32>
 800c3ee:	682b      	ldr	r3, [r5, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d0c6      	beq.n	800c382 <__sflush_r+0x32>
 800c3f4:	2b1d      	cmp	r3, #29
 800c3f6:	d001      	beq.n	800c3fc <__sflush_r+0xac>
 800c3f8:	2b16      	cmp	r3, #22
 800c3fa:	d11e      	bne.n	800c43a <__sflush_r+0xea>
 800c3fc:	602f      	str	r7, [r5, #0]
 800c3fe:	2000      	movs	r0, #0
 800c400:	e022      	b.n	800c448 <__sflush_r+0xf8>
 800c402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c406:	b21b      	sxth	r3, r3
 800c408:	e01b      	b.n	800c442 <__sflush_r+0xf2>
 800c40a:	690f      	ldr	r7, [r1, #16]
 800c40c:	2f00      	cmp	r7, #0
 800c40e:	d0f6      	beq.n	800c3fe <__sflush_r+0xae>
 800c410:	0793      	lsls	r3, r2, #30
 800c412:	680e      	ldr	r6, [r1, #0]
 800c414:	bf08      	it	eq
 800c416:	694b      	ldreq	r3, [r1, #20]
 800c418:	600f      	str	r7, [r1, #0]
 800c41a:	bf18      	it	ne
 800c41c:	2300      	movne	r3, #0
 800c41e:	eba6 0807 	sub.w	r8, r6, r7
 800c422:	608b      	str	r3, [r1, #8]
 800c424:	f1b8 0f00 	cmp.w	r8, #0
 800c428:	dde9      	ble.n	800c3fe <__sflush_r+0xae>
 800c42a:	6a21      	ldr	r1, [r4, #32]
 800c42c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c42e:	4643      	mov	r3, r8
 800c430:	463a      	mov	r2, r7
 800c432:	4628      	mov	r0, r5
 800c434:	47b0      	blx	r6
 800c436:	2800      	cmp	r0, #0
 800c438:	dc08      	bgt.n	800c44c <__sflush_r+0xfc>
 800c43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c43e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c442:	81a3      	strh	r3, [r4, #12]
 800c444:	f04f 30ff 	mov.w	r0, #4294967295
 800c448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c44c:	4407      	add	r7, r0
 800c44e:	eba8 0800 	sub.w	r8, r8, r0
 800c452:	e7e7      	b.n	800c424 <__sflush_r+0xd4>
 800c454:	dfbffffe 	.word	0xdfbffffe

0800c458 <_fflush_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	690b      	ldr	r3, [r1, #16]
 800c45c:	4605      	mov	r5, r0
 800c45e:	460c      	mov	r4, r1
 800c460:	b913      	cbnz	r3, 800c468 <_fflush_r+0x10>
 800c462:	2500      	movs	r5, #0
 800c464:	4628      	mov	r0, r5
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	b118      	cbz	r0, 800c472 <_fflush_r+0x1a>
 800c46a:	6a03      	ldr	r3, [r0, #32]
 800c46c:	b90b      	cbnz	r3, 800c472 <_fflush_r+0x1a>
 800c46e:	f7ff fd2d 	bl	800becc <__sinit>
 800c472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d0f3      	beq.n	800c462 <_fflush_r+0xa>
 800c47a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c47c:	07d0      	lsls	r0, r2, #31
 800c47e:	d404      	bmi.n	800c48a <_fflush_r+0x32>
 800c480:	0599      	lsls	r1, r3, #22
 800c482:	d402      	bmi.n	800c48a <_fflush_r+0x32>
 800c484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c486:	f7ff ff16 	bl	800c2b6 <__retarget_lock_acquire_recursive>
 800c48a:	4628      	mov	r0, r5
 800c48c:	4621      	mov	r1, r4
 800c48e:	f7ff ff5f 	bl	800c350 <__sflush_r>
 800c492:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c494:	07da      	lsls	r2, r3, #31
 800c496:	4605      	mov	r5, r0
 800c498:	d4e4      	bmi.n	800c464 <_fflush_r+0xc>
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	059b      	lsls	r3, r3, #22
 800c49e:	d4e1      	bmi.n	800c464 <_fflush_r+0xc>
 800c4a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4a2:	f7ff ff09 	bl	800c2b8 <__retarget_lock_release_recursive>
 800c4a6:	e7dd      	b.n	800c464 <_fflush_r+0xc>

0800c4a8 <__swhatbuf_r>:
 800c4a8:	b570      	push	{r4, r5, r6, lr}
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b0:	2900      	cmp	r1, #0
 800c4b2:	b096      	sub	sp, #88	@ 0x58
 800c4b4:	4615      	mov	r5, r2
 800c4b6:	461e      	mov	r6, r3
 800c4b8:	da0d      	bge.n	800c4d6 <__swhatbuf_r+0x2e>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c4c0:	f04f 0100 	mov.w	r1, #0
 800c4c4:	bf14      	ite	ne
 800c4c6:	2340      	movne	r3, #64	@ 0x40
 800c4c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	6031      	str	r1, [r6, #0]
 800c4d0:	602b      	str	r3, [r5, #0]
 800c4d2:	b016      	add	sp, #88	@ 0x58
 800c4d4:	bd70      	pop	{r4, r5, r6, pc}
 800c4d6:	466a      	mov	r2, sp
 800c4d8:	f000 f848 	bl	800c56c <_fstat_r>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	dbec      	blt.n	800c4ba <__swhatbuf_r+0x12>
 800c4e0:	9901      	ldr	r1, [sp, #4]
 800c4e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c4e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c4ea:	4259      	negs	r1, r3
 800c4ec:	4159      	adcs	r1, r3
 800c4ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4f2:	e7eb      	b.n	800c4cc <__swhatbuf_r+0x24>

0800c4f4 <__smakebuf_r>:
 800c4f4:	898b      	ldrh	r3, [r1, #12]
 800c4f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4f8:	079d      	lsls	r5, r3, #30
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	d507      	bpl.n	800c510 <__smakebuf_r+0x1c>
 800c500:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	6123      	str	r3, [r4, #16]
 800c508:	2301      	movs	r3, #1
 800c50a:	6163      	str	r3, [r4, #20]
 800c50c:	b003      	add	sp, #12
 800c50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c510:	ab01      	add	r3, sp, #4
 800c512:	466a      	mov	r2, sp
 800c514:	f7ff ffc8 	bl	800c4a8 <__swhatbuf_r>
 800c518:	9f00      	ldr	r7, [sp, #0]
 800c51a:	4605      	mov	r5, r0
 800c51c:	4639      	mov	r1, r7
 800c51e:	4630      	mov	r0, r6
 800c520:	f7ff fbbc 	bl	800bc9c <_malloc_r>
 800c524:	b948      	cbnz	r0, 800c53a <__smakebuf_r+0x46>
 800c526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c52a:	059a      	lsls	r2, r3, #22
 800c52c:	d4ee      	bmi.n	800c50c <__smakebuf_r+0x18>
 800c52e:	f023 0303 	bic.w	r3, r3, #3
 800c532:	f043 0302 	orr.w	r3, r3, #2
 800c536:	81a3      	strh	r3, [r4, #12]
 800c538:	e7e2      	b.n	800c500 <__smakebuf_r+0xc>
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	6020      	str	r0, [r4, #0]
 800c53e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c542:	81a3      	strh	r3, [r4, #12]
 800c544:	9b01      	ldr	r3, [sp, #4]
 800c546:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c54a:	b15b      	cbz	r3, 800c564 <__smakebuf_r+0x70>
 800c54c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c550:	4630      	mov	r0, r6
 800c552:	f000 f81d 	bl	800c590 <_isatty_r>
 800c556:	b128      	cbz	r0, 800c564 <__smakebuf_r+0x70>
 800c558:	89a3      	ldrh	r3, [r4, #12]
 800c55a:	f023 0303 	bic.w	r3, r3, #3
 800c55e:	f043 0301 	orr.w	r3, r3, #1
 800c562:	81a3      	strh	r3, [r4, #12]
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	431d      	orrs	r5, r3
 800c568:	81a5      	strh	r5, [r4, #12]
 800c56a:	e7cf      	b.n	800c50c <__smakebuf_r+0x18>

0800c56c <_fstat_r>:
 800c56c:	b538      	push	{r3, r4, r5, lr}
 800c56e:	4d07      	ldr	r5, [pc, #28]	@ (800c58c <_fstat_r+0x20>)
 800c570:	2300      	movs	r3, #0
 800c572:	4604      	mov	r4, r0
 800c574:	4608      	mov	r0, r1
 800c576:	4611      	mov	r1, r2
 800c578:	602b      	str	r3, [r5, #0]
 800c57a:	f7f4 ff66 	bl	800144a <_fstat>
 800c57e:	1c43      	adds	r3, r0, #1
 800c580:	d102      	bne.n	800c588 <_fstat_r+0x1c>
 800c582:	682b      	ldr	r3, [r5, #0]
 800c584:	b103      	cbz	r3, 800c588 <_fstat_r+0x1c>
 800c586:	6023      	str	r3, [r4, #0]
 800c588:	bd38      	pop	{r3, r4, r5, pc}
 800c58a:	bf00      	nop
 800c58c:	200025a0 	.word	0x200025a0

0800c590 <_isatty_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4d06      	ldr	r5, [pc, #24]	@ (800c5ac <_isatty_r+0x1c>)
 800c594:	2300      	movs	r3, #0
 800c596:	4604      	mov	r4, r0
 800c598:	4608      	mov	r0, r1
 800c59a:	602b      	str	r3, [r5, #0]
 800c59c:	f7f4 ff65 	bl	800146a <_isatty>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_isatty_r+0x1a>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_isatty_r+0x1a>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	200025a0 	.word	0x200025a0

0800c5b0 <_init>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	bf00      	nop
 800c5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5b6:	bc08      	pop	{r3}
 800c5b8:	469e      	mov	lr, r3
 800c5ba:	4770      	bx	lr

0800c5bc <_fini>:
 800c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5be:	bf00      	nop
 800c5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c2:	bc08      	pop	{r3}
 800c5c4:	469e      	mov	lr, r3
 800c5c6:	4770      	bx	lr
